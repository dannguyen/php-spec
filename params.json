{"name":"Php-spec","tagline":"PHP Language Specification","body":"*This was mirrored as of 2014-07-30*\r\n\r\n# Specification for PHP\r\nFacebook has dedicated all copyright to this specification to the public\r\ndomain worldwide under the CC0 Public Domain Dedication located at\r\n<http://creativecommons.org/publicdomain/zero/1.0/>. This specification\r\nis distributed without any warranty.\r\n\r\n(Initially written in 2014 by Facebook, Inc., July 2014)\r\n\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\r\n\r\n- [Introduction](#introduction)\r\n- [Conformance](#conformance)\r\n- [Terms and Definitions](#terms-and-definitions)\r\n- [Basic Concepts](#basic-concepts)\r\n  - [Program Structure](#program-structure)\r\n  - [Program Start-Up](#program-start-up)\r\n  - [Program Termination](#program-termination)\r\n  - [The Memory Model](#the-memory-model)\r\n    - [General](#general)\r\n    - [Reclamation and Automatic Memory Management](#reclamation-and-automatic-memory-management)\r\n    - [Assignment](#assignment)\r\n      - [General](#general-1)\r\n      - [Value Assignment of Scalar Types to a Local Variable](#value-assignment-of-scalar-types-to-a-local-variable)\r\n      - [Value Assignment of Object and Resource Types to a Local Variable](#value-assignment-of-object-and-resource-types-to-a-local-variable)\r\n      - [ByRef Assignment for Scalar Types with Local Variables](#byref-assignment-for-scalar-types-with-local-variables)\r\n      - [Byref Assignment of Non-Scalar Types with Local Variables](#byref-assignment-of-non-scalar-types-with-local-variables)\r\n      - [Value Assignment of Array Types to Local Variables](#value-assignment-of-array-types-to-local-variables)\r\n      - [Deferred Array Copying](#deferred-array-copying)\r\n      - [General Value Assignment](#general-value-assignment)\r\n      - [General ByRef Assignment](#general-byref-assignment)\r\n    - [Argument Passing](#argument-passing)\r\n    - [Value Returning](#value-returning)\r\n    - [Cloning objects](#cloning-objects)\r\n  - [Scope](#scope)\r\n  - [Storage Duration](#storage-duration)\r\n- [Types](#types)\r\n  - [General](#general-2)\r\n  - [Scalar Types](#scalar-types)\r\n    - [General](#general-3)\r\n    - [The Boolean Type](#the-boolean-type)\r\n    - [The Integer Type](#the-integer-type)\r\n    - [The Floating-Point Type](#the-floating-point-type)\r\n    - [The String Type](#the-string-type)\r\n    - [The Null Type](#the-null-type)\r\n  - [Composite Types](#composite-types)\r\n    - [Array Types](#array-types)\r\n    - [Object Types](#object-types)\r\n    - [Resource Types](#resource-types)\r\n- [Constants](#constants)\r\n  - [General](#general-4)\r\n  - [Context-Dependent Constants](#context-dependent-constants)\r\n  - [Core Predefined Constants](#core-predefined-constants)\r\n  - [User-Defined Constants](#user-defined-constants)\r\n- [Variables](#variables)\r\n  - [General](#general-5)\r\n  - [Kinds of Variables](#kinds-of-variables)\r\n    - [Constants](#constants-1)\r\n    - [Local Variables](#local-variables)\r\n    - [Array Elements](#array-elements)\r\n    - [Function Statics](#function-statics)\r\n    - [Global Variables](#global-variables)\r\n    - [Instance Properties](#instance-properties)\r\n    - [Static Properties](#static-properties)\r\n    - [Class and Interface Constants](#class-and-interface-constants)\r\n  - [Predefined Variables](#predefined-variables)\r\n- [Conversions](#conversions)\r\n  - [General](#general-6)\r\n  - [Converting to Boolean Type](#converting-to-boolean-type)\r\n  - [Converting to Integer Type](#converting-to-integer-type)\r\n  - [Converting to Floating-Point Type](#converting-to-floating-point-type)\r\n  - [Converting to String Type](#converting-to-string-type)\r\n  - [Converting to Array Type](#converting-to-array-type)\r\n  - [Converting to Object Type](#converting-to-object-type)\r\n- [Lexical Structure](#lexical-structure)\r\n  - [Scripts](#scripts)\r\n  - [Grammars](#grammars)\r\n  - [Lexical analysis](#lexical-analysis)\r\n  - [General](#general-7)\r\n  - [Comments](#comments)\r\n    - [White Space](#white-space)\r\n    - [Tokens](#tokens)\r\n      - [General](#general-8)\r\n      - [Names](#names)\r\n      - [Keywords](#keywords)\r\n      - [Literals](#literals)\r\n        - [General](#general-9)\r\n        - [Boolean Literals](#boolean-literals)\r\n        - [Integer Literals](#integer-literals)\r\n        - [Floating-Point Literals](#floating-point-literals)\r\n        - [String Literals](#string-literals)\r\n          - [Single-Quoted String Literals](#single-quoted-string-literals)\r\n          - [Double-Quoted String Literals](#double-quoted-string-literals)\r\n          - [Heredoc String Literals](#heredoc-string-literals)\r\n          - [Nowdoc String Literals](#nowdoc-string-literals)\r\n        - [The Null Literal](#the-null-literal)\r\n      - [Operators and Punctuators](#operators-and-punctuators)\r\n- [Expressions](#expressions)\r\n  - [General](#general-10)\r\n  - [Primary Expressions](#primary-expressions)\r\n    - [General](#general-11)\r\n    - [Intrinsics](#intrinsics)\r\n      - [General](#general-12)\r\n      - [array](#array)\r\n      - [echo](#echo)\r\n      - [empty](#empty)\r\n      - [eval](#eval)\r\n      - [exit/die](#exitdie)\r\n      - [isset](#isset)\r\n      - [list](#list)\r\n      - [print](#print)\r\n      - [unset](#unset)\r\n    - [Anonymous Function-Creation](#anonymous-function-creation)\r\n  - [Postfix Operators](#postfix-operators)\r\n    - [General](#general-13)\r\n    - [The `clone` Operator](#the-clone-operator)\r\n    - [The `new` Operator](#the-new-operator)\r\n    - [Array Creation Operator](#array-creation-operator)\r\n    - [Subscript Operator](#subscript-operator)\r\n    - [Function Call Operator](#function-call-operator)\r\n    - [Member-Selection Operator](#member-selection-operator)\r\n    - [Postfix Increment and Decrement Operators](#postfix-increment-and-decrement-operators)\r\n    - [Scope-Resolution Operator](#scope-resolution-operator)\r\n    - [Exponentiation Operator](#exponentiation-operator)\r\n  - [Unary Operators](#unary-operators)\r\n    - [General](#general-14)\r\n    - [Prefix Increment and Decrement Operators](#prefix-increment-and-decrement-operators)\r\n    - [Unary Arithmetic Operators](#unary-arithmetic-operators)\r\n    - [Error Control Operator](#error-control-operator)\r\n    - [Shell Command Operator](#shell-command-operator)\r\n    - [Cast Operator](#cast-operator)\r\n    - [Variable-Name Creation Operator](#variable-name-creation-operator)\r\n  - [`instanceof` Operator](#instanceof-operator)\r\n  - [Multiplicative Operators](#multiplicative-operators)\r\n  - [Additive Operators](#additive-operators)\r\n  - [Bitwise Shift Operators](#bitwise-shift-operators)\r\n  - [Relational Operators](#relational-operators)\r\n  - [Equality Operators](#equality-operators)\r\n  - [Bitwise AND Operator](#bitwise-and-operator)\r\n  - [Bitwise Exclusive OR Operator](#bitwise-exclusive-or-operator)\r\n  - [Bitwise Inclusive OR Operator](#bitwise-inclusive-or-operator)\r\n  - [Logical AND Operator (form 1)](#logical-and-operator-form-1)\r\n  - [Logical Inclusive OR Operator (form 1)](#logical-inclusive-or-operator-form-1)\r\n  - [Conditional Operator](#conditional-operator)\r\n  - [Assignment Operators](#assignment-operators)\r\n    - [General](#general-15)\r\n    - [Simple Assignment](#simple-assignment)\r\n    - [byRef Assignment](#byref-assignment)\r\n  - [Compound Assignment](#compound-assignment)\r\n  - [Logical AND Operator (form 2)](#logical-and-operator-form-2)\r\n  - [Logical Exclusive OR Operator](#logical-exclusive-or-operator)\r\n  - [Logical Inclusive OR Operator (form 2)](#logical-inclusive-or-operator-form-2)\r\n  - [`yield` Operator](#yield-operator)\r\n  - [Script Inclusion Operators](#script-inclusion-operators)\r\n    - [General](#general-16)\r\n    - [The `include` Operator](#the-include-operator)\r\n    - [The `include_once` Operator](#the-include_once-operator)\r\n    - [The `require` Operator](#the-require-operator)\r\n    - [The `require_once` Operator](#the-require_once-operator)\r\n  - [Constant Expressions](#constant-expressions)\r\n- [Statements](#statements)\r\n  - [General](#general-17)\r\n  - [Compound Statements](#compound-statements)\r\n  - [Labeled Statements](#labeled-statements)\r\n  - [Expression Statements](#expression-statements)\r\n  - [Selection Statements](#selection-statements)\r\n    - [General](#general-18)\r\n    - [The `if` Statement](#the-if-statement)\r\n    - [The `switch` Statement](#the-switch-statement)\r\n  - [Iteration Statements](#iteration-statements)\r\n    - [General](#general-19)\r\n  - [The `while` Statement](#the-while-statement)\r\n  - [The `do` Statement](#the-do-statement)\r\n  - [The `for` Statement](#the-for-statement)\r\n  - [The `foreach` Statement](#the-foreach-statement)\r\n  - [Jump Statements](#jump-statements)\r\n    - [General](#general-20)\r\n    - [The `goto` Statement](#the-goto-statement)\r\n    - [The `continue` Statement](#the-continue-statement)\r\n  - [The `break` Statement](#the-break-statement)\r\n    - [The `return` Statement](#the-return-statement)\r\n    - [The `throw` Statement](#the-throw-statement)\r\n  - [The `try` Statement](#the-try-statement)\r\n  - [The `declare` Statement](#the-declare-statement)\r\n- [Arrays](#arrays)\r\n  - [General](#general-21)\r\n  - [Array Creation and Initialization](#array-creation-and-initialization)\r\n  - [Element Access and Insertion](#element-access-and-insertion)\r\n- [Functions](#functions)\r\n  - [General](#general-22)\r\n  - [Function Calls](#function-calls)\r\n  - [Function Definitions](#function-definitions)\r\n  - [Variable Functions](#variable-functions)\r\n  - [Anonymous Functions](#anonymous-functions)\r\n- [Classes](#classes)\r\n  - [General](#general-23)\r\n  - [Class Declarations](#class-declarations)\r\n  - [Class Members](#class-members)\r\n  - [Dynamic Members](#dynamic-members)\r\n  - [Constants](#constants-2)\r\n  - [Properties](#properties)\r\n  - [Methods](#methods)\r\n  - [Constructors](#constructors)\r\n  - [Destructors](#destructors)\r\n  - [Methods with Special Semantics](#methods-with-special-semantics)\r\n    - [General](#general-24)\r\n    - [Method `__call`](#method-__call)\r\n    - [Method `__callStatic`](#method-__callstatic)\r\n    - [Method `__clone`](#method-__clone)\r\n    - [Method `__get`](#method-__get)\r\n    - [Method `__invoke`](#method-__invoke)\r\n    - [Method `__isset`](#method-__isset)\r\n    - [Method `__set`](#method-__set)\r\n    - [Method `__set_state`](#method-__set_state)\r\n    - [Method `__sleep`](#method-__sleep)\r\n    - [Method `__toString`](#method-__tostring)\r\n    - [Method `__unset`](#method-__unset)\r\n    - [Method `__wakeup`](#method-__wakeup)\r\n  - [Serialization](#serialization)\r\n  - [Predefined Classes](#predefined-classes)\r\n    - [Class `Closure`](#class-closure)\r\n    - [Class `Generator`](#class-generator)\r\n    - [Class `__PHP_Incomplete_Class`](#class-__php_incomplete_class)\r\n    - [Class `stdClass`](#class-stdclass)\r\n- [Interfaces](#interfaces)\r\n  - [General](#general-25)\r\n  - [Interface Declarations](#interface-declarations)\r\n  - [Interface Members](#interface-members)\r\n  - [Constants](#constants-3)\r\n  - [Methods](#methods-1)\r\n  - [Predefined Interfaces](#predefined-interfaces)\r\n    - [Interface `ArrayAccess`](#interface-arrayaccess)\r\n    - [Interface `Iterator`](#interface-iterator)\r\n    - [Interface `IteratorAggregate`](#interface-iteratoraggregate)\r\n    - [Interface `Traversable`](#interface-traversable)\r\n    - [Interface  `Serializable`](#interface--serializable)\r\n- [Traits](#traits)\r\n  - [General](#general-26)\r\n  - [Trait Declarations](#trait-declarations)\r\n  - [Trait Members](#trait-members)\r\n- [Exception Handling](#exception-handling)\r\n  - [General](#general-27)\r\n  - [Class `Exception`](#class-exception)\r\n  - [Tracing Exceptions](#tracing-exceptions)\r\n  - [User-Defined Exception Classes](#user-defined-exception-classes)\r\n- [Namespaces](#namespaces)\r\n  - [General](#general-28)\r\n  - [Name Lookup](#name-lookup)\r\n  - [Defining Namespaces](#defining-namespaces)\r\n  - [Namespace Use Declarations**](#namespace-use-declarations)\r\n- [Grammar](#grammar)\r\n  - [General](#general-29)\r\n  - [Lexical Grammar](#lexical-grammar)\r\n    - [General](#general-30)\r\n    - [Comments](#comments-1)\r\n    - [White Space](#white-space-1)\r\n    - [Tokens](#tokens-1)\r\n      - [General](#general-31)\r\n      - [Names](#names-1)\r\n    - [Keywords](#keywords-1)\r\n    - [Literals](#literals-1)\r\n      - [General](#general-32)\r\n      - [Boolean Literals](#boolean-literals-1)\r\n      - [Integer Literals](#integer-literals-1)\r\n      - [Floating-Point Literals](#floating-point-literals-1)\r\n      - [String Literals](#string-literals-1)\r\n      - [The Null Literal](#the-null-literal-1)\r\n    - [Operators and Punctuators](#operators-and-punctuators-1)\r\n  - [Syntactic Grammar](#syntactic-grammar)\r\n    - [Program Structure](#program-structure-1)\r\n    - [Variables](#variables-1)\r\n    - [Expressions](#expressions-1)\r\n      - [Primary Expressions](#primary-expressions-1)\r\n      - [Postfix Operators](#postfix-operators-1)\r\n      - [Unary Operators](#unary-operators-1)\r\n      - [instanceof Operator](#instanceof-operator)\r\n      - [Multiplicative Operators](#multiplicative-operators-1)\r\n      - [Additive Operators](#additive-operators-1)\r\n      - [Bitwise Shift Operators](#bitwise-shift-operators-1)\r\n      - [Relational Operators](#relational-operators-1)\r\n      - [Equality Operators](#equality-operators-1)\r\n      - [Bitwise Logical Operators](#bitwise-logical-operators)\r\n      - [Logical Operators (form 1)](#logical-operators-form-1)\r\n      - [Conditional Operator](#conditional-operator-1)\r\n      - [Assignment Operators](#assignment-operators-1)\r\n      - [Logical Operators (form 2)](#logical-operators-form-2)\r\n      - [yield Operator](#yield-operator)\r\n      - [Script Inclusion Operators](#script-inclusion-operators-1)\r\n      - [Constant Expressions](#constant-expressions-1)\r\n    - [Statements](#statements-1)\r\n      - [General](#general-33)\r\n      - [Compound Statements](#compound-statements-1)\r\n      - [Labeled Statements](#labeled-statements-1)\r\n      - [Expression Statements](#expression-statements-1)\r\n      - [Iteration Statements](#iteration-statements-1)\r\n      - [Jump Statements](#jump-statements-1)\r\n      - [The try Statement](#the-try-statement)\r\n      - [The declare Statement](#the-declare-statement)\r\n    - [Functions](#functions-1)\r\n    - [Classes](#classes-1)\r\n    - [Interfaces](#interfaces-1)\r\n    - [Traits](#traits-1)\r\n    - [Namespaces](#namespaces-1)\r\n- [Bibliography](#bibliography)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n\r\n#Introduction\r\nThis specification is intended to provide a complete and concise\r\ndefinition of the syntax and semantics of the PHP language, suitable for\r\nuse by the following:\r\n\r\n-   Implementers of a PHP compiler\r\n-   Implementers of a test suite for the PHP language\r\n-   Programmers writing PHP code\r\n\r\nFor now, the runtime library has been excluded, as that is documented at\r\n[www.php.net](http://www.php.net). As such, all forward references to library facilities have placeholders of the form (§xx).\r\n\r\n#Conformance\r\nIn this specification, \"must\" is to be interpreted as a requirement on\r\nan implementation or on a program; conversely, \"must not\" is to be\r\ninterpreted as a prohibition.\r\n\r\nIf a \"must\" or \"must not\" requirement that appears outside of a\r\nconstraint is violated, the behavior is undeﬁned. Undeﬁned behavior is\r\notherwise indicated in this specification by the words \"undeﬁned\r\nbehavior\" or by the omission of any explicit deﬁnition of behavior.\r\nThere is no difference in emphasis among these three; they all describe\r\n\"behavior that is undeﬁned\".\r\n\r\nThe word \"may\" indicates \"permission\", and is never used to mean\r\n\"might\".\r\n\r\nA *strictly conforming program* must use only those features of the\r\nlanguage described in this specification. In particular, it must not\r\nproduce output dependent on any unspeciﬁed, undeﬁned, or\r\nimplementation-deﬁned behavior.\r\n\r\nA *conforming implementation* must accept any strictly conforming\r\nprogram. A conforming implementation may have extensions, provided they\r\ndo not alter the behavior of any strictly conforming program.\r\n\r\nA *conforming program* is one that is acceptable to a conforming\r\nimplementation.\r\n\r\nA conforming implementation must be accompanied by a document that\r\ndeﬁnes all implementation-deﬁned characteristics and all extensions.\r\n\r\nSome Syntax sections are followed by a Constraints section, which\r\nfurther restricts the grammar. After issuing a diagnostic for a\r\nconstraint violation, a conforming implementation may continue program\r\nexecution. In some cases, such continuation behavior is documented (for\r\nexample, what happens when passing too few arguments to a function).\r\nMaking such things constraint violations simply forces the issuance of a\r\ndiagnostic; it does not require that program execution terminate.\r\n\r\nThis specification contains explanatory material—called *informative* or\r\n*non-normative* text—that, strictly speaking, is not necessary in a\r\nformal language specification. Examples are provided to illustrate\r\npossible forms of the constructions described. References are used to\r\nrefer to related clauses. Notes and Implementer Notes are provided to\r\ngive advice or guidance to implementers or programmers. Informative\r\nannexes provide additional information and summarize the information\r\ncontained in this specification. All text not marked as informative is\r\n*normative*.\r\n\r\nCertain features are marked as *deprecated*. While these are normative\r\nfor the current edition of this specification, they are not guaranteed\r\nto exist in future revisions. Usually, they are old approaches that have\r\nbeen superseded by new ones, and use of the old approach is discouraged.\r\n(Examples of this include the use of braces ({ }) for subscripting, and\r\nthe use of old-style constructor names.)\r\n\r\n#Terms and Definitions\r\nFor the purposes of this document, the following terms and definitions\r\napply:\r\n\r\n**argument** – an expression passed to a function, that is intended to\r\nmap to a corresponding parameter.\r\n\r\n**behavior** – external appearance or action.\r\n\r\n**behavior, implementation-defined** – behavior specific to an\r\nimplementation, where that implementation must document that behavior.\r\n\r\n**behavior, undefined** – behavior on handling an erroneous program\r\nconstruct or data.\r\n\r\n**behavior, unspecified** – behavior for which this specification\r\nprovides no requirements.\r\n\r\n**constraint** – restriction, either syntactic or semantic, on how\r\nlanguage elements can be used.\r\n\r\n**error, fatal** – a translation or runtime condition from which the\r\ntranslator or engine cannot recover.\r\n\r\n**error, fatal, catchable** – a fatal error that can be caught by a\r\nuser-defined handler.\r\n\r\n**error, non-fatal** – an error that is not fatal.\r\n\r\n**lvalue** – an expression that designates a memory location having a\r\ntype.\r\n\r\n**lvalue, modifiable** – an lvalue whose value can be changed.\r\n\r\n**lvalue, non-modifiable** – an lvalue whose value cannot be changed.\r\n\r\n**parameter** – a variable declared in the parameter list of a function\r\nthat is intended to map to a corresponding argument in a call to that\r\nfunction.\r\n\r\n**PHP Run-Time Engine** – the machinery that executes a PHP program.\r\nReferred to as *the Engine* throughout this specification.\r\n\r\n**value** – precise meaning of the contents of a memory location when\r\ninterpreted as having a speciﬁc type.\r\n\r\nOther terms are defined throughout this specification, as needed, with\r\nthe first usage being typeset *like this*.\r\n\r\n\r\n#Basic Concepts\r\n##Program Structure\r\nA PHP *program* consists of one or more source files, known formally as\r\n*scripts*.\r\n\r\n<pre>\r\n<i>script:</i>\r\n<i> script-section</i>\r\n<i> script   script-section</i>\r\n\r\n<i>script-section:</i>\r\n  <i> text<sub>opt</sub></i> &lt;?php <i>statement-list<sub>opt</sub></i> ?&gt;<sub>opt</sub> <i>text<sub>opt</sub></i>\r\n\r\n<i>text:</i>\r\n  arbitrary text not containing the sequence &lt;?php\r\n</pre>\r\n\r\nAll of the sections in a script are treated as though they belonged to\r\none continuous section, except that any intervening text is treated as\r\nthough it were a string literal given to the intrinsic `echo` ([§§](#echo)). \r\n\r\nA script can import another script via a script inclusion operator ([§§](#script-inclusion-operators)).\r\n\r\n*statement-list* is defined in [§§](#compound-statements).\r\n\r\nThe top level of a script is simply referred to as the *top level*.\r\n\r\n##Program Start-Up\r\nA program begins execution at the start of a script ([§§](#program-structure)) designated in\r\nsome unspecified manner. This script is called the *start-up script*.\r\n\r\nOnce a program is executing, it has access to certain environmental\r\ninformation ([§§](#predefined-variables)), as follows:\r\n\r\n-   The number of *command-line arguments*, via the predefined variable\r\n    `$argc`.\r\n-   A series of one or more command-line arguments as strings, via the\r\n    predefined variable `$argv`.\r\n-   A series of *environment variable* names and their definitions.\r\n\r\nWhen a top level ([§§](#program-structure)) is the main entry point for a script, it gets\r\nthe global variable environment. When a top level is invoked via\r\n`include/require` ([§§](#general-16)), it inherits the variable environment of its caller. Thus,\r\nwhen looking at one top level in isolation, it's not\r\npossible to tell statically whether it will have the global\r\nvariable environment or some local variable environment. It depends on how the\r\npseudo-main is invoked and it depends on the runtime state of the program\r\nwhen it's invoked.\r\n\r\n##Program Termination\r\nA program may terminate normally in the following ways:\r\n\r\n-   Execution reaches the end of the start-up script ([§§](#program-start-up)).\r\n-   A `return` statement ([§§](#the-return-statement)) in the start-up script is executed.\r\n-   The intrinsic `exit` ([§§](#exitdie)) is called explicitly.\r\n\r\nThe behavior of the first two cases is equivalent to corresponding calls\r\nto exit.\r\n\r\nA program may terminate abnormally under various circumstances, such as\r\nthe detection of an uncaught exception, or the lack of memory or other\r\ncritical resource. If execution reaches the end of the start-up script\r\nvia a fatal error, or via an uncaught exception and there is no uncaught\r\nexception handler registered by `set_exception_handler`, that is\r\nequivalent to `exit(255)`. If execution reaches the end of the start-up\r\nscript via an uncaught exception and an uncaught exception handler was\r\nregistered by `set_exception_handler`, that is equivalent to exit(0). It\r\nis unspecified whether object destructors ([§§](#destructors)) are run. In all other cases, the\r\nbehavior is unspecified.\r\n\r\n##The Memory Model\r\n###General\r\nThis subclause and those immediately following it describe the abstract\r\nmemory model used by PHP for storing variables. A conforming\r\nimplementation may use whatever approach is desired as long as from any\r\ntestable viewpoint it appears to behave as if it follows the abstract\r\nmodel. The abstract model makes no explicit or implied restrictions or\r\nclaims about performance, memory consumption, and machine resource\r\nusage.\r\n\r\nThe abstract model presented here defines three kinds of abstract memory\r\nlocations:\r\n\r\n-   A *value storage location* (VStore) is used to represent a program\r\n    value, and is created by the Engine as needed. A VStore can contain\r\n    a scalar value such as an integer or a Boolean, or it can contain a\r\n    handle pointing to an HStore (see below).\r\n-   A *variable slot* (VSlot) is used to represent a variable named by\r\n    the programmer in the source code, such as a local variable, an\r\n    array element, an instance property of an object, or a static\r\n    property of a class. A VSlot comes into being based on explicit\r\n    usage of a variable in the source code. A VSlot contains a pointer\r\n    to a VStore.\r\n-   A *heap storage location* (HStore) is used to represent the contents\r\n    of any non-scalar value, and is created by the Engine as needed.\r\n\r\nEach existing variable has its own VSlot, which at any time contains a\r\npointer to a VStore. A VSlot cannot contain a null pointer. A VSlot can\r\nbe changed to point to different VStores over time. Multiple VSlots may\r\nsimultaneously point to the same VStore. When a new VSlot is created, a\r\nnew VStore is also created and the VSlot is initially set to point to\r\nthe new VStore.\r\n\r\nA VStore can be changed to contain different scalar values and handles\r\nover time. Multiple VStores may simultaneously contain handles that\r\npoint to the same HStore. When a VStore is created it initially contains\r\nthe scalar value NULL unless specified otherwise. In addition to\r\ncontaining a value, VStores also carry a *type tag* that indicates the\r\ntype ([§§](#types)) of the VStore’s value. A VStore’s type tag can be changed over\r\ntime. At any given time a VStore’s type tag may be one of the following:\r\n`Null`, `Bool`, `Int`, `Float`, `Str`, `Arr`, `Arr-D` (see [§§](#deferred-array-copying)), `Obj`, or `Res`.\r\n\r\nAn HStore represents the contents of a non-scalar value, and it may\r\ncontain zero or more VSlots. At run time, the Engine may add new VSlots\r\nand it may remove and destroy existing VSlots as needed to support\r\nadding/removing array elements (for arrays) and to support\r\nadding/removing instance properties (for objects). HStores that\r\nrepresent the contents of arrays and objects have some unspecified way\r\nto identify and retrieve a contained VSlot using a dictionary scheme\r\n(such as having values with integer keys or case-sensitive string keys).\r\nWhether an HStore is a fixed-size during its whole lifetime or whether\r\nit can change size, is unspecified. Whether it allocates auxiliary\r\nchunks of memory or not, is unspecified. Whether it organizes it's\r\ncontained VSlots in a linked list or some other manner is unspecified.\r\n\r\nAn HStore’s VSlots (i.e., the VSlots contained within the HStore) point\r\nto VStores, and each VStore contains a scalar value or a handle to an\r\nHStore, and so on through arbitrary levels, allowing arbitrarily complex\r\ndata structures to be represented. For example, a singly linked list\r\nmight consist of a variable called `$root`, which is represented by a\r\nVSlot pointing to a VStore containing a handle to the first node. Each\r\nnode is represented by an HStore that contains the data for that node in\r\none or more VSlots, as well as a VSlot pointing to VStore containing a\r\nhandle to the next node. Similarly, a binary tree might consist of a\r\nvariable called `$root`, which is represented by a VSlot pointing to a\r\nVStore containing a handle to the root node. Each node is represented by\r\nan HStore that contains the data for that node in one or more VSlots, as\r\nwell as a pair of VSlots pointing to VStores containing the handles to\r\nthe left and right branch nodes. The leaves of the tree would be VStores\r\nor HStores, as needed.\r\n\r\nVSlots cannot contain pointers to VSlots or handles to HStores. VStores\r\ncannot contain pointers to VSlots or VStores. HStores cannot directly\r\ncontain any pointers or handles to any abstract memory location; HStores\r\ncan only directly contain VSlots.\r\n\r\nHere is an example demonstrating one possible arrangement of VSlots,\r\nVStores, and HStores:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                                        |            |\r\n                                                        V            V\r\n                                                [VStore Int 1]  [VStore Int 3]\r\n</pre>\r\n\r\nIn this picture the VSlot in the upper left corner represents the\r\nvariable `$a`, and it points to a VStore that represents `$a`’s current\r\nvalue. This VStore contains a handle to an HStore which represents the\r\ncontents of an object of type Point with two instance properties `$x`\r\nand `$y`. This HStore contains two VSlots representing instance\r\nproperties `$x` and `$y`, and each of these VSlots points to a distinct\r\nVStore which contains an integer value. \r\n\r\n***Implementation Notes:*** php.net’s implementation can be mapped roughly\r\nonto the abstract memory model as follows: `zval pointer => VSlot, zval\r\n=> VStore, HashTable => HStore`, and\r\n`zend_object/zend_object_handlers => HStore`. Note, however, that the\r\nabstract memory model is not intended to exactly match the php.net\r\nimplementation’s model, and for generality and simplicity there are some\r\nsuperficial differences between the two models.\r\n\r\nFor most operations, the mapping between VSlots and VStores remains the\r\nsame. Only the following program constructs can change a VSlot to point\r\nto different VStore, all of which are *byRef-aware* operations and all\r\nof which (except unset) use the & punctuator:\r\n\r\n-   byRef assignment ([§§](#byref-assignment))\r\n-   byRef parameter declaration ([§§](#function-definitions))\r\n-   byRef function return ([§§](#the-return-statement), [§§](#function-definitions))\r\n-   byRef value in a foreach statement ([§§](#the-foreach-statement))\r\n-   byRef initializer for an array element ([§§](#array-creation-operator))\r\n-   byRef variable-use list in an anonymous function ([§§](#anonymous-function-creation))\r\n-   unset ([§§](#unset))\r\n\r\n###Reclamation and Automatic Memory Management\r\nThe Engine is required to manage the lifetimes of VStores and HStores\r\nusing some form of automatic memory management.\r\n\r\nWhen dealing with VStores and HStores, the Engine is required to implement\r\nsome form of automatic memory management. When a VStore or HStore\r\nis created, memory is allocated for it, and for an HStore that represents\r\nan object ([§§](#object-types)), its constructor ([§§](#constructors)) is invoked.\r\n\r\nLater, if a VStore or HStore becomes unreachable through any existing\r\nvariable, they become eligible for reclamation to release the memory\r\nthey occupy. The engine may reclaim a VStore or HStore at any time\r\nbetween when it becomes eligible for reclamation and when the script\r\nexits. Before reclaiming an HStore that represents an object ([§§](#object-types)),\r\nthe Engine will invoke the object’s destructor ([§§](#constructors)) if one is defined.\r\n\r\nThe Engine must reclaim each VSlot when the storage duration ([§§](#storage-duration)) of its\r\ncorresponding variable ends, when the variable is explicitly unset by the\r\nprogrammer, or when the script exits, whichever comes first. In the case where\r\na VSlot is contained within an HStore (i.e. an array element or an object\r\ninstance property), the engine must immediate reclaim the VSlot when it is\r\nexplicitly unset by the programmer, when the containing HStore is reclaimed,\r\nor when the script exits, whichever comes first.\r\n\r\nThe precise form of automatic memory management used by the Engine is\r\nunspecified, which means that the time and order of the reclamation of\r\nVStores and HStores is unspecified.\r\n\r\nA VStore’s refcount is defined as the number of unreclaimed VSlots that point\r\nto the VStore. Because the precise form of automatic memory management is not\r\nspecified, a VStore’s refcount at a given time may differ between\r\nconforming implementations due to VSlots, VStores, and HStores being\r\nreclaimed at different times. Despite the use of the term refcount,\r\nconforming implementations are not required to use a reference\r\ncounting-based implementation for automatic memory management.\r\n\r\n**(dead)**: In some pictures, storage-location boxes are shown as (dead).\r\nFor a VStore or an HStore this indicates that the VStore or HStore is no\r\nlonger reachable through any variable and is eligible for reclamation. For\r\na VSlot, this indicates that the VSlot has been reclaimed or, in the case\r\nof a VSlot contained with an HStore, that the containing HStore has been\r\nreclaimed or is eligible for reclamation.\r\n\r\n###Assignment\r\n####General\r\nThis subclause and those immediately following it describe the abstract\r\nmodel’s implementation of *value assignment* and *byRef assignment*.\r\nValue assignment of non-array types to local variables is described\r\nfirst, followed by byRef assignment with local variables, followed by\r\nvalue assignment of array types to local variables, and ending with\r\nvalue assignment with complex left-hand side expressions, and byRef\r\nassignment with complex expressions on the left- or right-hand side.\r\n\r\nValue assignment and byRef assignment are core to the PHP language, and\r\nmany other operations in this specification are described in terms of\r\nvalue assignment and byRef assignment.\r\n\r\n####Value Assignment of Scalar Types to a Local Variable\r\nValue assignment is the primary means by which the programmer can create\r\nlocal variables. If a local variable appears on the left-hand side of\r\nvalue assignment does not exist, the engine will bring a new local\r\nvariable into existence and create a VSlot and initial VStore for\r\nstoring the local variable’s value.\r\n\r\nConsider the following example of value assignment ([§§](#simple-assignment)) of scalar\r\nvalues to local variables:\r\n\r\n```\r\n$a = 123;\r\n\r\n$b = false;\r\n```\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n\r\n[VSlot $b *]-->[VStore Bool false]\r\n</pre>\r\n\r\nVariable `$a` comes into existence and is represented by a newly created\r\nVSlot pointing to a newly created VStore. Then the integer value 123 is\r\nwritten to the VStore. Next, `$b` comes into existence represented by a\r\nVSlot and corresponding VStore, and the Boolean value false is written\r\nto the VStore.\r\n\r\nNext consider the value assignment `$b = $a`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n\r\n[VSlot $b *]-->[VStore Int 123 (Bool false was overwritten)]\r\n</pre>\r\n\r\nThe integer value 123 is read from `$a`’s VStore and is written into\r\n`$b`’s VStore, overwriting its previous contents. As we can see, the two\r\nvariables are completely self-contained; each has its own VStore\r\ncontaining a separate copy of the integer value 123. Value assignment\r\nreads the contents of one VStore and overwrites the contents of the\r\nother VStore, but the relationship of VSlots to VStores remains\r\nunchanged. Changing the value of `$b` has no effect on `$a`, and vice\r\nversa.\r\n\r\nUsing literals or arbitrarily complex expressions on the right hand side\r\nof value assignment value works the same as it does for variables,\r\nexcept that the literals or expressions don’t have their own VSlots or\r\nVStores. The scalar value or handle produced by the literal or\r\nexpression is written into the VStore of the left hand side, overwriting\r\nits previous contents.\r\n\r\n***Implementation Notes:*** For simplicity, the abstract model’s\r\ndefinition of value assignment never changes the mapping from VSlots to\r\nVStores. This aspect of the abstract model is superficially different\r\nfrom the php.net implementation’s model, which in some cases will set\r\ntwo variable slots to point to the same zval when performing value\r\nassignment. Despite this superficial difference, php.net’s\r\nimplementation produces the same observable behavior as the abstract\r\nmodel presented here.\r\n\r\nTo illustrate the semantics of value assignment further, consider `++$b`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n\r\n[VSlot $b *]-->[VStore Int 124 (123 was overwritten)]\r\n</pre>\r\n\r\nNow consider `$a = 99`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 99 (123 was overwriten)]\r\n\r\n[VSlot $b *]-->[VStore Int 124]\r\n</pre>\r\n\r\nIn both of these examples, one variable’s value is changed without\r\naffecting the other variable’s value. While the above examples only\r\ndemonstrate value assignment for integer and Boolean values, the same\r\nmechanics apply for all scalar types.\r\n\r\nNote that strings are also considered scalar values for the purposes of\r\nthe abstract memory model. Unlike non-scalar types which are represented\r\nusing a VStore pointing to an HStore containing the non-scalar value’s\r\ncontents, the abstract model assumes that a string’s entire contents\r\n(i.e., the string’s characters and its length) can be stored in a VStore\r\nand that value assignment for a string eagerly copies a string’s entire\r\ncontents to the VStore being written to. Consider the following example:\r\n\r\n```\r\n$a = 'gg';\r\n\r\n$b = $a;\r\n```\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Str 'gg']\r\n\r\n[VSlot $b *]-->[VStore Str 'gg']\r\n</pre>\r\n\r\n`$a`’s string value and `$b`’s string values are distinct from each other,\r\nand mutating `$a`’s string will not affect `$b`. Consider `++$b`, for\r\nexample:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Str 'gg']\r\n\r\n[VSlot $b *]-->[VStore Str 'gh']\r\n</pre>\r\n\r\n***Implementation Notes:*** For simplicity, the abstract model represents\r\na string as a scalar value that can be entirely contained within VStore.\r\nThis aspect of the abstract model is superficially different from the\r\nphp.net implementation’s model, where a zval points to a separate buffer\r\nin memory containing a string’s characters and in the common case\r\nmultiple slots point to the same zval that holds the string. Despite\r\nthis superficial difference, php.net’s implementation produces the same\r\nobservable behavior (excluding performance and resource consumption) as\r\nthe abstract model presented here.\r\n\r\nBecause a string’s content can be arbitrarily large, copying a string’s\r\nentire contents for value assignment can be expensive. In practice an\r\napplication written in PHP may rely on value assignment of strings being\r\nrelatively inexpensive (in order to deliver acceptable performance), and\r\nas such it is common for an implementation to use a deferred copy\r\nmechanism to reduce the cost of value assignment for strings. Deferred\r\ncopy mechanisms work by not copying a string during value assignment and\r\ninstead allowing multiple variables to share the string’s contents\r\nindefinitely until a mutating operation (such as the increment operator)\r\nis about to be executed on the string, at which time some or all of the\r\nstring’s contents are copied. A conforming implementation may choose to\r\ndefer copying a string’s contents for value assignment so long as it has\r\nno observable effect on behavior from any testable viewpoint (excluding\r\nperformance and resource consumption).\r\n\r\n####Value Assignment of Object and Resource Types to a Local Variable\r\n\r\nTo demonstrate value assignment of objects to local variables, consider\r\nthe case in which we have a Point class that supports a two-dimensional\r\nCartesian system. An instance of Point contains two instance properties,\r\n`$x` and `$y`, that store the x- and y-coordinates, respectively. A\r\nconstructor call ([§§](#constructors)) of the form `Point(x, y)` used with operator `new` ([§§](#the-new-operator))\r\ncreates a new point at the given location, and a method call\r\nof the form `move(newX, newY)` moves a `Point` to the new location.\r\n\r\nWith the `Point` class, let us consider the value assignment `$a = new\r\nPoint(1, 3)`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                                        |            |\r\n                                                        V            V\r\n                                                 [VStore Int 1]  [VStore Int 3]\r\n</pre>\r\n\r\nVariable `$a` is given its own VSlot, which points to a VStore that\r\ncontains a handle pointing to an HStore allocated by `new` ([§§](#the-new-operator)) and\r\nthat is initialized by `Point`'s constructor.\r\n\r\nNow consider the value assignment `$b = $a`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                  ^                     |            |\r\n                                  |                     V            V\r\n[VSlot $b *]-->[VStore Obj *]-----+             [VStore Int 1] [VStore Int 3]\r\n</pre>\r\n\r\n`$b`‘s VStore contains a handle that points to the same object as does\r\n`$a`‘s VStore’s handle. Note that the Point object itself was not copied,\r\nand note that `$a`’s and `$b`’s VSlots point to distinct VStores.\r\n\r\nLet's modify the value of the Point whose handle is stored in `$b` using\r\n`$b->move(4, 6)`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                  ^                     |            |\r\n                                  |                     V            V\r\n[VSlot $b *]-->[VStore Obj *]-----+         [VStore Int 4] [VStore Int 6]\r\n                                       (1 was overwritten) (3 was overwritten)\r\n</pre>\r\n\r\nAs we can see, changing `$b`'s Point changes `$a`'s as well.\r\n\r\nNow, let's make `$a` point to a different object using `$a = new Point(2,\r\n1)`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                                        |            |\r\n[VSlot $b *]-->[VStore Obj *]-----+                     V            V\r\n                                  |             [VStore Int 2] [VStore Int 1]\r\n                                  V\r\n                                [HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                                        |            |\r\n                                                        V            V\r\n                                                [VStore Int 4] [VStore Int 6]\r\n</pre>\r\n\r\nBefore `$a` can take on the handle of the new `Point`, its handle to the\r\nold `Point` must be removed, which leaves the handles of `$a` and `$b`\r\npointing to different Points.\r\n\r\nWe can remove all these handles using `$a = NULL` and `$b = NULL`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Null]    [HStore Point [VSlot $x *] [VSlot $y *] (dead)]\r\n                                                        |            |\r\n[VSlot $b *]-->[VStore Null]    [VStore Int 2 (dead)]&lt;--+            V\r\n                                                          [VStore Int 1 (dead)]\r\n                                                          \r\n                                [HStore Point [VSlot $x *] [VSlot $y *] (dead)]\r\n                                                        |            |\r\n                                [VStore Int 4 (dead)]&lt;--+            V\r\n                                                        [VStore Int 6 (dead)]\r\n</pre>\r\n\r\nBy assigning null to `$a`, we remove the only handle to `Point(2,1)`, which\r\nallows that object's destructor ([§§](#destructors)) to run. A similar thing happens\r\nwith `$b`, as it too is the only handle to its Point.\r\n\r\nAlthough the examples above only show with only two instance properties,\r\nthe same mechanics apply for value assignment of all object types, even\r\nthough they can have an arbitrarily large number of instance properties\r\nof arbitrary type. Likewise, the same mechanics apply to value\r\nassignment of all resource types.\r\n\r\n####ByRef Assignment for Scalar Types with Local Variables\r\nLet's begin with the same value assignment ([§§](#simple-assignment)) as in the previous\r\nsubclause, `$a = 123` and `$b = false`:\r\n\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n\r\n[VSlot $b *]-->[VStore Bool false]\r\n</pre>\r\n\r\nNow consider the byRef assignment ([§§](#byref-assignment)) `$b =& $a`, which has byRef\r\nsemantics:\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n                 ^\r\n                 |\r\n[VSlot $b *]-----+     [VStore Bool false (dead)]\r\n</pre>\r\n\r\nIn this example, byRef assignment changes `$b`’s VSlot point to the same\r\nVStore that `$a`’s VSlot points to. The old VStore that `$b`’s VSlot used\r\nto point to is now unreachable. As stated in [§§](#general), it is not possible for a VSlot to point to another VSlot, so `$b`‘s VSlot cannot point to `$a`‘s VSlot. When multiple variables’ VSlots point to the same VStore,\r\nthe variables are said to be *aliases* of each other or they are said to\r\nhave an *alias relationship*. In the example above, after the byRef\r\nassignment executes the variables `$a` and `$b` will be aliases of each\r\nother.\r\n\r\nNow, let's observe what happens when we change the value of `$b` using\r\n`++$b`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 124 (123 was overwritten)]\r\n                 ^\r\n                 |\r\n[VSlot $b *]-----+\r\n</pre>\r\n\r\n`$b`‘s value, which is stored in the VStore that `$b`’s VSlot points, is\r\nchanged to 124. And as that VStore is also aliased by `$a`’s VSlot, the\r\nvalue of `$a` is also 124. Indeed, any variable’s VSlot that is aliased\r\nto that VStore will have the value 124.\r\n\r\nNow consider the value assignment `$a = 99`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 99 (124 was overwritten)]\r\n                 ^\r\n                 |\r\n[VSlot $b *]-----+\r\n</pre>\r\n\r\nThe alias relationship between `$a` and `$b` can be broken explicitly by\r\nusing `unset` on variable `$a` or variable `$b`. For example, consider\r\n`unset($a)`:\r\n<pre>\r\n[VSlot $a (dead)]      [VStore Int 99]\r\n                         ^\r\n                         |\r\n[VSlot $b *]-------------+\r\n</pre>\r\n\r\nUnsetting `$a` causes variable `$a` to be destroyed and its corresponding\r\nalias to the VStore to be removed, leaving `$c`’s VSlot as the only\r\npointer remaining to the VStore.\r\n\r\nOther operations can also break an alias relationship between two or\r\nmore variables. For example, `$a = 123` and `$b =& $a`, and `$c = 'hi'`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n                 ^\r\n                 |\r\n[VSlot $b *]-----+\r\n\r\n[VSlot $c *]-->[VStore Str 'hi']\r\n</pre>\r\n\r\nAfter the byRef assignment, `$a` and `$b` now have an alias relationship.\r\nNext, let's observe what happens for `$b = &$c`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n\r\n[VSlot $b *]-----+\r\n                 |\r\n                 V\r\n[VSlot $c *]-->[VStore Str 'hi']\r\n</pre>\r\n\r\nAs we can see, the byRef assignment above breaks the alias relationship\r\nbetween `$a` and `$b`, and now `$b` and `$c` are aliases of each other. When\r\nbyRef assignment changes a VSlot to point to a different VStore, it\r\nbreaks any existing alias relationship the left hand side variable had\r\nbefore the assignment operation.\r\n\r\nIt is also possible to use byRef assignment to make three or more VSlots\r\npoint to the same VStore. Consider the following example:\r\n\r\n```\r\n$b = &$a;\r\n$c = &$b;\r\n$a = 123;\r\n```\r\n<pre>\r\n[VSlot $a *]-->[VStore Int 123]\r\n                 ^   ^\r\n                 |   |\r\n[VSlot $b *]-----+   |\r\n                     |\r\n[VSlot $c *]---------+\r\n</pre>\r\n\r\nLike value assignment, byRef assignment provides a means for the\r\nprogrammer to created variables. If the local variables that appear on\r\nthe left- or right-hand side of byRef assignment do not exist, the\r\nengine will bring new local variables into existence and create a VSlot\r\nand initial VStore for storing the local variable’s value.\r\n\r\nNote that literals, constants, and other expressions that don’t\r\ndesignate a modifiable lvalue cannot be used on the left- or right-hand\r\nside of byRef assignment.\r\n\r\n####Byref Assignment of Non-Scalar Types with Local Variables\r\nbyRef assignment of non-scalar types works using the same mechanism as\r\nbyRef assignment for scalar types. Nevertheless, it is worthwhile to\r\ndescribe a few examples to clarify the semantics of byRef assignment.\r\nRecall the example from [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable)) using the `Point` class:\r\n\r\n`$a = new Point(1, 3);`\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]\r\n                                                        |            |\r\n                                                        V            V\r\n                                               [VStore Int 1]  [VStore Int 3]\r\n</pre>\r\n\r\nNow consider the byRef assignment ([§§](#byref-assignment)) `$b =& $a`, which has byRef\r\nsemantics:\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *][VSlot $y *]]\r\n                 ^                                      |           |\r\n                 |                                      V           V\r\n[VSlot $b *]-----+                               [VStore Int 1] [VStore Int 3]\r\n</pre>\r\n`$a` and `$b` now aliases of each other. Note that byRef assignment\r\nproduces a different result than `$b = `$a where `$a` and `$b` would point\r\nto distinct VStores pointing to the same HStore.\r\n\r\nLet's modify the value of the `Point` aliased by `$a` using `$a->move(4,\r\n6)`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *] VSlot $y *]]\r\n                 ^                                      |           |\r\n                 |                                      V           V\r\n[VSlot $b *]-----+                           [VStore Int 4] [VStore Int 6]\r\n                                        (1 was overwritten) (3 was overwritten)\r\n</pre>\r\n\r\nNow, let's change `$a` itself using the value assignment `$a = new\r\nPoint(2, 1)`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Point [VSlot $x *][VSlot $y *]]\r\n                 ^                                      |           |\r\n                 |                                      V           V\r\n[VSlot $b *]-----+                             [VStore Int 2] [VStore Int 1]\r\n\r\n                               [HStore Point [VSlot $x *]   [VSlot $y *] (dead)]\r\n                                                       |              |\r\n                                                       V              V\r\n                                     [VStore Int 4 (dead)] [VStore Int 6 (dead)]\r\n</pre>\r\n\r\nAs we can see, `$b` continues to have an alias relationship with `$a`.\r\nHere's what's involved in that assignment: `$a` and `$b`'s VStore’s handle\r\npointing to `Point(4,6)` is removed, `Point(2,1)` is created, and `$a` and\r\n`$b`’s VStore is overwritten to contain a handle pointing to that new\r\n`Point`. As there are now no VStores pointing to `Point(4,6)`, its\r\ndestructor ([§§](#destructors)) can run.\r\n\r\nWe can remove these aliases using `unset($a, $b)`:\r\n<pre>\r\n[VSlot $a (dead)]       [HStore Point [VSlot $x *] [VSlot $y *] (dead)]\r\n                                                |            |\r\n                                                V            V\r\n[VSlot $b (dead)]             [VStore Int 2 (dead)]  [VStore Int 1 (dead)]\r\n</pre>\r\n\r\nOnce all the aliases to the VStores are gone, the VStores can be\r\ndestroyed, in which case, there are no more pointers to the HStore, and\r\nits destructor ([§§]estructors](#Destructors)) can be run.\r\n\r\n####Value Assignment of Array Types to Local Variables\r\nThe semantics of value assignment of array types is different from value\r\nassignment of other types. Recall the `Point` class from the examples in [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable), and consider the following value assignments ([§§](#simple-assignment)) and their abstract implementation:\r\n\r\n`$a = array(10, 'B' => new Point(1, 3));`\r\n<pre>\r\n[VSlot $a *]-->[VStore Arr *]-->[HStore Array [VSlot 0 *] [VSlot 'B' *]]\r\n                                                       |             |\r\n                                                       V             V\r\n                                             [VStore Int 10]   [VStore Obj *]\r\n                                                                           |\r\n                                [HStore Point [VSlot $x *] [VSlot $y *]]&lt;--+\r\n                                                        |            |\r\n                                                        V            V\r\n                                            [VStore Int 1]  [VStore Int 3]\r\n</pre>\r\n\r\nIn the example above, `$a`‘s VStore is initialized to contain a handle to\r\nan HStore for an array containing two elements, where one element is an\r\ninteger and the other is a handle to an HStore for an object.\r\n\r\nNow consider the following value assignment `$b = $a`. A conforming\r\nimplementation must implement value assignment of arrays in one of the\r\nfollowing ways: (1) eager copying, where the implementation makes a copy\r\nof `$a`’s array during value assignment and changes `$b`’s VSlot to point\r\nto the copy; or (2) deferred copying, where the implementation uses a\r\ndeferred copy mechanism that meets certain requirements. This subclause\r\ndescribes eager copying, and the subclause that immediately follows ([§§](#deferred-array-copying))\r\ndescribes deferred copying.\r\n\r\nTo describe the semantics of eager copying, let’s begin by considering\r\nthe value assignment `$b = $a`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Arr *]-->[HStore Array [VSlot 0 *] [VSlot 'B' *]]\r\n                                                       |             |\r\n[VSlot $b *]-->[VStore Arr *]                          V             V\r\n                           |                    [VStore Int 10]  [VStore Obj *]\r\n                           V                                                 |\r\n[HStore Array [VSlot 0 *] [VSlot 'B' *]]                                     |\r\n                       |             |                                       |\r\n             +---------+   +---------+                                       |\r\n             V             V                                                 |\r\n[VStore Int 10] [VStore Obj *]-->[HStore Point [VSlot $x *] [VSlot $y *]]&lt;---+\r\n                                                         |            |\r\n                                                         V            V\r\n                                                 [VStore Int 1]  [VStore Int 3]\r\n</pre>\r\n\r\nThe value assignment `$b = $a` made a copy of `$a`’s array. Note how\r\n`$b`’s VSlot points to a different VStore than `$a`’s VSlot, and `$b`’s\r\nVStore points to a different HStore than `$b`’s VStore. Each source array\r\nelement is copied using *member-copy assignment* `=*`, which is defined\r\nas follows:\r\n\r\n```\r\n   $destination =* $source\r\n```\r\n-   If `$source`’s VStore has a refcount equal to 1, the Engine copies the\r\n    array element using  value assignment (`destination = $source`).\r\n-   If `$source`’s VStore has a refcount that is greater than 1, the Engine\r\n    uses an implementation-defined algorithm to decide whether to copy the element\r\n    using value assignment (`$destination = $source`) or byRef\r\n    assignment (`$destination = &$source`).\r\n\r\nNote the member-copy assignment `=*` is **not** an operator or language\r\nconstruct in the PHP language, but instead it is used internally to\r\ndescribe behavior for the engine for array copying and other operations\r\n\r\nFor the particular example above, member-copy assignment exhibits the\r\nsame semantics as value assignment for all conforming implementations\r\nbecause all of the array elements’ VStores have a refcount equal to 1.\r\nThe first element VSlots in `$a`’s array and `$b`’s array point\r\nto distinct VStores, each of which contain a distinct copy of the\r\ninteger value 10. The second element VSlots in `$a`’s array and `$b`’s\r\narray point to distinct VStores, each of which contain a handle to the\r\nsame object HStore.\r\n\r\nLet’s consider another example:\r\n```\r\n$x = 123;\r\n$a = array(array(&$x, 'hi'));\r\n$b = $a;\r\n```\r\n\r\nEager copying can produce two possible outcomes depending on the\r\nimplementation. Here is the first possible outcome:\r\n<pre>\r\n[VSlot $a *]---->[VStore Arr *]---->[HStore Array [VSlot 0 *]]\r\n                                                           |\r\n[VSlot $x *]-------------------------+   [VStore Arr *]&lt;---+\r\n                                     |               |\r\n[VSlot $b *]-->[VStore Arr *]        |               V\r\n                           |         |  [HStore Array [VSlot 0 *][VSlot 1 *]]\r\n                           V         |                          |          |\r\n         [HStore Array [VSlot 0 *]]  |                          V          |\r\n                                |    +---------------->[VStore Int 123]    |\r\n                                V                          ^               V\r\n                     [VStore Arr *]                        |   [VStore Str 'hi']\r\n                                 |          +--------------+\r\n                                 V          |\r\n                     [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                                                        |\r\n                                                        V\r\n                                                     [VStore Str 'hi']\r\n</pre>\r\n\r\nHere is the second possible outcome:\r\n<pre>\r\n[VSlot $a *]---->[VStore Arr *]---->[HStore Array [VSlot 0 *]]\r\n                                                           |\r\n[VSlot $x *]-------------------------+  [VStore Arr *]&lt;----+\r\n                                     |               |\r\n[VSlot $b *]-->[VStore Arr *]        |               V\r\n                           |         |  [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                           V         |                         |           |\r\n         [HStore Array [VSlot 0 *]]  |                         V           |\r\n                                |    +---------------->[VStore Int 123]    |\r\n                                V                                          V\r\n                     [VStore Arr *]                            [VStore Str 'hi']\r\n                                 |\r\n                                 V\r\n                    [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                                           |           |\r\n                                           V           V \r\n                                  [VStore Int 123]  [VStore Str 'hi']\r\n</pre>\r\n\r\nIn both possible outcomes, value assignment with eager copying makes a\r\ncopy of `$a`’s array, copying the array’s single element using\r\nmember-copy assignment (which in this case will exhibit the same\r\nsemantics of value assignment for all implementations), which in turn\r\nmakes a copy of the inner array inside `$a`’s array, copying the inner\r\narray’s elements using member-copy assignment. The inner array’s first\r\nelement VSlot points to a VStore that has a refcount that is greater than 1,\r\nso an implementation-defined algorithm is used to decide whether to use value\r\nassignment or byRef assignment. The first possible outcome shown above\r\ndemonstrates what happens if the implementation chooses to do byRef\r\nassignment, and the second possible outcome shown above demonstrates\r\nwhat happens if the implementation chooses to do value assignment. The\r\ninner array’s second element VSlot points to a VStore that has a refcount\r\nequal to 1, so value assignment is used to copy the inner array’s second\r\nelement for all conforming implementations that use eager copying.\r\n\r\nAlthough the examples in this subclause only use arrays with one\r\nelement or two elements, the model works equally well for all\r\narrays even though they can have an arbitrarily large number\r\nof elements. As to how an HStore accommodates all of them, is\r\nunspecified and unimportant to the abstract model.\r\n\r\n####Deferred Array Copying\r\nAs mentioned in the previous subclause ([§§](#value-assignment-of-array-types-to-local-variables)), an implementation may\r\nchoose to use a deferred copy mechanism instead of eagerly making a copy\r\nfor value assignment of arrays. An implementation may use any deferred\r\ncopy mechanism desired so long as it conforms to the abstract model’s\r\ndescription of deferred array copy mechanisms presented in this\r\nsubclause.\r\n\r\nBecause an array’s contents can be arbitrarily large, eagerly copying an\r\narray’s entire contents for value assignment can be expensive. In\r\npractice an application written in PHP may rely on value assignment of\r\narrays being relatively inexpensive for the common case (in order to deliver\r\nacceptable performance), and as such it is common for an implementation\r\nto use a deferred array copy mechanism in order to reduce the cost of\r\nvalue assignment for arrays.\r\n\r\nUnlike conforming deferred string copy mechanisms discussed in [§§](#value-assignment-of-scalar-types-to-a-local-variable)\r\nthat must produce the same observable behavior as eager string copying,\r\ndeferred array copy mechanisms are allowed in some cases to exhibit\r\nobservably different behavior than eager array copying. Thus, for\r\ncompleteness this subclause describes how deferred array copies can be\r\nmodeled in the abstract memory model and how conforming deferred array\r\ncopy mechanisms must behave.\r\n\r\nConforming deferred array copy mechanisms work by not making an array\r\ncopy during value assignment, by allowing the destination VStore to\r\nshare an array HStore with the source VStore, and by making a copy of\r\nthe array HStore at a later time if or when it is necessary. The\r\nabstract model represents a deferred array copy relationship by marking\r\nthe destination VStore with a special “Arr-D” type tag and by sharing\r\nthe same array HStore between the source and destination VStores. Note\r\nthat the source VStore’s type tag remains unchanged. For the purposes of\r\nthis abstract model, the “Arr-D” type tag is considered identical to the\r\n“Arr” type in all respects except when specified otherwise.\r\n\r\nTo illustrate this, let’s see how the previous example would be\r\nrepresented under the abstract model assuming the implementation defers\r\nthe copying the array:\r\n\r\n```\r\n$x = 123;\r\n$a = array(array(&$x, ‘hi’));\r\n$b = $a;\r\n```\r\n<pre>\r\n[VSlot $a *]--->[VStore Arr *]--->[HStore Array [VSlot 0 *]]\r\n                                    ^                    |\r\n                                    |   [VStore Arr *]&lt;--+\r\n[VSlot $b *]--->[VStore Arr-D *]----+               |\r\n                                                    V\r\n                                        [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                                                               |           |\r\n                                                               V           |\r\n[VSlot $x *]------------------------------------------>[VStore Int 123]    |\r\n                                                                           V\r\n                                                               [VStore Str 'hi']\r\n</pre>\r\n\r\nAs we can see, both `$a`’s VStore (the source VStore) and `$b`’s VStore\r\n(the destination VStore) point to the same array HStore. Note the\r\nasymmetric nature of how deferred array copies are represented in the\r\nabstract model. In the above example the source VStore’s type tag\r\nremains unchanged after value assignment, whereas the destination\r\nVStore’s type tag was changed to “Arr-D”.\r\n\r\nWhen the engine is about to perform an array-mutating operation on a\r\nVStore tagged “Arr” that participates in a deferred array copy\r\nrelationship or on a VStore tagged “Arr-D”, the engine must first take\r\ncertain actions that involve making a copy of the array (described in\r\nthe next paragraph) before performing the array-mutating operation. An\r\narray-mutating operation is any operation can add or remove array\r\nelements, overwrite existing array elements, change the state of the\r\narray’s internal cursor, or cause the refcount of one or more of the\r\narray’s element VStores or subelement VStores to increase from 1 to\r\na value greater than 1. This requirement to take certain actions before\r\nperforming an array-mutation operation on a VStore participating in a\r\ndeferred array copy relationship is commonly referred to as the\r\ncopy-on-write requirement.\r\n\r\nWhen an array-mutating operation is about to be performed on a given\r\nVStore X with an “Arr” type tag that participates in a deferred array\r\ncopy relationship, the engine must find all of the VStores tagged\r\n“Arr-D” that point to the same array HStore that VStore X points to,\r\nmake a copy of the array (using member-copy assignment to copy the\r\narray’s elements as described in [§§](#value-assignment-of-array-types-to-local-variables)), and update all of these\r\nVStores tagged “Arr-D” to point to the newly created copy (note that\r\nVStore X remains unchanged). When an array-mutation operation is about\r\nto be performed on a given VStore X with an “Arr-D” type tag, the engine\r\nmust make a copy of the array (as described in [§§](#value-assignment-of-array-types-to-local-variables)), update VStore\r\nX to point to the newly created copy, and change VStore X’s type tag to\r\n“Arr”. These specific actions that the engine must perform on VStore at\r\ncertain times to satisfy the copy-on-write requirement are collectively\r\nreferred to as “array-separation” or “array-separating the VStore”. An\r\narray-mutation operation is said to “trigger” an array-separation.\r\n\r\nNote that for any VStore with an “Arr” type tag that participates in a\r\ndeferred array copy relationship, or for any VStore with an “Arr-D” type\r\ntag, a conforming implementation may choose to array-separate the VStore\r\nat any time for any reason as long as the copy-on-write requirement is\r\nupheld.\r\n\r\nContinuing with the previous example, consider the array-mutating\r\noperation `$b[1]++`. Depending on the implementation, this can produce\r\none of three possible outcomes. Here is the one of the possible\r\noutcomes:\r\n<pre>\r\n[VSlot $a *]---->[VStore Arr *]---->[HStore Array [VSlot 0 *]]\r\n                                                           |\r\n[VSlot $b *]-->[VStore Arr *]            [VStore Arr *]&lt;---+\r\n                             |                       |\r\n      +----------------------+              +--------+\r\n      V                                     V\r\n  [HStore Array [VSlot 0 *] [VSlot 1 *]]  [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                         |           |       ^                  |          |\r\n                         |           V       |                  V          |\r\n                         |   [VStore Int 1]  |            [VStore Int 123] |\r\n                         V                   |             ^               V\r\n                       [VStore Arr-D *]-----+              |   [VStore Str 'hi']\r\n                                                           |\r\n [VSlot $x *]----------------------------------------------+\r\n</pre>\r\n\r\nAs we can see in the outcome shown above, `$b`’s VStore was\r\narray-separated and now `$a`’s VStore and `$b`’s VStore point to distinct\r\narray HStores. Performing array-separation on `$b`’s VStore was necessary\r\nto satisfy the copy-on-write requirement. `$a`’s array remains unchanged\r\nand that `$x` and `$a[0][0]` still have an alias relationship with each\r\nother. For this particular example, conforming implementations are\r\nrequired to preserve `$a`’s array’s contents and to preserve the alias\r\nrelationship between `$x` and `$a[0][0]`. Finally, note that `$a[0]` and\r\n`$b[0]` have a deferred copy relationship with each other in the outcome\r\nshown above. For this particular example, a conforming implementation is\r\nnot required to array-separate `$b[0]`’s VStore, and the outcome shown\r\nabove demonstrates what happens when `$b[0]`’s VStore is not\r\narray-separated. However, an implementation can choose to array-separate\r\n`$b[0]`’s VStore at any time if desired. The other two possible outcomes\r\nshown below demonstrate what can possibly happen if the implementation\r\nchoose to array-separate `$b[0]`’s VStore as well. Here is the second\r\npossible outcome:\r\n<pre>\r\n[VSlot $a *]---->[VStore Arr *]---->[HStore Array [VSlot 0 *]]\r\n                                                           |\r\n[VSlot $b *]-->[VStore Arr *]            [VStore Arr *]&lt;---+\r\n                          |                          |\r\n                          V                          V\r\n  [HStore Array [VSlot 0 *] [VSlot 1 *]]  [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                         |           |                           |           |\r\n       +-----------------+           V                           |           |\r\n       |                     [VStore Int 1]                  +---+           |\r\n       V                                                     |               V\r\n  [VStore Arr-D *]-->[HStore Array [VSlot 0 *] [VSlot 1 *]] | [VStore Str 'hi']\r\n                                            |           |   |\r\n                                    +-------+           |   |\r\n                                    |                   V   |\r\n                                    |    [VStore Str ‘hi’]  |\r\n                                    V                       |\r\n [VSlot $x *]--------------------->[VStore Int 123]&lt;--------+\r\n</pre>\r\n\r\nHere is the third possible outcome:\r\n<pre>\r\n[VSlot $a *]---->[VStore Arr *-]---->[HStore Array [VSlot 0 *]]\r\n                                                            |\r\n[VSlot $b *]-->[VStore Arr *]             [VStore Arr *]&lt;---+\r\n                            |                          |\r\n                            V                          V\r\n [HStore Array [VSlot 0 *] [VSlot 1 *]]  [HStore Array [VSlot 0 *] [VSlot 1 *]]\r\n                         |           |                           |           |\r\n       +-----------------+           V                           |           |\r\n       |                     [VStore Int 1]                  +---+           |\r\n       V                                                     |               V\r\n   [VStore Arr-D *]-->[HStore Array [VSlot 0 *] [VSlot 1 *]] | [VStore Str 'hi']\r\n                                             |           |   |\r\n                     [VStore Int 123]&lt;-------+           |   |\r\n                                                         V   |\r\n                                          [VStore Str 'hi']  |\r\n                                                             |\r\n [VSlot $x *]--------------------->[VStore Int 123]&lt;--------+\r\n</pre>\r\n\r\nThe second and third possible outcomes show what can possibly happen if\r\nthe implementation chooses to array-separate `$b[0]`’s VStore. In the\r\nsecond outcome, `$b[0][0]` has an alias relationship with `$x` and\r\n`$a[0][0]`. In the third outcome, `$b[0][0]` does not have an alias\r\nrelationship, though `$x` and `$a[0][0]` still have an alias relationship\r\nwith each other. The differences between the second and third outcome\r\nare reflect that different possibilities when the engine uses\r\nmember-copy assignment to copy `$a[0]`’s arrays’s elements into `$b[0]`’s\r\narray.\r\n\r\nFinally, let’s briefly consider one more example:\r\n```\r\n$x = 0;\r\n$a = array(&$x);\r\n$b = $a;\r\n$x = 2;\r\nunset($x);\r\n$b[1]++;\r\n$b[0]++;\r\necho $a[0], ' ', $b[0];\r\n```\r\n\r\nFor the example above, a conforming implementation could output “2 1”,\r\n“2 3”, or “3 3” depending on how it implements value assignment for\r\narrays.\r\n\r\nFor portability, it is generally recommended that programs written in\r\nPHP should avoid performing value assignment with a right-hand side that\r\nis an array with one or more elements or sub-elements that have an alias\r\nrelationship.\r\n\r\n***Implementation Notes:*** For generality and for simplicity, the\r\nabstract model represents deferred array copy mechanisms in a manner\r\nthat is more open-ended and superficially different than the php.net\r\nimplementation’s model, which uses a symmetric deferred copy mechanism\r\nwhere a single zval contains the sole pointer to a given Hashtable and\r\ndeferred array copies are represented as multiple slots pointing to the\r\nsame single zval that holds the array. Despite this superficial\r\ndifference, php.net’s implementation produces behavior that is\r\ncompatiable with the abstract model’s definition of deferred array copy\r\nmechanisms.\r\n\r\n####General Value Assignment\r\nThe subclauses above thus far have described the mechanics of value assignment\r\nto a local variable. This subclause describes how value assignment works\r\nwhen general modifiable lvalue expressions are used on the left hand side.\r\n\r\n**[TODO: Add description and examples here involving array elements and object\r\ninstance properties. Describe how new array elements and object instance\r\nproperties can be created via value assignment.]**\r\n\r\n####General ByRef Assignment\r\nThe subclauses above thus far have described the mechanics of byref assignment\r\nwith local variables. This subclause describes how byref assignment works when\r\ngeneral modifiable lvalue expressions are used on the left hand side and/or\r\nthe right hand side.\r\n\r\n**[TODO: Add description and examples here involving array elements and\r\nobject instance properties. Describe how new array elements and object\r\ninstance properties can be created via byref assignment.]**\r\n\r\n###Argument Passing\r\nArgument passing is defined in terms of simple assignment ([§§](#value-assignment-of-scalar-types-to-a-local-variable), [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable), [§§](#value-assignment-of-array-types-to-local-variables), and [§§](#simple-assignment)) or byRef assignment ([§§]), [§§](#byref-assignment-of-non-scalar-types-with-local-variables), and [§§](#byref-assignment)), depending on how the parameter is declared. \r\nThat is, passing an argument to a function having a corresponding\r\nparameter is like assigning that argument to that parameter. The\r\nfunction-call situations involving missing arguments or\r\nundefined-variable arguments are discussed in ([§§](#function-call-operator)).\r\n\r\n###Value Returning\r\nReturning a value from a function is defined in terms of simple\r\nassignment ([§§](#value-assignment-of-scalar-types-to-a-local-variable), [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable), [§§](#value-assignment-of-array-types-to-local-variables), and [§§](#simple-assignment)) or byRef assignment ([§§](#byref-assignment-for-scalar-types-with-local-variables), [§§](#byref-assignment-of-non-scalar-types-with-local-variables), and [§§](#byref-assignment)) depending on how the\r\nfunction is declared.  That is, returning a value from a function to its\r\ncaller is like assigning that value to the user of the caller's return\r\nvalue. The function-return situations involving a missing return value\r\nare discussed in ([§§](#function-call-operator)).\r\n\r\n\r\n###Cloning objects\r\nWhen an instance is allocated, operator `new` ([§§](#the-new-operator)) returns a handle\r\nthat points to that object. As described in [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable)), value assignment of a handle to an object does not copy the object HStore itself. Instead, it creates a copy of the handle. How then to make a copy of the object itself? Our only access to it is\r\nvia the handle. The PHP language allows us to do this via operator `clone` ([§§](#the-clone-operator)).\r\n\r\nTo demonstrate how the `clone` operator works, consider the case in which\r\nan instance of class `Widget` contains two instance properties: `$p1` has\r\nthe integer value 10, and `$p2` is a handle to an array of elements of\r\nsome type(s) or to an instance of some other type.\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Widget [VSlot $p1 *][VSlot $p2 *]]\r\n                                                          |          |\r\n                                                          V          V\r\n                                               [VStore Int 10] [VStore Obj *]\r\n                                                                         |\r\n                                                                         V\r\n                                                                 [HStore ...]\r\n</pre>\r\n\r\nLet us consider the result of `$b = clone $a`:\r\n<pre>\r\n[VSlot $a *]-->[VStore Obj *]-->[HStore Widget [VSlot $p1 *][VSlot $p2 *]]\r\n                                                          |            |\r\n[VSlot $b *]-->[VStore Obj *]                             V            V\r\n                             |                  [VStore Int 10] [VStore Obj *]\r\n     +-----------------------+                                              |\r\n     V                                                                      V\r\n   [HStore Widget [VSlot $p1 *] [VSlot $p2 *]]              +--->[HStore ...]\r\n                             |             |                |\r\n                             V             V                |\r\n                 [VStore Int 10] [VStore Obj *]-------------+\r\n</pre>\r\n\r\nThe clone operator will create another object HStore of the same class\r\nas the original, copy `$a`’s object’s instance properties using\r\nmember-copy assignment `=*` ([§§](#value-assignment-of-array-types-to-local-variables)). For the example shown above, the\r\nhandle to the newly created HStore stored into `$b` using value\r\nassignment. Note that the clone operator will not recursively clone\r\nobjects held in `$a`’s instance properties; hence the object copying\r\nperformed by the clone operator is often referred to as a *shallow\r\ncopy*. If a *deep copy* of an object is desired, the programmer must\r\nachieve this manually by using the method `__clone` ([§§](#method-__clone)) or by\r\nother means.\r\n\r\n##Scope\r\n\r\nThe same name can designate different things at different places in a\r\nprogram. For each different thing that a name designates, that name is\r\nvisible only within a part of the program called that name's *scope*.\r\nThe following distinct scopes exist:\r\n\r\n-   Script, which means from the point of declaration/first\r\n    initialization through to the end of that script, including any\r\n    included and required files ([§§](#general-16)).\r\n-   Function, which means from the point of declaration/first\r\n    initialization through to the end of that function ([§§](#function-definitions)).\r\n-   Class, which means the body of that class and any classes derived\r\n    from it ([§§](#class-declarations)).\r\n-   Interface, which means the body of that interface, any interfaces\r\n    derived from it, and any classes that implement it ([§§](#interface-declarations)).\r\n-   Namespace, which means from the point of declaration/first\r\n    initialization through to the end of that namespace ([§§](#general-28)).\r\n\r\nA variable declared or first initialized inside a function, has function\r\nscope; otherwise, the variable has script scope. \r\n\r\nSuperglobals ([§§](#general-5)) are always in scope; they never need explicit\r\ndeclaration.\r\n\r\nEach function has its own function scope. An anonymous function ([§§](#anonymous-functions))\r\nhas its own scope separate from that of any function inside which that\r\nanonymous function is defined.\r\n\r\nThe scope of a parameter is the body of the function in which the\r\nparameter is declared. For the purposes of scope, a catch-block ([§§](#the-try-statement))\r\nis treated like a function body, in which case, the *variable-name* in\r\n*parameter-declaration-list* is treated like a parameter.\r\n\r\nThe scope of a *named-label* ([§§](#labeled-statements)) is the body of the function in\r\nwhich the label is defined. \r\n\r\nThe scope of a class member m ([§§](#class-members)) declared in, or inherited by, a\r\nclass type C is the body of C.\r\n\r\nThe scope of an interface member m ([§§](#class-members)) declared in, or inherited by,\r\nan interface type I is the body of I.\r\n\r\nWhen a trait ([§§](#general-26)) is used by a class or an interface, the trait's\r\nmembers ([§§](#trait-members)) take on the scope of a member of that class or\r\ninterface.\r\n\r\n##Storage Duration\r\n\r\nThe lifetime of a variable is the time during program execution that\r\nstorage for that variable is guaranteed to exist. This lifetime is\r\nreferred to as the variable's *storage duration*, of which there are\r\nthree kinds: automatic, static, and allocated.\r\n\r\nA variable having *automatic storage duration* comes into being and is\r\ninitialized at its declaration or on its first use, if it has no\r\ndeclaration. Its lifetime is delimited by an enclosing scope ([§§](#scope)). The\r\nautomatic variable's lifetime ends at the end of that scope. Automatic\r\nvariables lend themselves to being stored on a stack where they can help\r\nsupport argument passing and recursion. Local variables ([§§](#local-variables)), which\r\ninclude function parameters ([§§](#function-definitions)), have automatic storage duration.\r\n\r\nA variable having *static storage duration* comes into being and is\r\ninitialized before its first use, and lives until program shutdown. The\r\nfollowing kinds of variables have static storage duration: constants\r\n([§§](#constants-1)), function statics ([§§](#function-statics)), global variables ([§§](#global-variables)), static\r\nproperties ([§§](#static-properties)), and class and interface constants ([§§](#class-and-interface-constants)).\r\n\r\nA variable having *allocated storage duration* comes into being based on\r\nprogram logic by use of the new operator ([§§](#the-new-operator)). Ordinarily, once\r\nsuch storage is no longer needed, it is reclaimed automatically by the\r\nEngine via its garbage-collection process ([§§](#)) and the use of\r\ndestructors ([§§](#destructors)). The following kinds of variables have allocated\r\nstorage duration: array elements ([§§](#array-elements)) and instance properties\r\n([§§](#instance-properties)).\r\n\r\nAlthough all three storage durations have default ends-of-life, their\r\nlives can be shortened by calling the intrinsic unset ([§§](#unset)),\r\nwhich destroys any given set of variables.\r\n\r\nThe following example demonstrates the three storage durations:\r\n\r\n```\r\nclass Point { ... }\r\n\r\n$av1 = new Point(0, 1);       // auto variable $av1 created and initialized\r\nstatic $sv1 = ...;          // static variable $sv1 created and initialized\r\n\r\nfunction doit($p1)\r\n{\r\n  $av2 = ...;           // auto variable $av2 created and initialized\r\n  static $sv2 = ...;        // static variable $sv2 created and initialized\r\n  if ($p1)\r\n  {\r\n    $av3 = ...;         // auto variable $av3 created and initialized\r\n    static $sv3 = ...;    // static variable $sv3 created and initialized\r\n    ...\r\n  }\r\n  global $av1;\r\n  $av1 = new Point(2, 3);   // Point(0,1) is eligible for destruction\r\n  ...\r\n}                   // $av2 and $av3 are eligible for destruction\r\n\r\ndoit(TRUE);\r\n\r\n// At end of script, $av1, $sv1, $sv2, and $sv3 are eligible for destruction\r\n```\r\n\r\nThe comments indicate the beginning and end of lifetimes for each\r\nvariable. In the case of the initial allocated Point variable whose\r\nhandle is stored in `$av1`, its life ends when `$av1` is made to point to\r\na different Point.\r\n\r\nIf function `doit` is called multiple times, each time it is called, its\r\nautomatic variables are created and initialized, whereas its static\r\nvariables retain their values from previous calls.\r\n\r\nConsider the following recursive function: \r\n\r\n```\r\nfunction factorial($i)\r\n{\r\n  if ($i > 1) return $i * factorial($i - 1);\r\n  else if ($i == 1) return $i;\r\n  else return 0;\r\n}\r\n```\r\n\r\nWhen `factorial` is first called, the local variable parameter `$i` is\r\ncreated and initialized with the value of the argument in the call.\r\nThen, if this function calls itself, the same process is repeated each\r\ncall. Specifically, each time `factorial` calls itself, a new local\r\nvariable parameter `$i` is created and initialized with the value of the\r\nargument in the call.\r\n\r\nThe lifetime of any VStore (§[[4.4.1](#general)](#general)) or HStore (§[[4.4.1](#general)](#general)) can be extended by\r\nthe Engine as long as needed. Conceptually, the lifetime of a VStore ends\r\nwhen it is no longer pointed to by any VSlots ([§§](#general)). Conceptually, the\r\nlifetime of an HStore ends when no VStores have a handle to it.\r\n\r\n\r\n\r\n#Types\r\n\r\n##General\r\n\r\nThe meaning of a value is determined by its *type*. PHP's types are\r\ncategorized as *scalar types* and *composite types*. The scalar types\r\nare Boolean ([§§](#the-boolean-type)), integer ([§§](#the-integer-type)), floating-point ([§§](#the-floating-point-type)), string\r\n([§§](#the-string-type)), and null ([§§](#the-null-type)). The composite types are array ([§§](#array-types)),\r\nobject ([§§](#object-types)), and resource ([§§](#resource-types)).\r\n\r\nThe scalar types are *value types*. That is, a variable of scalar type\r\nbehaves as though it contains its own value. On the\r\nother hand, the composite types are *handle types*. A variable of\r\ncomposite type contains information—in a *handle*—that leads to the\r\nvalue. The differences between value and handle types become apparent\r\nwhen it comes to understanding the semantics of assignment, and passing\r\narguments to, and returning values from, functions ([§§](#the-memory-model)). That said,\r\narray types really are a hybrid; on the one hand, an array may contain\r\nan arbitrary number of elements separate from the array variable itself,\r\nyet on the other hand, certain array operations do have value semantics.\r\n\r\nVariables are not declared to have a particular type. Instead, a\r\nvariable's type is determined at runtime by the context in which it is\r\nused.\r\n\r\nUseful library functions for interrogating and using type information\r\ninclude `gettype` (§xx), `is_type` (§xx), `settype` (§xx), and `var_dump`\r\n(§xx).\r\n\r\n##Scalar Types\r\n\r\n###General\r\n\r\nThe integer and floating-point types are collectively known as\r\n*arithmetic types*. The library function `is_numeric` (§xx) indicates if\r\na given value is a number or a numeric string ([§§](#the-string-type)).\r\n\r\nThe library function `is_scalar` (§xx) indicates if a given value has a\r\nscalar type. However, that function does not consider `NULL` to be scalar.\r\nTo test for `NULL`, use `is_null` (§xx).\r\n\r\n###The Boolean Type\r\n\r\nThe Boolean type is `bool`, for which the name boolean is a synonym. This\r\ntype is capable of storing two distinct values, which correspond to the\r\nBoolean values `TRUE` and `FALSE` ([§§](#core-predefined-constants)), respectively. The representation of\r\nthis type and its values is unspecified.\r\n\r\nThe library function `is_bool` (§xx) indicates if a given value has type\r\nbool.\r\n\r\n###The Integer Type\r\n\r\nThere is one integer type, `int`, for which the name integer is a synonym.\r\nThis type is binary, signed, and uses twos-complement representation for\r\nnegative values. The range of values that can be stored is\r\nimplementation-defined; however, the range [-2147483648, 2147483647],\r\nmust be supported.\r\n\r\nCertain operations on integer values produce a mathematical result that\r\ncannot be represented as an integer. Examples include the following:\r\n\r\n-   Incrementing the largest value or decrementing the smallest value\r\n-   Applying the unary minus to the smallest value\r\n-   Multiplying, adding, or subtracting two values\r\n\r\nIn such cases, the resulting type and value is implementation-defined,\r\nbut must be one of the following:\r\n\r\n-   The computation is done as though the types of the values were `float`\r\n    with the result having that type\r\n-   The result type is int and the value reflects wrap-around (for\r\n    example adding 1 to the largest value results in the smallest value)\r\n-   The computation is done as though the type had some unspecified,\r\n    arithmetic-like object type with the result being mathematically\r\n    correct\r\n\r\nThe constants `PHP_INT_SIZE` (§[[6.3](#core-predefined-constants)](#core-predefined-constants)) and `PHP_INT_MAX` (§[[6.3](#core-predefined-constants)](#core-predefined-constants)) define certain\r\ncharacteristics about type `int`.\r\n\r\nThe library function `is_int` (§xx) indicates if a given value has type\r\nint.\r\n\r\n###The Floating-Point Type\r\n\r\nThere is one floating-point type, `float`, for which the names `double` and\r\n`real` are synonyms. The `float` type must support at least the range and\r\nprecision of IEEE 754 64-bit double-precision representation.\r\n\r\nThe library function `is_float` (§xx) indicates if a given value has type\r\n`float`. The library function `is_finite` (§xx) indicates if a given\r\nfloating-point value is finite. The library function `is_infinite` (§xx)\r\nindicates if a given floating-point value is infinite. The library\r\nfunction `is_nan` (§xx) indicates if a given floating-point value is a\r\n`NaN`.\r\n\r\n###The String Type\r\n\r\nA string is a set of contiguous bytes that represents a sequence of zero\r\nor more characters.\r\n\r\nConceptually, a string can be considered as an array ([§§](#array-types)) of\r\nbytes—the *elements*—whose keys are the `int` values starting at zero. The\r\ntype of each element is `string`. However, a string is *not* considered a\r\ncollection, so it cannot be iterated over.\r\n\r\nA string whose length is zero is an *empty string*.\r\n\r\nAs to how the bytes in a string translate into characters is\r\nunspecified.\r\n\r\nAlthough a user of a string might choose to ascribe special semantics to\r\nbytes having the value `U+0000`, from PHP's perspective, such *null bytes*\r\nare simply just bytes! PHP does not assume strings contain any specific\r\ndata or assign special values to any bytes or sequences. However, many\r\nlibrary functions assume the strings they receive as arguments are UTF-8\r\nencoded, often without explicitly mentioning that fact.\r\n\r\nA *numeric string* is a string whose content exactly matches the pattern\r\ndefined using integer format by the production *integer-literal*\r\n([§§](#integer-literals)) or using floating-point format by the production\r\n*floating-literal* ([§§](#floating-point-literals)), where leading whitespace is permitted.\r\nA *leading-numeric string* is a string whose initial characters follow\r\nthe requirements of a numeric string, and whose trailing characters are\r\nnon-numeric. A *non-numeric string* is a string that is not a numeric\r\nstring.\r\n\r\nOnly one mutation operation may be performed on a string, offset\r\nassignment, which involves the simple assignment operator = ([§§](#simple-assignment)).\r\n\r\nThe library function `is_string` (§xx) indicates if a given value has\r\ntype string.\r\n\r\n###The Null Type\r\n\r\nThe null type has only one possible value, `NULL` ([§§](#core-predefined-constants)). The representation\r\nof this type and its value is unspecified.\r\n\r\nThe library function `is_null` (§xx) indicates if a given value is `NULL`.\r\n\r\n##Composite Types\r\n\r\n###Array Types\r\n\r\nAn array is a data structure that contains a collection of zero or more\r\nelements whose values are accessed through keys that are of type `int` or\r\n`string`. Arrays are described in [§§](#arrays).\r\n\r\nThe library function `is_array` (§xx) indicates if a given value is an\r\narray.\r\n\r\n###Object Types\r\n\r\nAn *object* is an instance of a class ([§§](#classes)). Each distinct\r\n*class-declaration* ([§§](#class-declarations)) defines a new class type, and each class\r\ntype is an object type. The representation of object types is\r\nunspecified.\r\n\r\nThe library function `is_object` (§xx) indicates if a given value is an\r\nobject, and the library function\r\n[`get_class`](http://us2.php.net/manual/en/function.get-class.php)\r\n(§xx) indicates the name of an object's class.\r\n\r\n###Resource Types\r\n\r\nA [*resource*](http://www.php.net/manual/en/language.types.resource.php)\r\nis a descriptor to some sort of external entity. (Examples include\r\nfiles, databases, and sockets.)\r\n\r\nA resource is an abstract entity whose representation is unspecified.\r\nResources are only created or consumed by the implementation; they are\r\nnever created or consumed by PHP code.\r\n\r\nEach distinct resource has a unique ID of some unspecified form.\r\n\r\nWhen scripts execute in a mode having a command-line interface, the\r\nfollowing predefined resource constants that correspond to file streams\r\nare automatically opened at program start-up:\r\n\r\n-   STDIN, which maps to standard input (php://stdin)\r\n-   STDOUT, which maps to standard output (php://stdout)\r\n-   STDERR, which maps to standard error (php://stderr)\r\n\r\nThe library function `is_resource` (§xx) indicates if a given value is a\r\nresource, and the library function\r\n[`get_resource_type`](http://us2.php.net/manual/en/function.get-resource-type.php)\r\n(§xx) indicates the type of a resource.\r\n\r\n\r\n\r\n#Constants\r\n\r\n##General\r\n\r\nA *constant* is a name ([§§](#names)) for a value that once given its\r\ninitial value, cannot be changed.\r\n\r\nA constant can be defined in one of two ways: as a *c-constant* using a\r\n*const-declaration* ([§§](#constants-2)), or as a *d-constant* by calling the library\r\nfunction `define` (§xx). However, the two approaches differ slightly.\r\nSpecifically:\r\n\r\n-   The name of a c-constant must comply with the lexical grammar for a\r\n    name while that for a d-constant can contain any source character.\r\n-   The name of a c-constant is case-insensitive while that for a\r\n    d-constant can be case-sensitive or case-insensitive based on the\r\n    value of the third argument passed to `define`.\r\n-   If `define` is able to define the given name, it returns `TRUE`;\r\n    otherwise, it returns `FALSE`.\r\n\r\nThe library function `defined` (§xx) reports if a given name (specified as\r\na string) is defined as a constant. The library function `constant` (§xx)\r\nreturns the value of a given constant whose name is specified as a\r\nstring.\r\n\r\n**Examples**\r\n\r\n```\r\nconst MAX_HEIGHT = 10.5;              // define two (case-insensitive) c-constants\r\nconst UPPER_LIMIT = MAX_HEIGHT;\r\ndefine('COEFFICIENT_1', 2.345, TRUE); // define a case-insensitive d-constant\r\ndefine('FAILURE', TRUE, FALSE);       // define a case-sensitive d-constant\r\n```\r\n\r\n##Context-Dependent Constants\r\n\r\nThe following constants—sometimes referred to as *magic constants*—are\r\nautomatically available to all scripts; their values are not fixed:\r\n\r\n Constant Name                    | Description                     \r\n -----------------                | ---------                            \r\n `__CLASS__`                        | `string`; The name of the current class. From within a trait method, the name of the class in which that trait is used. If the current namespace is other than the default, the namespace name and \"\\\\\" are prepended, in that order. If used outside all classes, the result is the empty string. \r\n`__DIR__`                            |  `string`; The directory name of the script. A directory separator is only appended for the root directory.\r\n`__FILE__`                           | `string`; The full name of the script.\r\n`__FUNCTION__`                       | `string`; Inside a function, the name of the current function exactly as it was declared, with the following prepended: If a named namespace exists, that namespace name followed by \"\\\". If used outside all functions, the result is the empty string. For a method, no parent-class prefix is present. (See `__METHOD__` and [§§](#anonymous-functions).)\r\n`__LINE__`                           | `int`; the number of the current source line\r\n`__METHOD__`                         | `string`; Inside a method, the name of the current method exactly as it was declared, with the following prepended, in order: If a named namespace exists, that namespace name followed by \"\\\"; the parent class name or trait name followed by `::`. If used outside all methods, the result is the same as for `__FUNCTION__`.\r\n`__NAMESPACE__`                      | `string`; The name of the current namespace exactly as it was declared. For the default namespace, the result is the empty string.\r\n`__TRAIT__`                          | `string`; The name of the current trait. From within a trait method, the name of the current trait. If used outside all traits, the result is the empty string.\r\n\r\nConstants beginning with __ are reserved for future use by the Engine.\r\n\r\n##Core Predefined Constants\r\n\r\nThe following constants are automatically available to all scripts:\r\n\r\nConstant Name | Description\r\n-------------   | -----------  \r\n`__COMPILER_HALT_OFFSET__` |  `int`; When the library function `__HALT_COMPILER__` (§xx) is called, this constant contains the location in the source file immediately following the `__HALT_COMPILER__()`; token.\r\n`DEFAULT_INCLUDE_PATH` |  `string`; the `fopen` library function (§xx) include path is used if it is not overridden by the `php.ini` setting `include_path`.\r\n`E_ALL` | `int`; All errors and warnings, as supported.\r\n`E_COMPILE_ERROR` | `int`; Fatal compile-time errors. This is like an `E_ERROR`, except that `E_COMPILE_ERROR` is generated by the scripting engine.\r\n`E_COMPILE_WARNING` | `int`; Compile-time warnings (non-fatal errors). This is like an `E_WARNING`, except that `E_COMPILE_WARNING` is generated by the scripting engine.\r\n`E_CORE_ERROR` |  `int`; Fatal errors that occur during PHP's initial start-up. This is like an `E_ERROR`, except that `E_CORE_ERROR` is generated by the core of PHP.\r\n`E_CORE_WARNING` |  `int`; Warnings (non-fatal errors) that occur during PHP's initial start-up. This is like an `E_WARNING`, except that `E_CORE_WARNING` is generated by the core of PHP.\r\n`E_DEPRECATED` |  `int`; Run-time notices. Enable this to receive warnings about code that will not work in future versions.\r\n`E_ERROR` | `int`; Fatal run-time errors. These indicate errors that cannot be recovered from, such as a memory allocation problem. Execution of the script is halted.\r\n`E_NOTICE` | `int`; Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.\r\n`E_PARSE` | `int`; Compile-time parse errors.\r\n`E_RECOVERABLE_ERROR` | `int`; Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handler (see the library function `set_error_handler` (§xx)), the application aborts as it was an `E_ERROR`.\r\n`E_STRICT` |  `int`; Have PHP suggest changes to the source code to ensure the best interoperability.\r\n`E_USER_DEPRECATED` | `int`; User-generated error message. This is like an `E_DEPRECATED`, except that `E_USER_DEPRECATED` is generated in PHP code by using the library function `trigger_error` (§xx).\r\n`E_USER_ERROR` |  `int`; User-generated error message. This is like an `E_ERROR`, except that `E_USER_ERROR` is generated in PHP code by using the library function `trigger_error` (§xx).\r\n`E_USER_NOTICE` | `int`; User-generated warning message. This is like an `E_NOTICE`, except that `E_USER_NOTICE` is generated in PHP code by using the library function `trigger_error` (§xx).\r\n`E_USER_WARNING` |  `int`; User-generated warning message. This is like an `E_WARNING`, except that  `E_USER_WARNING` is generated in PHP code by using the library function `trigger_error` (§xx).\r\n`E_WARNING` | `int`; Run-time warnings (non-fatal errors). Execution of the script is not halted.\r\n`E_USER_DEPRECATED` | `int`; User-generated warning message. This is like an `E_DEPRECATED`, except that  `E_USER_DEPRECATED` is generated in PHP code by using the library function `trigger_error` (§xx).\r\n`FALSE` |   `bool`; the case-insensitive Boolean value `FALSE`.\r\n`INF` | `float`; Infinity\r\n`M_1_PI` |  `float`; 1/pi\r\n`M_2_PI` |  `float`; 2/pi\r\n`M_2_SQRTPI` |  `float`; 2/sqrt(pi)\r\n`M_E` | `float`; e\r\n`M_EULER` | `float`; Euler constant\r\n`M_LN10` |  `float`; log_e 10\r\n`M_LN2` | `float`; log_e 2\r\n`M_LNPI` |  `float`; log_e(pi)\r\n`M_LOG10E` |  `float`; log_10 e\r\n`M_LOG2E` | `float`; log_2 e\r\n`M_PI` |  `float`; Pi\r\n`M_PI_2` |  `floa`t; pi/2\r\n`M_PI_4` |  `float`; pi/4\r\n`M_SQRT1_2` | `float`; 1/sqrt(2)\r\n`M_SQRT2` | `float`; sqrt(2)\r\n`M_SQRT3` | `float`; sqrt(3)\r\n`M_SQRTPI` |  `float`; sqrt(pi)\r\n`NAN` | `float`; Not-a-Number\r\n`NULL` |  `null`; the case-insensitive value `NULL`.\r\n`PHP_BINARY` |  `string`; the PHP binary path during script execution.\r\n`PHP_BINDIR` |  `string`; the installation location of the binaries.\r\n`PHP_CONFIG_FILE_PATH` |  `string`; location from which php.ini values were parsed\r\n`PHP_CONFIG_FILE_SCAN_DIR` |  `string`; The directory containing multiple INI files, all of which were parsed on start-up.\r\n`PHP_DEBUG` | `int`; Indicates whether the engine was built with debugging enabled.\r\n`PHP_EOL` | `string`; the end-of-line terminator for this platform.\r\n`PHP_EXTENSION_DIR` | `string`; The directory to be searched by the library function dl (§xx) when looking for runtime extensions.\r\n`PHP_EXTRA_VERSION` | `string`; the current PHP extra version.\r\n`PHP_INT_MAX` | `int`; the largest representable value for an integer.\r\n`PHP_INT_SIZE` |  `int`; the number of bytes used to represent an integer.\r\n`PHP_MAJOR_VERSION` | `int`; the current PHP major version\r\n`PHP_MANDIR`  | `string`; the installation location of the manual pages.\r\n`PHP_MAXPATHLEN` |  `int`; the maximum length of a fully qualified filename supported by this build.\r\n`PHP_MINOR_VERSION` | `int`; the current PHP minor version\r\n`PHP_OS` | `string`; the current operating system.\r\n`PHP_PREFIX`  | `string`; the value to which \"--prefix\" was set when configured.\r\n`PHP_RELEASE_VERSION` | `int`; the current PHP release version\r\n`PHP_ROUND_HALF_DOWN` | `int`; Round halves down\r\n`PHP_ROUND_HALF_EVEN` | `int`; Round halves to even numbers\r\n`PHP_ROUND_HALF_ODD` |  `int`; Round halves to odd numbers\r\n`PHP_ROUND_HALF_UP` | `int`; Round halves up\r\n`PHP_SAPI | `string`; the Server API for this build.\r\n`PHP_SHLIB_SUFFIX` |  `string`; build-platform's shared library suffix.\r\n`PHP_SYSCONFDIR` |  `string`; the PHP system configuration directory.xx\r\n`PHP_VERSION` | `string`; the current PHP version in the form \"major.minor.release[extra]\".\r\n`PHP_VERSION_ID` |  `int`; the current PHP version\r\n`PHP_ZTS` | `int`; Indicates whether the compiler was built with thread safety enabled.\r\n`TRUE` |  `bool`; the case-insensitive Boolean value `TRUE`.\r\n\r\nThe members of the `E_\\*` family have values that are powers of 2, so\r\nthey can be combined meaningfully using bitwise operators.\r\n\r\n##User-Defined Constants\r\n\r\nA constant may be defined inside or outside of functions ([§§](#constants-2)), inside\r\na class ([§§](#constants-2)), or inside an interface ([§§](#constants-3)).\r\n\r\n\r\n\r\n#Variables\r\n\r\n##General\r\n\r\nA *variable* is a named area of data storage that has a type and a\r\nvalue, both of which can change. A variable is represented by a VSlot\r\n([§§](#general)). A variable is created by assigning a value to it ([§§](#assignment), [§§](#simple-assignment),\r\n[§§](#byref-assignment), [§§](#the-new-operator), [§§](#array-creation-operator)).  A variable is destroyed by *unsetting* it, either by an explicit call to the intrinsic unset ([§§](#unset)), or by the Engine. The intrinsic `isset` ([§§](#isset)) tests if a given variable exists and is not set to `NULL`. A variable that somehow becomes defined, but is not initialized starts out with the value `NULL`.\r\n\r\nVariables have names as defined in [§§](#names). Distinct variables may have\r\nthe same name provided they are in different scopes ([§§](#scope)).\r\n\r\nA constant ([§§](#general-4)) is a variable that, once initialized, its value cannot\r\nbe changed. \r\n\r\nBased on the context in which it is declared, a variable has a scope\r\n([§§](#scope)) and a storage duration ([§§](#storage-duration)).\r\n\r\nA *superglobal* variable is one that is accessible in all scopes without\r\nthe need for a *global-declaration* ([§§](#global-variables)).\r\n\r\nThe following kinds of variable may exist in a script:\r\n\r\n-   Constant ([§§](#constants-1))\r\n-   Local variable ([§§](#local-variables))\r\n-   Array element ([§§](#array-elements))\r\n-   Function static ([§§](#function-statics))\r\n-   Global variable ([§§](#global-variables))\r\n-   Instance property ([§§](#instance-properties))\r\n-   Static property ([§§](#static-properties))\r\n-   Class and interface constant ([§§](#class-and-interface-constants))\r\n\r\n##Kinds of Variables\r\n\r\n###Constants\r\n\r\n**Syntax:**\r\n\r\nSee [§§](#general-4).\r\n\r\n**Constraints:**\r\n\r\nOutside of a class or interface, a c-constant can be defined only at the\r\ntop level of a script. \r\n\r\n**Semantics:**\r\n\r\nSee [§§](#general-4) and [§§](#constants-2).\r\n\r\nA constant defined outside of a class or interface is a superglobal\r\n([§§](#general-5)).\r\n\r\nA constant defined inside a function has function scope ([§§](#scope)). A\r\nconstant defined at the top level has script scope. A constant has\r\nstatic storage duration ([§§](#storage-duration)) and is a non-modifiable lvalue.\r\n\r\n**Examples**\r\n\r\n```\r\nconst MAX_HEIGHT = 10.5;        // define two c-constants\r\nconst UPPER_LIMIT = MAX_HEIGHT;\r\ndefine('COEFFICIENT_1', 2.345); // define two d-constants\r\ndefine('FAILURE', TRUE);\r\n```\r\n\r\n###Local Variables\r\n\r\n**Syntax:**\r\n\r\nSee Semantics below.\r\n\r\nSemantics:\r\n\r\nExcept for a parameter, a local variable is never defined explicitly;\r\ninstead, it is created when it is first assigned a value. A local\r\nvariable can be assigned to as a parameter in the parameter list of a\r\nfunction definition ([§§](#function-definitions)) or inside any compound statement ([§§](#compound-statements)). It\r\nhas function scope ([§§](#scope)) and automatic storage duration ([§§](#storage-duration)). A local\r\nvariable is a modifiable lvalue.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction doit($p1)  // assigned the value TRUE when called\r\n{\r\n  $count = 10;\r\n    ...\r\n  if ($p1)\r\n  {\r\n    $message = \"Can't open master file.\";\r\n    ...\r\n  }\r\n  ...\r\n}\r\ndoit(TRUE);\r\n// -----------------------------------------\r\nfunction f()\r\n{\r\n  $lv = 1;\r\n  echo \"\\$lv = $lv\\n\";\r\n  ++$lv;\r\n}\r\nfor ($i = 1; $i <= 3; ++$i)\r\n  f();\r\n```\r\n\r\nUnlike the function static equivalent in [§§](#function-statics), function `f` outputs\r\n\"`$lv = 1`\" each time.\r\n\r\nSee the recursive function example in [§§](#storage-duration).\r\n\r\n###Array Elements\r\n\r\n**Syntax:**\r\n\r\nArrays ([§§](#arrays)) are created via the array-creation operator ([§§](#array-creation-operator)) or\r\nthe intrinsic `array` ([§§](#array)). At the same time, one or more elements\r\nmay be created for that array. New elements are inserted into an\r\nexisting array via the simple-assignment operator ([§§](#simple-assignment)) in\r\nconjunction with the subscript operator `[]` ([§§](#subscript-operator)). Elements can be\r\nremoved by calling the `unset` intrinsic ([§§](#unset)).\r\n\r\n**Semantics:**\r\n\r\nThe scope ([§§](#scope)) of an array element is the same as the scope of that\r\narray's name. An array element has allocated storage duration ([§§](#storage-duration)).\r\n\r\n**Examples**\r\n\r\n```\r\n$colors = [\"red\", \"white\", \"blue\"]; // create array with 3 elements\r\n$colors[] = \"green\";                // insert a new element\r\n```\r\n\r\n###Function Statics\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>function-static-declaration:</i>\r\n    static <i>name</i>   <i>function-static-initializer<sub>opt</sub></i> ;\r\n  <i>function-static-initializer:</i>\r\n    = <i>const-expression</i>\r\n</pre>\r\n\r\n*name* is defined in ([§§](#names)), and *const-expression* is defined in\r\n([§§](#constant-expressions)).\r\n\r\n**Constraints:**\r\n\r\nA function static must be defined inside a function.\r\n\r\n**Semantics:**\r\n\r\nA function static may be defined inside any compound statement ([§§](#compound-statements)).\r\nIt is a modifiable lvalue.\r\n\r\nA function static has function scope ([§§](#scope)) and static storage duration\r\n([§§](#storage-duration)).\r\n\r\nThe value of a function static is retained across calls to its parent\r\nfunction. Each time the function containing a function static\r\ndeclaration is called, that execution is dealing with an alias ([§§](#general))\r\nto that static variable. If that alias is passed to the `unset` intrinsic\r\n([§§](#unset)), only that alias is destroyed. The next time that function\r\nis called, a new alias is created.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction f()\r\n{\r\n  static $fs = 1;\r\n  echo \"\\$fs = $fs\\n\";\r\n  ++$fs;\r\n}\r\nfor ($i = 1; $i <= 3; ++$i)\r\n  f();\r\n```\r\n\r\nUnlike the local variable equivalent in [§§](#local-variables), function `f` outputs \"`$fs\r\n= 1`\", \"`$fs = 2`\", and \"`$fs = 3`\", as `$fs` retains its value across\r\ncalls.\r\n\r\n###Global Variables\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>global-declaration:</i>\r\n    global <i>variable-name-list</i> ;\r\n\r\n  <i>variable-name-list:</i>\r\n    <i>expression</i>\r\n    <i>variable-name-list  , expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints:**\r\n\r\nEach *expression* must designate a variable name.\r\n\r\n**Semantics:**\r\n\r\nA global variable is never defined explicitly; instead, it is created\r\nwhen it is first assigned a value. That may be done at the top level of\r\na script, or from within a block in which that variable has been\r\ndeclared (*imported*, that is) using the `global` keyword.\r\n\r\nAs described in [§§](#predefined-variables),\r\n[`$GLOBALS`](http://www.php.net/manual/en/reserved.variables.globals.php) is\r\na superglobal ([§§](#general-5)) array whose elements' key/value pairs contain the\r\nname and value, respectively, of each global variable currently defined.\r\nAs such, a global variable `gv` can be initialized with the value `v`,\r\nand possibly be created, using the following form of assignment:\r\n\r\n`$GLOBALS['gv'] = v`\r\n\r\nAs `$GLOBALS` is a superglobal, `gv` need not first be the subject of a\r\n*global-declaration*.\r\n\r\nA global variable has script scope ([§§](#scope)) and static storage duration\r\n([§§](#storage-duration)). A global variable is a modifiable lvalue.\r\n\r\nWhen a global value is imported into a function, each time the function\r\nis called, that execution is dealing with an alias ([§§](#general)) to that\r\nglobal variable. If that alias is passed to the `unset` intrinsic\r\n([§§](#unset)), only that alias is destroyed. The next time that function\r\nis called, a new alias is created with the current value of the global\r\nvariable.\r\n\r\n**Examples**\r\n\r\n```\r\n$colors = array(\"red\", \"white\", \"blue\");\r\n$GLOBALS['done'] = FALSE;\r\n// -----------------------------------------\r\n$min = 10; $max = 100; $average = NULL;\r\nglobal $min, $max;         // allowed, but serves no purpose\r\nfunction compute($p)\r\n{\r\n  global $min, $max;\r\n  global $average;\r\n  $average = ($max + $min)/2;\r\n\r\n  if ($p)\r\n  {\r\n    global $result;\r\n    $result = 3.456;  // initializes a global, creating it, if necessary\r\n  }\r\n}\r\ncompute(TRUE);\r\necho \"\\$average = $average\\n\";  // $average = 55\r\necho \"\\$result = $result\\n\";  // $result = 3.456\r\n// -----------------------------------------\r\n$g = 100;\r\nfunction f()\r\n{\r\n  $v = 'g';\r\n  global $$v;          // import global $g\r\n  ...\r\n}\r\n```\r\n\r\n###Instance Properties\r\n\r\nThese are described in ([§§](#properties)). They have class scope ([§§](#scope)) and\r\nallocated storage duration ([§§](#storage-duration)).\r\n\r\n###Static Properties\r\n\r\nThese are described in ([§§](#properties)). They have class scope ([§§](#scope)) and static\r\nstorage duration ([§§](#storage-duration)).\r\n\r\n###Class and Interface Constants\r\n\r\nThese are described in [§§](#constants-2) and [§§](#constants-3). They have class or interface\r\nscope ([§§](#scope)) and static storage duration ([§§](#storage-duration)).\r\n\r\n##Predefined Variables\r\n\r\nThe following variables are automatically available to all scripts:\r\n\r\nVariable Name |   Description\r\n-------------   |    -----------\r\n`$argc` | `int`; The number of command-line arguments passed to the script. This is at least 1. (See `$argv` below.)\r\n`$argv` | `array`; An array of `$argc` elements containing the command-line arguments passed to the script as strings. Each element has an `int` key with the keys being numbered sequentially starting at zero through `$argc-1`. `$argv[0]` is the name of the script. It is implementation-defined as to how white space on command lines is handled, whether letter casing is preserved, which characters constitute quotes, or how `$argv[0]`'s string is formatted. As to how command-line arguments are defined, is unspecified.\r\n`$_COOKIE` |  `array`; The variables passed to the current script via HTTP Cookies.\r\n`$_ENV` | `array`; A superglobal ([§§](#general-5)) array in which the environment variable names are element keys, and the environment variable value strings are element values. As to how an environment variable is defined, is unspecified.\r\n`$_FILES` | `array`; The items uploaded to the current script via the HTTP POST method.\r\n`$_GET` | `array`; The variables passed to the current script via the URL parameters.\r\n`$GLOBALS` |  `array`; A superglobal ([§§](#general-5)) array containing the names of all variables that are currently defined in the global scope of the script. The variable names are the element keys, and the variable values are the element values.\r\n`$_POST` |  `array`; The variables passed to the current script via the HTTP POST method.\r\n`$_REQUEST` | `array`; By default contains the contents of `$_COOKIE`, `$_GET`, and `$_POST`.\r\n`$_SERVER` |  `array`; Server and execution environment information, such as headers, paths, and script locations. The entries in this array are created by the web server.\r\n`$_SESSION` | `array`; The session variables available to the current script.\r\n\r\n\r\n#Conversions\r\n\r\n##General\r\n\r\nSome operators implicitly convert automatically the values of operands\r\nfrom one type to another. Explicit conversion is performed using the\r\ncast operator ([§§](#cast-operator)).\r\n\r\nIf an expression is converted to its own type, the type and value of the\r\nresult are the same as the type and value of the expression.\r\n\r\n##Converting to Boolean Type\r\n\r\nThe [result type] (http://www.php.net/manual/en/language.types.boolean.php#language.types.boolean.casting) is `bool`.\r\n\r\nIf the source type is `int` or `float`, then if the source value tests equal\r\nto 0, the result value is `FALSE`; otherwise, the result value is `TRUE`.\r\n\r\nIf the source value is `NULL`, the result value is `FALSE`.\r\n\r\nIf the source is an empty string or the string \"0\", the result value is\r\n`FALSE`; otherwise, the result value is `TRUE`.\r\n\r\nIf the source is an array with zero elements, the result value is `FALSE`;\r\notherwise, the result value is `TRUE`.\r\n\r\nIf the source is an object, the result value is `TRUE`.\r\n\r\nIf the source is a resource, the result value is `TRUE`.\r\n\r\nThe library function `boolval` (§xx) allows values to be converted to\r\n`bool`.\r\n\r\n##Converting to Integer Type\r\n\r\nThe [result type](http://www.php.net/manual/en/language.types.integer.php#language.types.integer.casting)  is `int`.\r\n\r\nIf the source type is `bool`, then if the source value is `FALSE`, the\r\nresult value is 0; otherwise, the result value is 1.\r\n\r\nIf the source type is `float`, for the values `INF`, `-INF`, and `NAN`, the\r\nresult value is implementation-defined. For all other values, if the\r\nprecision can be preserved, the fractional part is rounded towards zero\r\nand the result is well defined; otherwise, the result is undefined.\r\n\r\nIf the source value is `NULL`, the result value is 0.\r\n\r\nIf the source is a numeric string or leading-numeric string ([§§](#the-string-type))\r\nhaving integer format, if the precision can be preserved the result\r\nvalue is that string's integer value; otherwise, the result is\r\nundefined. If the source is a numeric string or leading-numeric string\r\nhaving floating-point format, the string's floating-point value is\r\ntreated as described above for a conversion from `float`. The trailing\r\nnon-numeric characters in leading-numeric strings are ignored.  For any\r\nother string, the result value is 0.\r\n\r\nIf the source is an array with zero elements, the result value is 0;\r\notherwise, the result value is 1.\r\n\r\nIf the source is an object, the conversion is invalid.\r\n\r\nIf the source is a resource, the result is the resource's unique ID.\r\n\r\nThe library function [`intva`l\r\n(§xx)](http://www.php.net/manual/en/function.intval.php) allows values\r\nto be converted to `int`.\r\n\r\n##Converting to Floating-Point Type\r\n\r\nThe [result type](http://www.php.net/manual/en/language.types.float.php#language.types.float.casting) is `float`.\r\n\r\nIf the source type is `int`, if the precision can be preserved the result\r\nvalue is the closest approximation to the source value; otherwise, the\r\nresult is undefined.\r\n\r\nIf the source is a numeric string or leading-numeric string ([§§](#the-string-type))\r\nhaving integer format, the string's integer value is treated as\r\ndescribed above for a conversion from `int`. If the source is a numeric\r\nstring or leading-numeric string having floating-point format, the\r\nresult value is the closest approximation to the string's floating-point\r\nvalue. The trailing non-numeric characters in leading-numeric strings\r\nare ignored. For any other string, the result value is 0.\r\n\r\nIf the source is an object, the conversion is invalid.\r\n\r\nFor sources of all other types, the conversion is performed by first\r\nconverting the source value to [`int`](http://www.php.net/manual/en/language.types.integer.php)\r\n([§§](#converting-to-integer-type)) and then to `float`.\r\n\r\nIf the source is a resource, the result is the resource's unique ID.\r\n\r\nThe library function `floatval` (§xx) allows values to be converted to\r\nfloat.\r\n\r\n##Converting to String Type\r\n\r\nThe [result type](http://www.php.net/manual/en/language.types.string.php#language.types.string.casting) is string.\r\n\r\nIf the source type is `bool`, then if the source value is `FALSE`, the\r\nresult value is the empty string; otherwise, the result value is \"1\".\r\n\r\nIf the source type is `int` or `float`, then the result value is a string\r\ncontaining the textual representation of the source value (as specified\r\nby the library function `sprintf` (§xx)).\r\n\r\nIf the source value is `NULL`, the result value is an empty string.\r\n\r\nIf the source is an array, the result value is the string \"Array\".\r\n\r\nIf the source is an object, then if that object's class has a\r\n`__toString` method ([§§](#method-__tostring)), the result value is the string returned\r\nby that method; otherwise, the conversion is invalid.\r\n\r\nIf the source is a resource, the result value is an\r\nimplementation-defined string.\r\n\r\nThe library function `strval` (§xx) allows values to be converted to\r\nstring.\r\n\r\n##Converting to Array Type\r\n\r\nThe [result type](http://www.php.net/manual/en/language.types.array.php#language.types.array.casting) is `array`.\r\n\r\nIf the source type is `bool`, `int`, `float`, or `string`, the result value is\r\nan array of one element whose type and value is that of the source.\r\n\r\nIf the source value is `NULL`, the result value is an array of zero\r\nelements.\r\n\r\nIf the source is an object, the result is\r\nan [array](http://www.php.net/manual/en/language.types.array.php) of\r\nzero or more elements, where the elements are key/value pairs\r\ncorresponding to the\r\n[object](http://www.php.net/manual/en/language.types.object.php)'s\r\ninstance properties. The order of insertion of the elements into the\r\narray is the lexical order of the instance properties in the\r\n*class-member-declarations* ([§§](#class-members)) list. The key for a private instance\r\nproperty has the form \"\\\\0*name*\\\\0*name*\", where the first *name* is\r\nthe class name, and the second name is the property name. The key for a\r\nprotected instance property has the form \"\\\\0\\*\\\\0*name*\", where *name*\r\nis that of the property. The key for a public instance property has the\r\nform \"*name*\", where *name* is that of the property. The value for each\r\nkey is that from the corresponding property's initializer, if one\r\nexists, else `NULL`.\r\n\r\nIf the source is a resource, the result is an array of one element\r\ncontaining the implementation-defined value of the resource.\r\n\r\n##Converting to Object Type\r\n\r\nThe [result type](http://www.php.net/manual/en/language.types.object.php#language.types.object.casting) is `object`.\r\n\r\nIf the source has any type other than object, the result is an instance\r\nof the predefined class `stdClass` ([§§](#class-stdclass)). If the value of the source\r\nis `NULL`, the instance is empty. If the value of the source has a scalar\r\ntype and is non-`NULL`, the instance contains a public property called\r\nscalar whose value is that of the source. If the value of the source is\r\nan array, the instance contains a set of public properties whose names\r\nand values are those of the corresponding key/value pairs in the source.\r\nThe order of the properties is the order of insertion of the source's\r\nelements.\r\n\r\n\r\n\r\n#Lexical Structure\r\n\r\n##Scripts\r\n\r\nA script ([§§](#program-structure)) is an ordered sequence of characters. Typically, a\r\nscript has a one-to-one correspondence with a file in a file system, but\r\nthis correspondence is not required.\r\n\r\nConceptually speaking, a script is translated using the following steps:\r\n\r\n1.  Transformation, which converts a script from a particular character\r\n    repertoire and encoding scheme into a sequence of 8-bit characters.\r\n\r\n2.  Lexical analysis, which translates a stream of input characters into\r\n    a stream of tokens. \r\n\r\n3.  Syntactic analysis, which translates the stream of tokens into\r\n    executable code.\r\n\r\nConforming implementations must accept scripts encoded with the UTF-8\r\nencoding form (as defined by the Unicode standard), and transform them\r\ninto a sequence of characters. Implementations can choose to accept and\r\ntransform additional character encoding schemes.\r\n\r\n##Grammars\r\n\r\nThis specification shows the syntax of the PHP programming language\r\nusing two grammars. The *lexical grammar* defines how source\r\ncharacters are combined to form white space, comments, and tokens. The\r\n*syntactic grammar* defines how the resulting tokens are combined to\r\nform PHP programs.\r\n\r\nThe grammars are presented using *grammar productions*, with each one\r\ndefining a non-terminal symbol and the possible expansions of that\r\nnon-terminal symbol into sequences of non-terminal or terminal symbols.\r\nIn productions, non-terminal symbols are shown in slanted type *like\r\nthis*, and terminal symbols are shown in a fixed-width font `like this`. \r\n\r\nThe first line of a grammar production is the name of the non-terminal\r\nsymbol being defined, followed by one colon for a syntactic grammar\r\nproduction, and two colons for a lexical grammar production. Each\r\nsuccessive indented line contains a possible expansion of the\r\nnon-terminal given as a sequence of non-terminal or terminal symbols.\r\nFor example, the production:\r\n\r\n<pre>\r\n  <i>single-line-comment::</i>\r\n    // input-characters<sub>opt</sub>\r\n    #  input-characters<sub>opt</sub>\r\n</pre>\r\n\r\ndefines the lexical grammar production *single-line-comment* as being\r\nthe terminals `//` or `#`, followed by an optional *input-characters*. Each\r\nexpansion is listed on a separate line.\r\n\r\nAlthough alternatives are usually listed on separate lines, when there\r\nis a large number, the shorthand phrase “one of” may precede a list of\r\nexpansions given on a single line. For example,\r\n\r\n<pre>\r\n  <i>hexadecimal-digit: one of</i>\r\n    0   1   2   3   4   5   6   7   8   9\r\n    a   b   c   d   e   f\r\n    A   B   C   D   E   F\r\n</pre>\r\n\r\n##Lexical analysis\r\n\r\n##General\r\n\r\nThe production *input-file* is the root of the lexical structure for a\r\nscript. Each script must conform to this production.\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>input-file::\r\n    <i>input-element\r\n    <i>input-file   input-element\r\n  <i>input-element::</i>\r\n    <i>comment</i>\r\n    <i>white-space</i>\r\n    <i>token</i>\r\n</pre>\r\n\r\n*comment* is defined in [§§](#comments); *white-space* is defined in [§§](#white-space), and\r\n*token* is defined in [§§](#tokens).\r\n\r\n**Semantics:**\r\n\r\nThe basic elements of a script are comments, white space, and tokens.\r\n\r\nThe lexical processing of a script involves the reduction of that script\r\ninto a sequence of tokens ([§§](#tokens)) that becomes the input to the\r\nsyntactic analysis. Tokens can be separated by white space ([§§](#white-space)) and\r\ndelimited comments ([§§](#comments)).\r\n\r\nLexical processing always results in the creation of the longest\r\npossible lexical element. (For example, `$a+++++$b` must be parsed as\r\n`$a++ ++ +$b`, which syntactically is invalid.)\r\n\r\n##Comments\r\n\r\nTwo forms of comments are supported: *delimited comments* and\r\n*single-line comments*. \r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>comment::</i>\r\n    <i>single-line-comment</i>\r\n    <i>delimited-comment</i>\r\n    \r\n  <i>single-line-comment::</i>\r\n    //   <i>input-characters<sub>opt</sub></i>\r\n      #    <i>input-characters<sub>opt</sub></i>\r\n\r\n  <i>input-characters::</i>\r\n    <i>input-character</i>\r\n    <i>input-characters   input-character</i>\r\n\r\n  <i>input-character::</i>\r\n    Any source character except new-line\r\n    \r\n  <i>new-line::</i>\r\n    Carriage-return character (U+000D)\r\n    Line-feed character (U+000A)\r\n    Carriage-return character (U+000D) followed by line-feed character (U+000A)\r\n\r\n  <i>delimited-comment::</i>\r\n    /*   No characters or any source character sequence except /*   */\r\n</pre>\r\n\r\n**Semantics:**\r\n\r\nExcept within a string literal or a comment, the characters /\\* start a\r\ndelimited comment, which ends with the characters \\*/. Except within a\r\nstring literal or a comment, the characters // or \\# start a single-line\r\ncomment, which ends with a new line. That new line is not part of the\r\ncomment. However, if the single-line comment is the last source element\r\nin an embedded script, the trailing new line can be omitted. (Note: this\r\nallows for uses like `<?php ... // ... ?>`.)\r\n\r\nA delimited comment can occur in any place in a script in which white\r\nspace ([§§](#white-space)) can occur. (For example;\r\n`/*...*/$c/*...*/=/*...*/567/*...*/;/*...*/` is parsed as `$c=567;`, and\r\n`$k = $i+++/*...*/++$j;` is parsed as `$k = $i+++ ++$j;`.)\r\n\r\n**Implementation Notes**\r\n\r\nDuring tokenizing, an implementation can treat a delimited comment as\r\nthough it was white space.\r\n\r\n###White Space\r\n\r\nWhite space consists of an arbitrary combination of one or more\r\nnew-line, space, horizontal tab, vertical tab, and form-feed characters.\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>white-space::</i>\r\n    <i>white-space-character</i>\r\n    <i>white-space   white-space-character</i>\r\n\r\n  <i>white-space-character::</i>\r\n    <i>new-line</i>\r\n    Space character (U+0020)\r\n    Horizontal-tab character (U+0009)\r\n</pre>\r\n\r\n*new-line* is defined in [§§](#comments).\r\n\r\n**Semantics:**\r\n\r\nThe space and horizontal tab characters are considered *horizontal\r\nwhite-space characters*.\r\n\r\n###Tokens\r\n\r\n####General\r\n\r\nThere are several kinds of source *token*s:\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>token::</i>\r\n    <i>variable-name</i>\r\n    <i>name</i>\r\n    <i>keyword</i>\r\n    <i>literal</i>\r\n    <i>operator-or-punctuator</i>\r\n</pre>\r\n\r\n*variable-name* and *name* are defined in [§§](#names); *keyword* is defined\r\nin [§§](#keywords); *literal* is defined in [§§](#general-9); and\r\n*operator-or-punctuator* is defined in [§§](#operators-and-punctuators).\r\n\r\n####Names\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>variable-name::</i>\r\n    $   <i>name</i>\r\n\r\n  <i>namespace-name::</i>\r\n    <i>name </i>\r\n    <i>namespace-name   \\   name</i>\r\n    \r\n  <i>namespace-name-as-a-prefix::</i>\r\n    \\\r\n    \\<sub>opt</sub>   <i>namespace-name</i>   \\\r\n    namespace   \\\r\n    namespace   \\   <i>namespace-name</i>   \\\r\n    \r\n  <i>qualified-name::</i>\r\n    <i>namespace-name-as-a-prefix<sub>opt</sub>   name</i>\r\n    \r\n  <i>name::</i>\r\n    <i>name-nondigit</i>\r\n    <i>name   name-nondigit</i>\r\n    <i>name   digit</i>\r\n\r\n  <i>name-nondigit::</i>\r\n    <i>nondigit</i>\r\n    one of the characters U+007f–U+00ff\r\n\r\n  <i>nondigit::</i> one of\r\n    _\r\n    a   b   c   d   e   f   g   h   i   j   k   l   m\r\n    n   o   p   q   r   s   t   u   v   w   x   y   z\r\n    A   B   C   D   E   F   G   H   I   J   K   L   M\r\n    N   O   P   Q   R   S   T   U   V   W   X   Y   Z\r\n</pre>\r\n\r\n*digit* is defined in [§§](#integer-literals)\r\n\r\n**Semantics:**\r\n\r\nNames are used to identify the following: constants ([§§](#general-4)), variables\r\n([§§](#general-5)), labels ([§§](#labeled-statements)), functions ([§§](#function-definitions)), classes ([§§](#class-declarations)), class\r\nmembers ([§§](#class-members)), interfaces ([§§](#interface-declarations)), traits ([§§](#general-26)), namespaces ([§§](#general-28)),\r\nand names in heredoc ([§§](#heredoc-string-literals)) and nowdoc comments ([§§](#nowdoc-string-literals)).\r\n\r\nA *name* begins with an underscore (_), *name-nondigit*, or extended\r\nname character in the range U+007f– ** U+00ff. Subsequent characters can\r\nalso include *digit*s. A *variable name* is a name with a leading\r\ndollar ($).\r\n\r\nUnless stated otherwise ([§§](#function-definitions), [§§](#class-declarations), [§§](#methods), [§§](#interface-declarations), [§§](#trait-declarations), [§§](#defining-namespaces)),\r\nnames are case-sensitive, and every character in a name is significant.\r\n\r\nFunction and method names beginning with two underscores (__) are\r\nreserved by the PHP language.\r\n\r\nVariable names and function names (when used in a function-call context)\r\nneed not be defined as source tokens; they can also be created at\r\nruntime using the variable name-creation operator ([§§](#variable-name-creation-operator)). (For\r\nexample, given `$a = \"Total\"; $b = 3; $c = $b + 5;, ${$a.$b.$c} =\r\nTRUE;` is equivalent to `$Total38 = TRUE;`, and `${$a.$b.$c}()` is\r\nequivalent to `Total38()`).\r\n\r\n**Examples**\r\n\r\n```\r\nconst MAX_VALUE = 100;\r\nfunction getData() { ... }\r\nclass Point { ... }\r\ninterface ICollection { ... }\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nAn implementation is discouraged from placing arbitrary restrictions on\r\nname length or length of significance.\r\n\r\n####Keywords\r\n\r\nA *keyword* is a name-like sequence of characters that is reserved, and\r\ncannot be used as a name.\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>keyword::</i> one of\r\n    abstract   and   as   break   callable   case   catch   class   clone   \r\n    const   continue   declare   default   do   echo   else   elseif   \r\n    enddeclare   endfor   endforeach   endif   endswitch   endwhile\r\n    extends   final   finally   for   foreach   function   global\r\n    goto   if   implements   include   include_once   instanceof\r\n    insteadof   interface   namespace   new or   print   private\r\n    protected   public   require   require_once   return static   switch\r\n    throw   trait   try   use   var   while   xor   yield\r\n</pre>\r\n\r\n**Semantics:**\r\n\r\nKeywords are not case-sensitive.\r\n\r\n####Literals\r\n\r\n#####General\r\n\r\nThe source code representation of a value is called a *literal*.\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>literal::\r\n    <i>boolean-literal</i>\r\n    <i>integer-literal</i>\r\n    <i>floating-literal</i>\r\n    <i>string-literal</i>\r\n    <i>null-literal</i>\r\n</pre>\r\n\r\n*boolean-literal* is defined in [§§](#boolean-literals); *integer-literal* is defined\r\nin [§§](#integer-literals); *floating-literal* is defined in [§§](#floating-point-literals);\r\n*string-literal* is defined in [§§](#string-literals); and *null-literal* is defined\r\nin [§§](#the-null-literal).\r\n\r\n#####Boolean Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>boolean-literal::</i>\r\n    TRUE (written in any case combination)\r\n    FALSE (written in any case combination)\r\n</pre>\r\n\r\n**Semantics:**\r\n\r\nThe type of a *boolean-literal* is bool. The values `TRUE` and `FALSE`\r\nrepresent the Boolean values True and False, respectively.\r\n\r\n**Examples**\r\n\r\n```\r\n$done = FALSE;\r\ncomputeValues($table, TRUE);\r\n```\r\n\r\n#####Integer Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>integer-literal::</i>\r\n    <i>decimal-literal</i>\r\n    <i>octal-literal</i>\r\n    <i>hexadecimal-literal</i>\r\n    <i>binary-literal</i>\r\n\r\n    <i>decimal-literal::</i>\r\n      <i>nonzero-digit</i>\r\n      <i>decimal-literal   digit</i>\r\n\r\n    <i>octal-literal::</i>\r\n      0\r\n      <i>octal-literal   octal-digit</i>\r\n\r\n    <i>hexadecimal-literal::</i>\r\n      <i>hexadecimal-preﬁx   hexadecimal-digit</i>\r\n      <i>hexadecimal-literal   hexadecimal-digit</i>\r\n\r\n    <i>hexadecimal-preﬁx:: one of</i>\r\n      0x  0X\r\n\r\n    <i>binary-literal::</i>\r\n      <i>binary-preﬁx   binary-digit</i>\r\n      <i>binary-literal   binary-digit</i>\r\n\r\n    <i>binary-preﬁx:: one of</i>\r\n      0b  0B\r\n\r\n    <i>digit:: one of</i>\r\n      0  1  2  3  4  5  6  7  8  9\r\n\r\n    <i>nonzero-digit:: one of</i>\r\n      1  2  3  4  5  6  7  8  9\r\n      \r\n    <i>octal-digit:: one of</i>\r\n      0  1  2  3  4  5  6  7\r\n\r\n    <i>hexadecimal-digit:: one of</i>\r\n      0  1  2  3  4  5  6  7  8  9\r\n            a  b  c  d  e  f\r\n            A  B  C  D  E  F\r\n\r\n    <i>binary-digit:: one of</i>\r\n        0  1\r\n</pre>\r\n\r\n**Semantics:**\r\n\r\nThe value of a decimal integer literal is computed using base 10; that\r\nof an octal integer literal, base 8; that of a hexadecimal integer\r\nliteral, base 16; and that of a binary integer literal, base 2.\r\n\r\nIf the value of an *integer-literal* can be represented in type int,\r\nthat is its type; otherwise, its type is float, as described below.\r\n\r\nUsing a twos-complement system, can the smallest negative value\r\n(-2147483648 for 32 bits and -9223372036854775808 for 64 bits) be\r\nrepresented as a decimal integer literal? No. Consider the\r\nexpression -5. This is made up of two tokens: a unary minus followed by\r\nthe integer literal 5. As such, **there is no such thing as a\r\nnegative-valued decimal integer literal in PHP**. Instead, there is the\r\nnon-negative value, which is then negated. However, if the non-negative\r\nvalue is too large to represent as an `int`, it becomes `float`, which is\r\nthen negated. Literals written using hexadecimal, octal, or binary\r\nnotations are considered to have non-negative values.\r\n\r\n**Examples**\r\n\r\n```\r\n$count = 10      // decimal 10\r\n\r\n0b101010 >> 4    // binary 101010 and decimal 4\r\n\r\n0XAF << 023      // hexadecimal AF and octal 23\r\n```\r\n\r\nOn an implementation using 32-bit int representation\r\n\r\n```\r\n2147483648 -> 2147483648 (too big for int, so is a float)\r\n\r\n-2147483648 -> -2147483648 (too big for int, so is a float, negated)\r\n\r\n-2147483647 - 1 -> -2147483648 fits in int\r\n\r\n0x80000000 -> 2147483648 (too big for int, so is a float)\r\n```\r\n\r\n#####Floating-Point Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>ﬂoating-literal::</i>\r\n    <i>fractional-literal   exponent-part<sub>opt</sub></i>\r\n    <i>digit-sequence   exponent-part</i>\r\n\r\n  <i>fractional-literal::</i>\r\n    <i>digit-sequence<sub>opt</sub></i> . <i>digit-sequence</i>\r\n    <i>digit-sequence</i> .\r\n\r\n  <i>exponent-part::</i>\r\n    e  <i>sign<sub>opt</sub>   digit-sequence</i>\r\n    E  <i>sign<sub>opt</sub>   digit-sequence</i>\r\n\r\n  <i>sign:: one of</i>\r\n    +  -\r\n\r\n  <i>digit-sequence::</i>\r\n    <i>digit</i>\r\n    <i>digit-sequence   digit</i>\r\n</pre>\r\n\r\n*digit* is defined in [§§](#integer-literals).\r\n\r\n**Constraints**\r\n\r\nThe value of a floating-point literal must be representable by its type.\r\n\r\n**Semantics:**\r\n\r\nThe type of a *floating-literal* is `float`.\r\n\r\nThe constants `INF` (§[[6.3](#core-predefined-constants)](#core-predefined-constants)) and `NAN` (§[[6.3](#core-predefined-constants)](#core-predefined-constants)) provide access to the floating-\r\npoint values for infinity and Not-a-Number, respectively.\r\n\r\n**Examples**\r\n\r\n```\r\n$values = array(1.23, 3e12, 543.678E-23);\r\n```\r\n\r\n#####String Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>string-literal::</i>\r\n    <i>single-quoted-string-literal</i>\r\n    <i>double-quoted-string-literal</i>\r\n    <i>heredoc-string-literal</i>\r\n    <i>nowdoc-string-literal</i>\r\n</pre>\r\n*single-quoted-string-literal* is defined in [§§](#integer-literals);\r\n*double-quoted-string-literal* is defined in [§§](#integer-literals);\r\n*heredoc-string-literal* is defined in [§§](#integer-literals); and\r\n*nowdoc-string-literal* is defined in [§§](#integer-literals).\r\n\r\nNote: By conventional standards, calling *heredoc-string-literal*s (§)\r\nand *nowdoc-string-literal*s ([§§](#nowdoc-string-literals)) literals is a stretch, as\r\neach is hardly a single token.\r\n\r\n**Semantics:**\r\n\r\nA string literal is a sequence of zero or more characters delimited in\r\nsome fashion. The delimiters are not part of the literal's content.\r\n\r\nThe type of a string literal is string.\r\n\r\n######Single-Quoted String Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>single-quoted-string-literal::</i>\r\n    b<i><sub>opt</sub></i>  ' <i>sq-char-sequence<sub>opt</sub></i>  '\r\n\r\n  <i>sq-char-sequence::</i>\r\n    <i>sq-char</i>\r\n    <i>sq-char-sequence   sq-char</i>\r\n\r\n  <i>sq-char::</i>\r\n    <i>sq-escape-sequence</i>\r\n    \\<i><sub>opt</sub></i>   any member of the source character set except single-quote (') or backslash (\\)\r\n\r\n  <i>sq-escape-sequence:: one of</i>\r\n    \\'  \\\\\r\n</pre>\r\n**Semantics:**\r\n\r\nA single-quoted string literal is a string literal delimited by\r\nsingle-quotes ('). The literal can contain any source character except\r\nsingle-quote (') and backslash (\\\\), which can only be represented by\r\ntheir corresponding escape sequence.\r\n\r\nThe optional `b` prefix is reserved for future use in dealing with\r\nso-called *binary strings*. For now, a *single-quoted-string-literal*\r\nwith a `b` prefix is equivalent to one without.\r\n\r\nA single-quoted string literal is a c-constant ([§§](#general-4)).\r\n\r\n**Examples**\r\n\r\n```\r\n'This text is taken verbatim'\r\n\r\n'Can embed a single quote (\\') and a backslash (\\\\) like this'\r\n```\r\n\r\n######Double-Quoted String Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>double-quoted-string-literal::</i>\r\n    b<i><sub>opt</sub></i>  \" <i>dq-char-sequence<sub>opt</sub></i>  \"\r\n\r\n  <i>dq-char-sequence::</i>\r\n    <i>dq-char</i>\r\n    <i>dq-char-sequence   dq-char</i>\r\n\r\n  <i>dq-char::</i>\r\n    <i>dq-escape-sequence</i>\r\n    any member of the source character set except double-quote (\") or backslash (\\)\r\n    \\  any member of the source character set except \"\\$efnrtvxX or\r\noctal-digit\r\n\r\n  <i>dq-escape-sequence::</i>\r\n    <i>dq-simple-escape-sequence</i>\r\n    <i>dq-octal-escape-sequence</i>\r\n    <i>dq-hexadecimal-escape-sequence</i>\r\n\r\n  <i>dq-simple-escape-sequence:: one of</i>\r\n    \\\"   \\\\   \\$   \\e   \\f   \\n   \\r   \\t   \\v\r\n\r\n  <i>dq-octal-escape-sequence::</i>\r\n    \\   <i>octal-digit</i>\r\n    \\   <i>octal-digit   octal-digit</i>\r\n    \\   <i>octal-digit   octal-digit   octal-digit</i>\r\n\r\n  <i>dq-hexadecimal-escape-sequence::</i>\r\n    \\x  <i>hexadecimal-digit   hexadecimal-digit<sub>opt</sub></i>\r\n    \\X  <i>hexadecimal-digit   hexadecimal-digit<sub>opt</sub></i>\r\n</pre>\r\n\r\n*octal-digit* and *hexadecimal-digit* are defined in [§§](#integer-literals).\r\n\r\n**Semantics:**\r\n\r\nA double-quoted string literal is a string literal delimited by\r\ndouble-quotes (\"). The literal can contain any source character except\r\ndouble-quote (\") and backslash (\\\\), which can only be represented by\r\ntheir corresponding escape sequence. Certain other (and sometimes\r\nnon-printable) characters can also be expressed as escape sequences.\r\n\r\nThe optional `b` prefix is reserved for future use in dealing with\r\nso-called *binary strings*. For now, a *double-quoted-string-literal*\r\nwith a `b` prefix is equivalent to one without.\r\n\r\nAn escape sequence represents a single-character encoding, as described\r\nin the table below:\r\n\r\nEscape sequence | Character name\r\n--------------- | --------------\r\n\\$  | Dollar sign\r\n\\\"  | Double quote\r\n\\\\  | Backslash\r\n\\e  | Escape\r\n\\f  | Form feed\r\n\\n  | New line\r\n\\r  | Carriage Return\r\n\\t  | Horizontal Tab\r\n\\v  | Vertical Tab\r\n\\ooo |  1–3-digit octal digit value ooo\r\n\\xhh or \\Xhh  | 1–2-digit hexadecimal digit value hh\r\n\r\nWithin a double-quoted string literal, except when recognized as the\r\nstart of an escape sequence, a backslash (\\\\) is retained verbatim.\r\n\r\nWithin a double-quoted string literal a dollar ($) character not\r\nescaped by a backslash (\\\\) is handled, as follows:\r\n\r\n-   If that dollar ($) character plus the character sequence following\r\n    spells a longest-possible variable name:\r\n-   For a scalar type, that variable name is replaced by the string\r\n    representation of that variable's value, if such a variable exists. \r\n    This is known as *variable substitution*. If no such variable is\r\n    currently defined, the value substituted is the empty string. (For\r\n    the purposes of variable substitution, the string representation is\r\n    produced as if the library function `sprintf` was used. In the case of\r\n    a floating-point value, the conversion specifier used is `%.nG`,\r\n    where the precision `n` is implementation-defined.\r\n-   For a variable that designates an array, if that variable name is\r\n    followed by characters of the form \"`[index]`\" without any\r\n    intervening white space, the variable name and these following\r\n    characters are presumed to refer to the corresponding element of\r\n    that array, in which case, the value of that element is substituted.\r\n    If `index` is itself a variable having scalar type, that variable's\r\n    value is substituted. If `index` is an integer literal, it must be a\r\n    decimal-integer literal. `index` must not be a character sequence\r\n    that itself looks like an array subscript or a class property.\r\n-   For a variable that designates an array, but no subscript-like\r\n    character sequence follows that variable name, the value substituted\r\n    is \"Array\".\r\n-   For a variable that designates an instance of a class, if that\r\n    variable name is followed by characters of the form \"`->name`\"\r\n    without any intervening white space, the variable name and these\r\n    following characters are presumed to refer to the corresponding\r\n    property of that instance, in which case, the value of that property\r\n    is substituted.\r\n-   Otherwise, the dollar ($) is retained verbatim.\r\n\r\nVariable substitution also provides limited support for the evaluation\r\nof expressions. This is done by enclosing an expression in a pair of\r\nmatching braces ({...}). The opening brace must be followed immediately by\r\na dollar ($) without any intervening white space, and that dollar must\r\nbegin a variable name. If this is not the case, braces are treated\r\nverbatim. An opening brace ({) cannot be escaped.\r\n\r\nA double-quoted string literal is a c-constant ([§§](#general-4)) if it does not\r\ncontain any variable substitution.\r\n\r\n**Examples**\r\n\r\n```\r\n$x = 123;\r\necho \">\\$x.$x\".\"<\"; // → >$x.123<\r\n// -----------------------------------------\r\n$colors = array(\"red\", \"white\", \"blue\");\r\n$index = 2;\r\necho \"\\$colors[$index] contains >$colors[$index]<\\n\";\r\n  // → $colors[2] contains >blue<\r\n// -----------------------------------------\r\nclass C {\r\n    public $p1 = 2;\r\n}\r\n$myC = new C();\r\necho \"\\$myC->p1 = >$myC->p1<\\n\";  // → $myC->p1 = >2<\r\n```\r\n\r\n######Heredoc String Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>heredoc-string-literal::</i>\r\n    <<<  <i>hd-start-identifier   new-line   hd-char-sequence<sub>opt</sub>  new-line hd-end-identifier</i>  ;<i><sub>opt</sub>   new-line</i>\r\n\r\n  <i>hd-start-identifier::</i>\r\n    <i>name</i>\r\n\r\n  <i>hd-end-identifier::</i>\r\n    <i>name</i>\r\n\r\n  <i>hd-char-sequence::</i>\r\n    <i>hd-char</i>\r\n    <i>hd-char-sequence   hd-char</i>\r\n\r\n  <i>hd-char::</i>\r\n    <i>hd-escape-sequence</i>\r\n    any member of the source character set except backslash (\\)\r\n    \\  any member of the source character set except \\$efnrtvxX or\r\noctal-digit\r\n\r\n  <i>hd-escape-sequence::</i>\r\n    <i>hd-simple-escape-sequence</i>\r\n    <i>dq-octal-escape-sequence</i>\r\n    <i>dq-hexadecimal-escape-sequence</i>\r\n\r\n  <i>hd-simple-escape-sequence:: one of</i>\r\n    \\\\   \\$   \\e   \\f   \\n   \\r   \\t   \\v\r\n</pre>\r\n\r\n*name* is defined in [§§](#names); *new-line* is defined in [§§](#comments); and\r\n*dq-octal-escape-sequence* and *dq-hexadecimal-escape-sequence* are\r\ndefined in [§§](#double-quoted-string-literals).\r\n\r\n**Constraints**\r\n\r\nThe start and end identifier must be the same. Only horizontal white\r\nspace is permitted between `<<<` and the start identifier. No white\r\nspace is permitted between the start identifier and the new-line that\r\nfollows. No white space is permitted between the new-line and the end\r\nidentifier that follows. Exception for an optional semicolon (`;`), no\r\ncharacters—not even comments or white space—are permitted between the\r\nend identifier and the new-line that terminates that source line.\r\n\r\n**Semantics:**\r\n\r\nA heredoc string literal is a string literal delimited by\r\n\"`<<< name`\" and \"`name`\". The literal can contain any source\r\ncharacter. Certain other (and sometimes non-printable) characters can\r\nalso be expressed as escape sequences.\r\n\r\nA heredoc literal supports variable substitution as defined for\r\ndouble-quoted string literals ([§§](#double-quoted-string-literals)).\r\n\r\nA heredoc string literal is a c-constant ([§§](#general-4)) if it does not contain\r\nany variable substitution.\r\n\r\n**Examples**\r\n\r\n```\r\n$v = 123;\r\n$s = <<<    ID\r\nS'o'me \"\\\"t e\\txt; \\$v = $v\"\r\nSome more text\r\nID;\r\necho \">$s<\";\r\n→ >S'o'me \"\\\"t e  xt; $v = 123\"\r\nSome more text<\r\n```\r\n\r\n######Nowdoc String Literals\r\n\r\n**Syntax:**\r\n\r\n<pre>\r\n  <i>nowdoc-string-literal::</i>\r\n    <<<  '  <i>hd-start-identifier</i>  '  <i>new-line  hd-char-sequence<sub>opt</sub>   new-line hd-end-identifier</i>  ;<i><sub>opt</sub>   new-line</i>\r\n</pre>\r\n\r\n*hd-start-identifier*, *hd-char-sequence*, and *hd-end-identifier* are\r\ndefined in [§§](#heredoc-string-literals); and *new-line* is defined in [§§](#comments).\r\n\r\n**Constraints**\r\n\r\nNo white space is permitted between the start identifier and its\r\nenclosing single quotes ('). See also [§§](#heredoc-string-literals).\r\n\r\n**Semantics:**\r\n\r\nA nowdoc string literal looks like a heredoc string literal\r\n([§§](#heredoc-string-literals)) except that in the former the start identifier name is\r\nenclosed in single quotes ('). The two forms of string literal have the\r\nsame semantics and constraints except that a nowdoc string literal is\r\nnot subject to variable substitution.\r\n\r\nA nowdoc string literal is a c-constant ([§§](#general-4)).\r\n\r\n**Examples**\r\n\r\n```\r\n$v = 123;\r\n$s = <<<    'ID'\r\nS'o'me \"\\\"t e\\txt; \\$v = $v\"\r\nSome more text\r\nID;\r\necho \">$s<\\n\\n\";\r\n→ >S'o'me \"\\\"t e\\txt; \\$v = $v\"\r\nSome more text<\r\n```\r\n\r\n#####The Null Literal\r\n\r\nThere is one null-literal value, `NULL`. Its spelling is case-insensitive.\r\n(Note: Throughout this specification, the convention is to use all\r\nuppercase.)\r\n\r\n<pre>\r\n  <i>null-literal::</i>\r\n    NULL (written in any case combination)\r\n</pre>\r\n\r\nA *null-literal* has the null type.\r\n\r\n####Operators and Punctuators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>operator-or-punctuator:: one of</i>\r\n    [   ]    (   )   {    }   .   ->   ++   --   **   *   +   -   ~   !\r\n    $   /   % <<   >>   <   >   <=   >=   ==   ===   !=   !==   ^   |\r\n    &   &&   ||   ?   :   ; =   **=   *=   /=   %=   +=   -=   .=   <<=\r\n    >>=   &=   ^=   |=   ,\r\n</pre>\r\n\r\n**Semantics:**\r\n\r\nOperators and punctuators are symbols that have independent syntactic\r\nand semantic signiﬁcance. *Operators* are used in expressions to\r\ndescribe operations involving one or more *operands*, and that yield a\r\nresulting value, produce a side effect, or some combination thereof.\r\n*Punctuators* are used for grouping and separating.\r\n\r\n\r\n#Expressions\r\n\r\n##General\r\n\r\nAn *expression* involves one or more terms and zero or more operators.\r\n\r\nA *full expression* is an expression that is not part of another\r\nexpression.\r\n\r\nA *side effect* is an action that changes the state of the execution\r\nenvironment. (Examples of such actions are modifying a variable, writing\r\nto a device or file, or calling a function that performs such\r\noperations.)\r\n\r\nWhen an expression is evaluated, it produces a result. It might also\r\nproduce a side effect. Only a few operators produce side effects. (For\r\nexample, given the expression statement ([§§](#expression-statements)) `$v = 10`; the\r\nexpression 10 is evaluated to the result 10, and there is no side\r\neffect. Then the assignment operator is executed, which results in the\r\nside effect of `$v` being modified. The result of the whole expression is\r\nthe value of `$v` after the assignment has taken place. However, that\r\nresult is never used. Similarly, given the expression statement `++$v`;\r\nthe expression is evaluated to the result incremented-value-of-`$v`, and\r\nthe side effect is that `$v` is actually incremented. Again, the result\r\nis never used.)\r\n\r\nThe occurrence of value computation and side effects is delimited by\r\n*sequence points*, places in a program's execution at which all the\r\ncomputations and side effects previously promised are complete, and no\r\ncomputations or side effects of future operations have yet begun. There\r\nis a sequence point at the end of each full expression. The logical and\r\n([§§](#logical-and-operator-form-1)), logical or (§[[10.15](#logical-inclusive-or-operator-form-1)](#logical-inclusive-or-operator-form-1)), conditional (§[[10.15](#logical-inclusive-or-operator-form-1)](#logical-inclusive-or-operator-form-1)), and function-call\r\n([§§](#function-call-operator)) operators each contain a sequence point. (For example, in the\r\nfollowing series of expression statements, `$a = 10; ++$a; $b = $a;`,\r\nthere is sequence point at the end of each full expression, so the\r\nassignment to $a is completed before `$a` is incremented, and the\r\nincrement is completed before the assignment to `$b`.)\r\n\r\nWhen an expression contains multiple operators, the *precedence* of\r\nthose operators controls the order in which those operators are applied.\r\n(For example, the expression `$a - $b / $c` is evaluated as\r\n`$a - ($b / $c)` because the / operator has higher precedence than the\r\nbinary - operator.) The precedence of an operator is determined by the\r\ndefinition of its associated grammar production.\r\n\r\nIf an operand occurs between two operators having the same precedence,\r\nthe order in which the operations are performed is determined by those\r\noperators' *associativity*. With *left-associative* operators,\r\noperations are performed left-to-right. (For example, `$a + $b - $c` is\r\nevaluated as `($a + $b) - $c.`) With *right-associative* operators,\r\noperations are performed right-to-left. (For example, `$a = $b = $c` is\r\nevaluated as `$a = ($b = $c)`.)\r\n\r\nPrecedence and associativity can be controlled using *grouping\r\nparentheses*. (For example, in the expression `($a - $b) / $c`, the\r\nsubtraction is done before the division. Without the grouping\r\nparentheses, the division would take place first.)\r\n\r\nWhile precedence, associativity, and grouping parentheses control the\r\norder in which operators are applied, they do *not* control the order of\r\nevaluation of the terms themselves. Unless stated explicitly in this\r\nspecification, the order in which the operands in an expression are\r\nevaluated relative to each other is unspecified. See the discussion\r\nabove about the operators that contain sequence points. (For example, in\r\nthe full expression `$list1[$i] = $list2[$i++]`, whether the value\r\nof `$i` on the left-hand side is the old or new `$i`, is unspecified.\r\nSimilarly, in the full expression `$j = $i + $i++`, whether the value\r\nof `$i` is the old or new `$i`, is unspecified. Finally, in the full\r\nexpression `f() + g() \\* h()`, the order in which the three functions are\r\ncalled, is unspecified.)\r\n\r\n**Implementation Notes**\r\n\r\nAn expression that contains no side effects and whose resulting value is\r\nnot used need not be evaluated. For example, the expression statements\r\n`6;, $i + 6;`, and `$i/$j`; are well formed, but they contain no side\r\neffects and their results are not used.\r\n\r\nA side effect need not be executed if it can be determined that no other\r\nprogram code relies on its having happened. (For example, in the cases\r\nof return `$a++`; and return `++$a`;, it is obvious what value must be\r\nreturned in each case, but if `$a` is a variable local to the enclosing\r\nfunction, `$a` need not actually be incremented.\r\n\r\n##Primary Expressions\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>primary-expression:</i>\r\n    <i>variable-name</i>\r\n    <i>qualified-name</i>\r\n    <i>literal</i>\r\n    <i>const-expression</i>\r\n    <i>intrinsic</i>\r\n    <i>anonymous-function-creation-expression</i>\r\n    (  <i>expression</i>  )\r\n    $this\r\n</pre>\r\n\r\n*variable-name* and *qualified-name* are defined in [§§](#names); *literal*\r\nis defined in [§§](#general-9); *const-expression* is defined in [§§](#constant-expressions);\r\n*intrinsic* is defined in [§§](#general-12);\r\n*anonymous-function-creation-expression* is defined in [§§](#anonymous-function-creation); and\r\n*expression* is defined in [§§](#script-inclusion-operators). \r\n\r\n**Semantics**\r\n\r\nWhen the name of a function is used as an expression without the\r\nfunction-call operator `()` ([§§](#function-call-operator)), that name is treated as a string\r\ncontaining that function's name.\r\n\r\nThe type and value of parenthesized expression are identical to those of\r\nthe un-parenthesized expression.\r\n\r\nThe variable `$this` is predefined inside any instance method or\r\nconstructor when that method is called from within an object\r\ncontext. `$this` is a handle ([§§](#general-2)) that points to the calling object or\r\nto the object being constructed. The type of `$this` is the type of the\r\nclass within which the usage of `$this` occurs. However, at run time, the\r\ntype of the object referred to by `$this` may be the type of the\r\nenclosing class or any type derived from that class.\r\n\r\n###Intrinsics\r\n\r\n####General\r\n\r\n**Syntax**\r\n<pre>\r\n  <i>intrinsic:</i>\r\n    <i>array-intrinsic</i>\r\n    <i>echo-intrinsic</i>\r\n    <i>empty-intrinsic</i>\r\n    <i>eval-intrinsic</i>\r\n    <i>exit-intrinsic</i>\r\n    <i>isset-intrinsic</i>\r\n    <i>list-intrinsic</i>\r\n    <i>print-intrinsic</i>\r\n    <i>unset-intrinsic</i>\r\n</pre>\r\n\r\n*array-intrinsic* is defined in [§§](#array); *echo-intrinsic* is defined\r\nin [§§](#echo); *empty-intrinsic* is defined in [§§](#empty);\r\n*eval-intrinsic* is defined in [§§](#eval); *exit-intrinsic* is defined in\r\n[§§](#exitdie); *isset-intrinsic* is defined in [§§](#isset); *list-intrinsic*\r\nis defined in [§§](#list); *print-intrinsic* is defined in [§§](#print); and\r\n*unset-intrinsic* is defined in [§§](#unset).\r\n\r\n**Semantics**\r\n\r\nThe names in this series of subclauses have special meaning and are\r\ncalled *intrinsics*, but they are not keywords; nor are they functions.\r\n\r\n####array\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>array-intrinsic:</i>\r\n    array ( <i>array-initializer<sub>opt</sub></i>  )\r\n</pre>\r\n\r\n*array-initializer* is defined in [§§](#array-creation-operator).\r\n\r\n**Semantics**\r\n\r\nThis intrinsic creates and initializes an array. It is equivalent to the\r\narray-creation operator `[]` ([§§](#array-creation-operator)).\r\n\r\n####echo\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>echo-intrinsic:</i>\r\n    echo  <i>expression</i>\r\n    echo  (  <i>expression</i>  )\r\n    echo  <i>expression-list-two-or-more</i>\r\n\r\n  <i>expression-list-two-or-more:</i>\r\n    <i>expression</i>  ,  <i>expression</i>\r\n    <i>expression-list-two-or-more</i>  ,  <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\n*expression* must not designate an array nor an instance of a type not\r\nhaving a `__toString` method ([§§](#method-__tostring)). \r\n\r\n**Semantics**\r\n\r\nAfter converting each of its *expression*s' values to strings, if\r\nnecessary, `echo` concatenates them in lexical order, and writes the\r\nresulting string to `STDOUT` ([§§](#resource-types)). Unlike `print` ([§§](#print)), it does\r\nnot produce a result.\r\n\r\nFor value substitution in string literals, see [§§](#double-quoted-string-literals) and\r\n[§§](#heredoc-string-literals). For conversion to string, see [§§](#converting-to-string-type).\r\n\r\n**Examples**\r\n\r\n```\r\n$v1 = TRUE;\r\n$v2 = 123;\r\necho  '>>' . $v1 . '|' . $v2 . \"<<\\n\";    // outputs \">>1|123<<\"\r\necho  '>>' , $v1 , '|' , $v2 , \"<<\\n\";    // outputs \">>1|123<<\"\r\necho ('>>' . $v1 . '|' . $v2 . \"<<\\n\");   // outputs \">>1|123<<\"\r\n$v3 = \"qqq{$v2}zzz\";\r\necho \"$v3\\n\"; \r\n```\r\n\r\n####empty\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>empty-intrinsic:</i>\r\n    empty ( <i>expression</i>  )\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Semantics**\r\n\r\nThis intrinsic returns `TRUE` if the variable or value designated by\r\n*expression* is empty, where *empty* means that the variable does not\r\nexist, or it exists and its value compares equal to `FALSE`. Otherwise,\r\nthe intrinsic returns `FALSE`.\r\n\r\nThe following values are considered empty: `FALSE`, `0`, `0.0`, \"\", \"`0`\", `NULL`, `[]`/`array()`, and any uninitialized variable.\r\n\r\nIf this intrinsic is used with an expression that designate a dynamic\r\nproperty ([§§](#dynamic-members)), then if the class of that property has an `__isset`\r\nmethod ([§§](#method-__isset)), that method is called.\r\n\r\n**Examples**\r\n\r\n```\r\nempty(\"0\")  // results in TRUE\r\nempty(\"00\") // results in FALSE\r\n$v = [10, 20];\r\nempty($v)   // results in FALSE\r\n```\r\n\r\n####eval\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>eval-intrinsic:</i>\r\n    eval (  <i>expression</i>  )\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Constraints**\r\n\r\n*expression* must designate a string, the contents of which must be\r\nvalid PHP source code.\r\n\r\nThe PHP source code in the string must not be delimited by opening and\r\nclosing [PHP\r\ntags](http://us3.php.net/manual/en/language.basic-syntax.phpmode.php).\r\n\r\n**Semantics**\r\n\r\nThis intrinsic evaluates the contents of the string designated by\r\n*expression*, as PHP source code.\r\n\r\nExecution of a `return` statement ([§§](#the-return-statement)) from within the source code\r\nterminates the intrinsic, and the value returned becomes the value\r\nreturned by eval. If the source code is ill formed, eval returns `FALSE`;\r\notherwise, eval returns `NULL`.\r\n\r\nThe source code is executed in the scope of that from which `eval` is\r\ncalled.\r\n\r\n**Examples**\r\n\r\n```\r\n$str = \"Hello\";\r\neval(\"echo \\$str . \\\"\\\\n\\\";\");  // → echo $str . \"\\n\";\r\n```\r\n\r\n####exit/die\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>exit-intrinsic:</i>\r\n    exit  <i>expression<sub>opt</sub></i>\r\n    exit  (  <i>expression<sub>opt</sub></i>  )\r\n    die   <i>expression<sub>opt</sub></i>\r\n    die   (   <i>expression<sub>opt</sub></i> )\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nWhen *expression* designates an integer, its value must be in the range\r\n0–254.\r\n\r\n**Semantics**\r\n\r\n`exit` and `die` are equivalent.\r\n\r\nThis intrinsic terminates the current script. If *expression* designates\r\na string, that string is written to `STDOUT` ([§§](#resource-types)). If *expression*\r\ndesignates an integer, that represents the script's *exit status code*.\r\nCode 255 is reserved by PHP. Code 0 represents \"success\". The exit\r\nstatus code is made available to the execution environment. If\r\n*expression* is omitted or is a string, the exit status code is zero.\r\n`exit` does not have a resulting value.\r\n\r\n`exit` performs the following operations, in order:\r\n\r\n-   Writes the optional string to `STDOUT` ([§§](#resource-types)).\r\n-   Calls any functions registered via the library function\r\n    `register_shutdown_function` (§xx) in their order of registration.\r\n-   Invokes destructors ([§§](#destructors)) for all remaining instances.\r\n\r\n**Examples**\r\n\r\n```\r\nexit (\"Closing down\");\r\nexit (1);\r\nexit;\r\n```\r\n\r\n####isset\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>isset-intrinsic:</i>\r\n    isset  (  <i>expression-list-one-or-more</i>  )\r\n\r\n  <i>expression-list-one-or-more</i>:\r\n    <i>expression</i>\r\n    <i>expression-list-one-or-mor</i>  ,  <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Constraints**\r\n\r\nEach *expression* must designate a variable.\r\n\r\n**Semantics**\r\n\r\nThis intrinsic returns `TRUE` if all the variables designated by\r\n*expression*s are set and their values are not `NULL`. Otherwise, it\r\nreturns `FALSE`.\r\n\r\nIf this intrinsic is used with an expression that designates a dynamic\r\nproperty ([§§](#dynamic-members)), then if the class of that property has an `__isset`\r\nmethod ([§§](#method-__isset)), that method is called.\r\n\r\n**Examples**\r\n\r\n```\r\n$v = TRUE;\r\nisset($v)     // results in TRUE\r\n$v = NULL;\r\nisset($v)     // results in FALSE\r\n$v1 = TRUE; $v2 = 12.3; $v1 = NULL;\r\nisset($v1, $v2, $v3)  // results in FALSE\r\n```\r\n\r\n####list\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>list-intrinsic:</i>\r\n    list  (  <i>list-expression-list<sub>opt</sub></i>  )\r\n\r\n  <i>list-expression-list:</i>\r\n  <i>list-or-variable</i>\r\n  ,\r\n  <i>list-expression-list</i>  ,  <i>list-or-variable<sub>opt</sub></i>\r\n\r\n  <i>list-or-variable:</i>\r\n    <i>list-intrinsic</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Constraints**\r\n\r\n*list-intrinsic* must be used as the left-hand operand in a\r\n*simple-assignment-expression* ([§§](#simple-assignment)) of which the right-hand\r\noperand must be an expression that designates an array (the \"source\r\narray\").\r\n\r\nEach *expression* in *expression-list-one-or-more* must designate a\r\nvariable (the \"target variable\").\r\n\r\n**Semantics**\r\n\r\nThis intrinsic assigns zero or more elements of the source array to the\r\ntarget variables. On success, it returns a copy of the source array. If\r\nthe source array is actually the value `NULL`, this is consider a failure,\r\nand the return value from `list` is undefined.\r\n\r\nAll elements in the source array having keys of type `string` are ignored.\r\nThe element having an `int` key of 0 is assigned to the first target\r\nvariable, the element having an `int` key of 1 is assigned to the second\r\ntarget variable, and so on, until all target variables have been\r\nassigned. Any elements having an `int` key outside the range 0–(*n*-1),\r\nwhere *n* is the number of target variables, are ignored. If there are\r\nfewer element candidates having int keys than there are target\r\nvariables, the unassigned target variables are unset ([§§](#unset)).\r\n\r\nAny target variable may be a list, in which case, the corresponding\r\nelement is expected to be an array.\r\n\r\nIf the source array elements and the target variables overlap in any\r\nway, the behavior is unspecified.\r\n\r\n**Examples**\r\n\r\n```\r\nlist($min, $max, $avg) = array(0, 100, 67);\r\n  // $min is 0, $max is 100, $avg is 67\r\nlist($min, $max, $avg) = array(2 => 67, 1 => 100, 0 => 0);\r\n  // same as example above\r\nlist($min, , $avg) = array(0, 100, 67);\r\n  // $min is 0, $avg is 67\r\nlist($min, $max, $avg) = array(0, 2 => 100, 4 => 67);\r\n  // $min is 0, $max is unset, $avg is 100\r\nlist($min, list($max, $avg)) = [0, [1 => 67, 99, 0 => 100], 33];\r\n  // $min is 0, $max is 100, $avg is 67\r\n```\r\n\r\n####print\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>print-intrinsic:\r\n    print  <i>expression</i>\r\n    print  (  <i>expression</i>  )\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Constraints**\r\n\r\n*expression* must not designate an array or an instance of a type not\r\nhaving a `__toString` method. \r\n\r\n**Semantics**\r\n\r\nAfter converting its *expression*'s value to a string, if necessary,\r\n`print` writes the resulting string to `STDOUT` ([§§](#resource-types)). Unlike `echo`\r\n([§§](#echo)), `print` can be used in any context allowing an expression. It\r\nalways returns the value 1.\r\n\r\nFor value substitution in string literals, see [§§](#double-quoted-string-literals) and\r\n[§§](#heredoc-string-literals). For conversion to string, see [§§](#converting-to-string-type).\r\n\r\n**Examples**\r\n\r\n```\r\n$v1 = TRUE;\r\n$v2 = 123;\r\nprint  '>>' . $v1 . '|' . $v2 . \"<<\\n\";   // outputs \">>1|123<<\"\r\nprint ('>>' . $v1 . '|' . $v2 . \"<<\\n\");  // outputs \">>1|123<<\"\r\n$v3 = \"qqq{$v2}zzz\";\r\nprint \"$v3\\n\";            // outputs \"qqq123zzz\"\r\n$a > $b ? print \"...\" : print \"...\";\r\n```\r\n\r\n####unset\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>unset-intrinsic:</i>\r\n    unset  (  <i>expression-list-one-or-more</i>  )\r\n</pre>\r\n\r\n*expression-list-one-or-more* is defined in [§§](#isset).  \r\n\r\n**Constraints**\r\n\r\nEach *expression* must designate a variable.\r\n\r\n**Semantics**\r\n\r\nThis intrinsic unsets ([§§](#general-5)) the variables designated by each\r\n*expression* in *expression-list-one-or-more*. No value is returned. An\r\nattempt to unset a non-existent variable (such as a non-existent element\r\nin an array) is ignored.\r\n\r\nWhen called from inside a function, this intrinsic behaves, as follows:\r\n\r\n-   For a variable declared `global` in that function, `unset` removes the\r\n    alias to that variable from the scope of the current call to that\r\n    function. Once the function returns, the global variable is still\r\n    set. (To unset the global variable, use unset on the corresponding\r\n    [`$GLOBALS`](http://us3.php.net/manual/en/reserved.variables.globals.php) array entry ([§§](#predefined-variables)).)\r\n-   For a variable passed byRef to that function, `unset` removes the\r\n    alias to that variable from the scope of the current call to that\r\n    function. Once the function returns, the passed-in argument variable\r\n    is still set.\r\n-   For a variable declared static in that function, `unset` removes the\r\n    alias to that variable from the scope of the current call to that\r\n    function. In subsequent calls to that function, the static variable\r\n    is still set and retains its value from call to call.\r\n\r\nAny visible instance property may be unset, in which case, the property\r\nis removed from that instance.\r\n\r\nIf this intrinsic is used with an expression that designate a dynamic\r\nproperty ([§§](#dynamic-members)), then if the class of that property has an `__unset`\r\nmethod ([§§](#method-__unset)), that method is called.\r\n\r\n**Examples**\r\n\r\n```\r\nunset($v);\r\nunset($v1, $v2, $v3);\r\nunset($x->m); // if m is a dynamic property, $x's __unset(\"m\") is called\r\n```\r\n\r\n###Anonymous Function-Creation\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>anonymous-function-creation-expression:</i>\r\n  function  &<sub>opt</sub> (  <i>parameter-declaration-list<sub>opt<sub></i>  )  <i>anonymous-function-use-clause<sub>opt</sub></i>\r\n      <i>compound-statement</i>\r\n\r\n  <i>anonymous-function-use-clause:</i>\r\n    use  (  <i>use-variable-name-list</i>  )\r\n\r\n  <i>use-variable-name-list:</i>\r\n    &<sub>opt</sub>   <i>variable-name</i>\r\n    <i>use-variable-name-list</i>  ,  &<sub>opt</sub>  <i>variable-name</i>\r\n</pre>\r\n\r\n*parameter-declaration-list* is defined in [§§](#function-definitions); *compound-statement*\r\nis defined in [§§](#compound-statements); *variable-name* is defined in [§§](#names).\r\n\r\n**Semantics**\r\n\r\nThis operator returns an object of type `Closure` ([§§](#class-closure)), or a derived\r\ntype thereof, that encapsulates the anonymous function ([§§](#anonymous-functions)) defined\r\nwithin. An anonymous function is defined like, and behaves like, a named\r\nfunction ([§§](#function-definitions)) except that the former has no name and has an optional\r\n*anonymous-function-use-clause*.\r\n\r\nAn expression that designates an anonymous function is compatible with\r\nthe type hint `callable` ([§§](#function-definitions)).\r\n\r\nThe *use-variable-name-list* is a list of variables from the enclosing\r\nscope, which are to be made available by name to the body of the\r\nanonymous function. Each of these may be passed by value or byRef, as\r\nneeded. The values used for these variables are those at the time the\r\n`Closure` object is created, not when it is used to call the function it\r\nencapsulates.\r\n\r\nAn anonymous function defined inside an instance method has access to\r\nthe variable `$this`.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction doit($value, callable $process)  // return type is \"Closure\"\r\n{\r\n  return $process($value);\r\n}\r\n$result = doit(5, function ($p) { return $p * 2; });  // doubles a value\r\n$result = doit(5, function ($p) { return $p * $p; }); // squares a value\r\n// -----------------------------------------\r\nclass C\r\n{\r\n  public function compute(array $values)\r\n  {\r\n    $count = 0;\r\n          $callback1 = function () use (&$count) // called C::{closure}\r\n    {\r\n      ++$count;\r\n      ...\r\n    };\r\n    ...\r\n    $callback2 = function()   // also called C::{closure}\r\n    {\r\n      ...\r\n    };\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n##Postfix Operators\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>postﬁx-expression:</i>\r\n    <i>primary-expression</i>\r\n    <i>clone-expression</i>\r\n    <i>object-creation-expression</i>\r\n    <i>array-creation-expression</i>\r\n    <i>subscript-expression</i>\r\n    <i>function-call-expression</i>\r\n    <i>member-selection-expression</i>\r\n    <i>postfix-increment-expression</i>\r\n    <i>postfix-decrement-expression</i>\r\n    <i>scope-resolution-expression</i>\r\n    <i>exponentiation-expression</i>\r\n</pre>\r\n\r\n*primary-expression* is defined in [§§](#general-11); *clone-expression* is\r\ndefined in [§§](#the-clone-operator); *object-creation-expression* is defined in [§§](#the-new-operator);\r\n*array-creation-expression* is defined in [§§](#array-creation-operator);\r\n*subscript-expression* is defined in [§§](#subscript-operator); *function-call-expression* is defined in [§§](#function-call-operator); *member-selection-expression* is defined in [§§](#member-selection-operator);\r\n*postfix-increment-expression* and *postfix-decrement-expression* are\r\ndefined in [§§](#postfix-increment-and-decrement-operators); *scope-resolution-expression* is defined in [§§](#scope-resolution-operator);\r\nand *exponetiation-expression* is defined in [§§](#exponentiation-operator)..\r\n\r\n**Semantics**\r\n\r\nThese operators associate left-to-right.\r\n\r\n###The `clone` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>clone-expression:</i>\r\n    clone  <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\n*expression* must designate an object.\r\n\r\n**Semantics**\r\n\r\nThe `clone` operator creates a new object that is a shallow copy of the object designated by *expression*. Then, if the class type of *expression* has a method called `__clone` ([§§](#method-__clone)), that is called to perform a deep copy. The result is a handle that points to the new object.\r\n\r\n**Examples**\r\n\r\nConsider a class `Employee`, from which is derived a class `Manager`. Let us\r\nassume that both classes contain properties that are objects. clone is\r\nused to make a copy of a Manager object, and behind the scenes, the\r\n`Manager` object uses clone to copy the properties for the base class,\r\n`Employee`.\r\n\r\n```\r\nclass Employee\r\n{\r\n  ...\r\n  public function __clone() \r\n  {\r\n    // make a deep copy of Employee object\r\n  }\r\n}\r\nclass Manager extends Employee\r\n{\r\n  ...\r\n  public function __clone() \r\n  {\r\n    $v = parent::__clone();\r\n    // make a deep copy of Manager object\r\n\r\n  }\r\n}\r\n$obj1 = new Manager(\"Smith\", 23);\r\n$obj2 = clone $obj1;  // creates a new Manager that is a deep copy\r\n```\r\n\r\n###The `new` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>object-creation-expression:</i>\r\n    new  <i>class-type-designator</i>  (  <i>argument-expression-list<sub>opt</sub></i>  )\r\n    new  <i>class-type-designator</i>\r\n\r\n  <i>class-type-designator:</i>\r\n    static\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*argument-expression-list* is defined in [§§](#function-call-operator); *qualified-name* is\r\ndefined in [§§](#names); and *expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\n*qualified-name* must name a class.\r\n\r\n*expression* must be a value of type `string` (but not be a string\r\nliteral) that contains the name of a class.\r\n\r\n*class-type-designator* must not designate an abstract class ([§§](#general-23)).\r\n\r\nThe number of arguments in *argument-expression-list* must be at least\r\nas many as the number of parameters defined for the class's constructor.\r\n\r\n**Semantics**\r\n\r\nThe `new` operator allocates memory for an object that is an instance of\r\nthe class specified by *class-type-designator*.\r\n\r\nThe object is initialized by calling the class's constructor ([§§](#constructors))\r\npassing it the optional *argument-expression-list*. If the class has no\r\nconstructor, the constructor that class inherits (if any) is used.\r\nOtherwise, each instance property takes on the value `NULL`.\r\n\r\nThe result of an *object-creation-expression* is a handle to an object\r\nof the type specified by *class-type-designator*.\r\n\r\nFrom within a method, the use of `static` corresponds to the class in the\r\ninheritance context in which the method is called.\r\n\r\nBecause a constructor call is a function call, the relevant parts of\r\n[§§](#function-call-operator) also apply.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n  public function __construct($x = 0, $y = 0) \r\n  {\r\n    ...\r\n  }\r\n  ...\r\n}\r\n$p1 = new Point;     // create Point(0, 0)\r\n$p1 = new Point(12);   // create Point(12, 0)\r\n$cName = 'Point';\r\n$p1 = new $cName(-1, 1); // create Point(-1, 1)\r\n```\r\n\r\n###Array Creation Operator\r\n\r\nAn array is created and initialized by one of two equivalent ways: via\r\nthe array-creation operator `[]`, as described below, or the intrinsic\r\n`array` ([§§](#array)).\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>array-creation-expression:</i>\r\n    array  (  <i>array-initializer<sub>opt</sub></i>  )\r\n    [ <i>array-initializer<sub>opt</sub></i> ]\r\n\r\n  <i>array-initializer:</i>\r\n    <i>array-initializer-list</i>  ,<sub>opt</sub>\r\n\r\n  <i>array-initializer-list:</i>\r\n    <i>array-element-initializer</i>\r\n    <i>array-element-initializer  ,  array-initializer-list</i>\r\n\r\n  <i>array-element-initializer:</i>\r\n    &<sub>opt</sub>   <i>element-value</i>\r\n    element-key  =>  &<sub>opt</sub>   <i>element-value</i>\r\n\r\n  <i>element-key:</i>\r\n    <i>expression</i>\r\n\r\n  <i>element-value</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nIf *array-element-initializer* contains &, *element-value's expression*\r\nmust be a variable name ([§§](#names)).\r\n\r\n**Semantics**\r\n\r\nIf *array-initializer* is omitted, the array has zero elements. For\r\nconvenience, an *array-initializer* may have a trailing comma; however,\r\nthis comma has no purpose. An *array-initializer-list* consists of a\r\ncomma-separated list of one or more *array-element-initializer*s, each\r\nof which is used to provide an *element-value* and an optional\r\n*element-key*.\r\n\r\nIf the value of *element-key* is neither `int` nor `string`, keys with `float`\r\nor `bool` values, or strings whose contents match exactly the pattern of\r\n*decimal-literal* ([§§](#integer-literals)), are converted to `int` ([§§](#converting-to-integer-type)), and values\r\nof all other key types are converted to `string` ([§§](#converting-to-string-type)).\r\n\r\nIf *element-key* is omitted from an *array-element-initializer*, an\r\nelement key of type `int` is associated with the corresponding\r\n*element-value*. The key associated is one more than the previously\r\nassigned `int` key for this array, regardless of whether that key was\r\nprovided explicitly or by default. However, if this is the first element\r\nwith an `int` key, key zero is associated.\r\n\r\nOnce the element keys have been converted to `int` or `string`, and omitted\r\nelement keys have each been associated by default, if two or more\r\n*array-element-initializer*s in an *array-initializer* contain the same\r\nkey, the lexically right-most one is the one whose element-value is used\r\nto initialize that element.\r\n\r\nThe result of this operator is a handle to the set of array elements.\r\n\r\nIf *array-element-initializer* contains &, *element-value's* value is\r\nstored using byRef assignment ([§§](#assignment)).\r\n\r\n**Examples**\r\n\r\n```\r\n$v = [];      // array has 0 elements\r\n$v = array(TRUE);   // array has 1 element, the Boolean TRUE\r\n$v = [123, -56];  // array of two ints, with implicit int keys 0 and 1\r\n$v = [0 => 123, 1 => -56]; // array of two ints, with explicit int keys 0 and 1\r\n$i = 10;\r\n$v = [$i - 10 => 123, $i - 9 => -56]; // key can be a runtime expression\r\n$v = [NULL, 1 => FALSE, 123, 3 => 34e12, \"Hello\"];  // implicit & explicit keys\r\n$i = 6; $j = 12;\r\n$v = [7 => 123, 3 => $i, 6 => ++$j];  // keys are in arbitrary order\r\n$v[4] = 99;   // extends array with a new element\r\n$v = [2 => 23, 1 => 10, 2 => 46, 1.9 => 6];\r\n     // array has 2, with keys 2 and 1, values 46 and 6, respectively\r\n$v = [\"red\" => 10, \"4\" => 3, 9.2 => 5, \"12.8\" => 111, NULL => 1];\r\n     // array has 5 elements, with keys “red”, 4, 9, “12.8”, and “”.\r\n$c = array(\"red\", \"white\", \"blue\");\r\n$v = array(10, $c, NULL, array(FALSE, NULL, $c));\r\n$v = array(2 => TRUE, 0 => 123, 1 => 34.5, -1 => \"red\");\r\nforeach($v as $e) { ... } // iterates over keys 2, 0, 1, -1\r\nfor ($i = -1; $i <= 2; ++$i) { ... $v[$i] } // retrieves via keys -1, 0, 1, 2\r\n```\r\n\r\n###Subscript Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>subscript-expression:</i>\r\n    <i>postﬁx-expression</i>  [  <i>expression<sub>opt</sub></i>  ]\r\n    <i>postﬁx-expression</i>  {  <i>expression<sub>opt</sub></i>  }   <b>[Deprecated form]</b>\r\n</pre>\r\n\r\n*postﬁx-expression* is defined in [§§](#general-13); and *expression* is defined\r\nin [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nIf *postfix-expression* designates a string, *expression* must not\r\ndesignate a string.\r\n\r\n*expression* can be omitted only if *subscript-expression* is used in a\r\nmodifiable-lvalue context and *postfix-expression* does not designate a\r\nstring.\r\n\r\nIf *subscript-expression* is used in a non-lvalue context, the element\r\nbeing designated must exist.\r\n\r\n**Semantics**\r\n\r\nA *subscript-expression* designates a (possibly non-existent) element of\r\nan array or string. When *subscript-expression* designates an object of\r\na type that implements `ArrayAccess` ([§§](#interface-arrayaccess)), the minimal semantics are\r\ndefined below; however, they can be augmented by that object's methods\r\n`offsetGet` (§[[15.6.1](#interface-arrayaccess)](#interface-arrayaccess)) and `offsetSet` (§[[15.6.1](#interface-arrayaccess)](#interface-arrayaccess)).\r\n\r\nThe element key is designated by *expression*. If the value of\r\n*element-key* is neither `int` nor `string`, keys with `float` or `bool` values,\r\nor strings whose contents match exactly the pattern of *decimal-literal*\r\n([§§](#integer-literals)), are converted to `int` ([§§](#converting-to-integer-type)), and values of all other key\r\ntypes are converted to `string` ([§§](#converting-to-string-type)).\r\n\r\nIf both *postfix-expression* and *expression* designate strings,\r\n*expression* is treated as if it specified the `int` key zero instead.\r\n\r\nA *subscript-expression* designates a modifiable lvalue if and only if\r\n*postfix-expression* designates a modifiable lvalue.\r\n\r\n*postfix-expression designates an array*\r\n\r\nIf *expression* is present, if the designated element exists, the type\r\nand value of the result is the type and value of that element;\r\notherwise, the result is `NULL`.\r\n\r\nIf *expression* is omitted, a new element is inserted. Its key has type\r\n`int` and is one more than the highest, previously assigned, non-negative\r\n`int` key for this array. If this is the first element with a non-negative\r\n`int` key, key zero is used. However, if the highest, previously assigned\r\n`int` key for this array is `PHP_INT_MAX` ([§§](#)), **no new element is\r\ninserted**. The type and value of the result is the type and value of\r\nthe new element.\r\n\r\n-   If the usage context is as the left-hand side of a\r\n    *simple-assignment-expression* ([§§](#simple-assignment)): The value of the new\r\n    element is the value of the right-hand side of that\r\n    *simple-assignment-expression*.\r\n-   If the usage context is as the left-hand side of a\r\n    *compound-assignment-expression* ([§§](#compound-assignment)): The expression\r\n    `e1 op= e2` is evaluated as `e1 = NULL op (e2)`.\r\n-   If the usage context is as the operand of a postfix- or\r\n    prefix-increment or decrement operator ([§§](#postfix-increment-and-decrement-operators), [§§](#prefix-increment-and-decrement-operators)): The value\r\n    of the new element is `NULL`.\r\n\r\n*postfix-expression designates a string*\r\n\r\nIf the designated element exists, the type and value of the result is\r\nthe type and value of that element; otherwise, the result is an empty\r\nstring.\r\n\r\n*postfix-expression designates an object of a type that implements*\r\n`ArrayAccess`\r\n\r\nIf *expression* is present,\r\n\r\n-   If *subscript-expression* is used in a non-lvalue context, the\r\n    object's method `offsetGet` is called with an argument of\r\n    *expression*. The type and value of the result is the type and value\r\n    returned by `offsetGet`.\r\n-   If the usage context is as the left-hand side of a\r\n    *simple-assignment-expression*: The object's method `offsetSet` is\r\n    called with a first argument of *expression* and a second argument\r\n    that is the value of the right-hand side of that\r\n    *simple-assignment-expression*. The type and value of the result is\r\n    the type and value of the right-hand side of that\r\n    *simple-assignment-expression*.\r\n-   If the usage context is as the left-hand side of a\r\n    *compound-assignment-expression*: The expression `e1 op= e2` is\r\n    evaluated as `e1 = offsetGet(expression) op (e2)`, which is then\r\n    processed according to the rules for simple assignment immediately\r\n    above.\r\n-   If the usage context is as the operand of a postfix- or\r\n    prefix-increment or decrement operator ([§§](#postfix-increment-and-decrement-operators), [§§](#prefix-increment-and-decrement-operators)): The\r\n    object's method `offsetGet` is called with an argument of\r\n    *expression*. However, this method has no way of knowing if an\r\n    increment or decrement operator was used, or whether it was a prefix\r\n    or postfix operator. The type and value of the result is the type\r\n    and value returned by `offsetGet`.\r\n\r\nIf *expression* is omitted, \r\n\r\n-   If the usage context is as the left-hand side of a\r\n    *simple-assignment-expression*: The object's method `offsetSet`\r\n    ([§§](#interface-arrayaccess)) is called with a first argument of `NULL` and a second\r\n    argument that is the value of the right-hand side of that\r\n    *simple-assignment-expression*. The type and value of the result is\r\n    the type and value of the right-hand side of that\r\n    *simple-assignment-expression*.\r\n-   If the usage context is as the left-hand side of a\r\n    *compound-assignment-expression*: The expression `e1 op= e2` is\r\n    evaluated as `e1 = offsetGet(NULL) op (e2)`, which is then processed\r\n    according to the rules for simple assignment immediately above.\r\n-   If the usage context is as the operand of a postfix- or\r\n    prefix-increment or decrement operator ([§§](#postfix-increment-and-decrement-operators), [§§](#prefix-increment-and-decrement-operators)): The\r\n    object's method `offsetGet` is called with an argument of `NULL`.\r\n    However, this method has no way of knowing if an increment or\r\n    decrement operator was used, or whether it was a prefix or postfix\r\n    operator. The type and value of the result is the type and value\r\n    returned by `offsetGet`.\r\n\r\nNote: The brace (`{...}`) form of this operator has been deprecated. \r\n\r\n**Examples**\r\n\r\n```\r\n$v = array(10, 20, 30);\r\n$v[1] = 1.234;    // change the value (and type) of element [1]\r\n$v[-10] = 19;   // insert a new element with int key -10\r\n$v[\"red\"] = TRUE; // insert a new element with string key \"red\"\r\n[[2,4,6,8], [5,10], [100,200,300]][0][2]  // designates element with value 6\r\n[\"black\", \"white\", \"yellow\"][1][2]  // designates substring \"i\" in \"white\"\r\nfunction f() { return [1000, 2000, 3000]; } \r\nf()[2]      // designates element with value 3000\r\n\"red\"[1.9]    // designates [1]\r\n\"red\"[0][0][0]    // designates [0]\r\n// -----------------------------------------\r\nclass MyVector implements ArrayAccess { ... }\r\n$vect1 = new MyVector(array(10, 'A' => 2.3, \"up\"));\r\n$vect1[10] = 987; // calls Vector::offsetSet(10, 987)\r\n$vect1[] = \"xxx\"; // calls Vector::offsetSet(NULL, \"xxx\")\r\n$x = $vect1[1];   // calls Vector::offsetGet(1)\r\n```\r\n\r\n###Function Call Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>function-call-expression:</i>\r\n    <i>postﬁx-expression</i>  (  <i>argument-expression-list<sub>opt</sub></i>  )\r\n\r\n  <i>argument-expression-list:</i>\r\n    <i>assignment-expression</i>\r\n    <i>argument-expression-list</i>  ,  <i>assignment-expression</i>\r\n</pre>\r\n\r\n*postﬁx-expression* is defined in [§§](#general-13); and *assignmment-expression*\r\nis defined in [§§](#general-15).\r\n\r\n\r\n**Constraints**\r\n\r\n*postfix-expression* must designate a function, either by being its\r\n*name*, by being a value of type string (but not a string literal) that\r\ncontains the function's name, or by being a variable whose type is\r\n`Closure` ([§§](#class-closure)) or a derived type thereof.\r\n\r\nThe number of arguments present in a function call must be at least as\r\nmany as the number of parameters defined for that function.\r\n\r\nNo calls can be made to a conditionally defined function ([§§](#general-22)) until\r\nthat function exists.\r\n\r\nAny argument that matches a parameter passed byRef should (but need not)\r\ndesignate an lvalue.\r\n\r\n**Semantics**\r\n\r\nAn expression of the form *function-call-expression* is a *function\r\ncall*. The postﬁx expression designates the *called function*, and\r\n*argument-expression-list* speciﬁes the arguments to be passed to that\r\nfunction. An argument can have any type. In a function call,\r\n*postfix-expression* is evaluated first, followed by each\r\n*assignment-expression* in the order left-to-right. There is a sequence\r\npoint ([§§](#general-10)) right before the function is called. For details of the\r\ntype and value of a function call see [§§](#the-return-statement). The value of a function\r\ncall is a modifiable lvalue only if the function returns a byRef that\r\naliases a modifiable lvalue.\r\n\r\nWhen *postfix-expression* designates an instance method or constructor,\r\nthe instance used in that designation is used as the value of `$this` in\r\nthe invoked method or constructor. However, if no instance was used in\r\nthat designation (for example, in the call `C::instance_method()`) the\r\ninvoked instance has no `$this` defined.\r\n\r\nWhen a function is called, the value of each argument passed to it is\r\nassigned to the corresponding parameter in that function's definition,\r\nif such a parameter exists. The assignment of argument values to\r\nparameters is defined in terms of simple ([§§](#simple-assignment)) or byRef assignment\r\n([§§](#byref-assignment)), depending on how the parameter was declared.  There may be\r\nmore arguments than parameters, in which case, the library functions\r\n[`func_num_args`](http://www.php.net/manual/en/function.func-num-args.php)\r\n(§xx), [`func_get_arg`](http://www.php.net/manual/en/function.func-get-arg.php)\r\n(§xx),\r\nand [`func_get_args`](http://www.php.net/manual/en/function.func-get-args.php)\r\n(§xx) can be used to get access to the complete argument list that was\r\npassed. If the number of arguments present in a function call is fewer\r\nthan the number of parameters defined for that function, any parameter\r\nnot having a corresponding argument is considered undefined if it has no\r\ndefault argument value ([§§](#function-definitions)); otherwise, it is considered defined with\r\nthat default argument value.\r\n\r\nIf an undefined variable is passed using byRef, that variable becomes\r\ndefined, with a default value of `NULL`.\r\n\r\nDirect and indirect recursive function calls are permitted.\r\n\r\nIf *postfix-expression* is a string, this is a variable function call\r\n([§§](#variable-functions)).\r\n\r\n**Examples**\r\n\r\n```\r\nfunction square($v) { return $v * $v; } \r\nsquare(5)     // call square directly; it returns 25\r\n$funct = square;  // assigns the string \"square\" to $funct\r\n$funct(-2.3)    // call square indirectly; it returns 5.29\r\nstrlen($lastName) // returns the # of bytes in the string\r\n// -----------------------------------------\r\nfunction f1() { ... }  function f2() { ... }  function f3() { ... }  \r\nfor ($i = 1; $i <= 2; ++$i) { $f = 'f' . $i;  $f(); }\r\n// -----------------------------------------\r\nfunction f($p1, $p2, $p3, $p4, $p5) { ... }\r\nfunction g($p1, $p2, $p3, $p4, $p5) { ... }\r\nfunction h($p1, $p2, $p3, $p4, $p5) { ... }\r\n$funcTable = array(f, g, h);  // list of 3 function designators \r\n$i = 1;\r\n$funcTable[$i++]($i, ++$i, $i, $i = 12, --$i); // calls g(2,3,3,12,11)\r\n// -----------------------------------------\r\nfunction f4($p1, $p2 = 1.23, $p3 = \"abc\") { ... }\r\nf4(); // inside f4, $p1 is undefined, $p2 is 1.23, $p3 is \"abc\"\r\n// -----------------------------------------\r\nfunction f(&$p) { ... }\r\n$a = array(10, 20, 30);\r\nf($a[5]); // non-existent element going in, but element exists afterwards\r\n// -----------------------------------------\r\nfunction factorial($int)  // contains a recursive call\r\n{\r\n  return ($int > 1) ? $int * factorial($int - 1) : $int;\r\n}\r\n// -----------------------------------------\r\n$anon = function () { ... };  // store a Closure in $anon\r\n$anon();  // call the anonymous function encapsulated by that object\r\n```\r\n\r\n###Member-Selection Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>member-selection-expression:</i>\r\n    <i>postﬁx-expression</i>  ->  <i>member-selection-designator</i>\r\n\r\n  <i>member-selection-designator:</i>\r\n    <i>name</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*postﬁx-expression* is defined in [§§](#general-13); *name* is defined in\r\n[§§](#names); and *expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\n*postﬁx-expression* must designate an object or be `NULL`, `FALSE`, or an\r\nempty string. \r\n\r\n*name* must designate an instance property, or an instance or static\r\nmethod of *postﬁx-expression*'s class type.\r\n\r\n*expression* must be a value of type `string` (but not a string literal)\r\nthat contains the name of an instance property (**without** the\r\nleading `$`) or an instance or static method of that instance's class\r\ntype.\r\n\r\n**Semantics**\r\n\r\nA *member-selection-expression* designates an instance property or an\r\ninstance or static method of the object designated by\r\n*postﬁx-expression*. For a property, the value is that of the property,\r\nand is a modifiable lvalue if *postﬁx-expression* is a modifiable\r\nlvalue.\r\n\r\nWhen the `->` operator is used in a modifiable lvalue context and *name*\r\nor *expression* designate a property that is not visible, the property\r\nis treated as a dynamic property ([§§](#dynamic-members)). If *postﬁx-expression*'s class\r\ntype defines a `__set` method ([§§](#method-__set)), it is called to store the\r\nproperty's value. When the `->` operator is used in a non-lvalue context\r\nand *name* or *expression* designate a property that is not visible, the\r\nproperty is treated as a dynamic property. If *postﬁx-expression*'s\r\nclass type defines a `__get` method ([§§](#method-__get)), it is called to retrieve\r\nthe property's value.\r\n\r\nIf *postﬁx-expression* is `NULL`, `FALSE`, or an empty string, an expression\r\nof the form `$p->x = 10` causes an instance of `stdClass` ([§§](#class-stdclass)) to be\r\ncreated with a dynamic property x having a value of 10. `$p` is then made\r\nto refer to this instance.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n  private $x;\r\n  private $y;\r\n  public function move($x, $y) \r\n  {\r\n    $this->x = $x;  // sets private property $x\r\n    $this->y = $y;  // sets private property $x\r\n  }\r\n  public function __toString() \r\n  {\r\n    return '(' . $this->x . ',' . $this->y . ')';\r\n  }     // get private properties $x and $y\r\n    public function __set($name, $value) { ... }\r\n    public function __get($name) { ... }\r\n}\r\n$p1 = new Point;\r\n$p1->move(3, 9);  // calls public instance method move by name\r\n$n = \"move\";\r\n$p1->$n(-2, 4);   // calls public instance method move by variable\r\n$p1->color = \"red\"; // turned into $p1->__set(\"color\", \"red\");\r\n$c = $p1->color;  // turned into $c = $p1->__get(\"color\");\r\n```\r\n\r\n###Postfix Increment and Decrement Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>postfix-increment-expression:</i>\r\n    <i>unary-expression</i>  ++\r\n\r\n  <i>postfix-decrement-expression:</i>\r\n    <i>unary-expression</i>  --\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14).\r\n\r\n**Constraints**\r\n\r\nThe operand of the postfix ++ and -- operators must be a modifiable\r\nlvalue that has scalar type.\r\n\r\n**Semantics**\r\n\r\nThese operators behave like their prefix counterparts ([§§](#prefix-increment-and-decrement-operators)) except\r\nthat the value of a postfix ++ or -- expression is the value before any\r\nincrement or decrement takes place.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 10; $j = $i-- + 100;   // old value of $i (10) is added to 100\r\n$a = array(100, 200); $v = $a[1]++; // old value of $ia[1] (200) is assigned\r\n```\r\n\r\n###Scope-Resolution Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>scope-resolution-expression:</i>\r\n    <i>scope-resolution-qualifier</i>  ::  <i>member-selection-designator</i>\r\n    <i>scope-resolution-qualifier</i>  ::  <i>class</i>\r\n\r\n  <i>scope-resolution-qualifier:</i>\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n    self\r\n    parent\r\n    static\r\n</pre>\r\n\r\n*member-selection-designator* is defined in [§§](#member-selection-operator).\r\n\r\n**Constraints**\r\n\r\n*qualified-name* must be the name of a class or interface type.\r\n\r\n*expression* must be a value of type string (but not a string literal)\r\nthat contains the name of a class or interface type.\r\n\r\n**Semantics**\r\n\r\nFrom inside or outside a class or interface, operator `::` allows the\r\nselection of a constant. From inside or outside a class, this operator\r\nallows the selection of a static property, static method, or instance\r\nmethod. From within a class, it also allows the selection of an\r\noverridden property or method. For a property, the value is that of the\r\nproperty, and is a modifiable lvalue if *member-selection-designator* is\r\na modifiable lvalue.\r\n\r\nFrom within a class, `self::m` refers to the member `m` in that class,\r\nwhereas `parent::m` refers to the closest member `m` in the base-class\r\nhierarchy, not including the current class. From within a method,\r\n`static::m` refers to the member `m` in the class that corresponds to the\r\nclass inheritance context in which the method is called. This allows\r\n*late static binding*. Consider the following scenario:\r\n\r\n```\r\nclass Base\r\n{\r\n  public function b()\r\n  {\r\n    static::f();  // calls the most appropriate f()\r\n  }\r\n  public function f() { ... }\r\n}\r\nclass Derived extends Base\r\n{\r\n  public function f() { ... }\r\n}\r\n$b1 = new Base;\r\n$b1->b(); // as $b1 is an instance of Base, Base::b() calls Base::f()\r\n$d1 = new Derived;\r\n$d1->b(); // as $d1 is an instance of Derived, Base::b() calls Derived::f()\r\n```\r\n\r\nThe value of the form of *scope-resolution-expression* ending in `::class`\r\nis a string containing the fully qualified name of the current class,\r\nwhich for a static qualifier, means the current class context.\r\n\r\n**Examples**\r\n\r\n```\r\nfinal class MathLibrary \r\n{\r\n  public static function sin() { ... }\r\n  ...\r\n}\r\n$v = MathLibrary::sin(2.34);  // call directly by class name\r\n$clName = 'MathLibrary';\r\n$v = $clName::sin(2.34);    // call indirectly via string\r\n// -----------------------------------------\r\nclass MyRangeException extends Exception \r\n{\r\n  public function __construct($message, ...)\r\n  {\r\n    parent::__construct($message);\r\n    ...\r\n  }\r\n  ...\r\n}\r\n// -----------------------------------------\r\nclass Point \r\n{\r\n  private static $pointCount = 0;\r\n  public static function getPointCount() \r\n  {\r\n    return self::$pointCount;\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n###Exponentiation Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>exponentiation-expression:</i>\r\n    <i>expression  **  expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Semantics**\r\n\r\nThe `**` operator produces the result of raising the value of the\r\nleft-hand operand to the power of the right-hand one. If either or both\r\noperands have non-numeric types, their values are converted to type `int`\r\nor `float`, as appropriate. If both operands have non-negative integer\r\nvalues and the result can be represented as an `int`, the result has type\r\n`int`; otherwise, the result has type `float`.\r\n\r\n**Examples**\r\n\r\n```\r\n2**3;   // int with value 8\r\n2**3.0;   // float with value 8.0\r\n\"2.0\"**\"3\"; // float with value 8.0\r\n```\r\n\r\n##Unary Operators\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>unary-expression:</i>\r\n    <i>postfix-expression</i>\r\n    <i>prefix-increment-expression</i>\r\n    <i>prefix-decrement-expression</i>\r\n    <i>unary-op-expression</i>\r\n    <i>error-control-expression</i>\r\n    <i>shell-command-expression</i>\r\n    <i>cast-expression</i>\r\n    <i>variable-name-creation-expression</i>\r\n</pre>\r\n\r\n*postfix-expression* is defined in [§§](#general-13);\r\n*prefix-increment-expression* and *prefix-decrement-expression* are\r\ndefined in [§§](#prefix-increment-and-decrement-operators); *unary-op-expression* is defined in [§§](#unary-arithmetic-operators);\r\n*error-control-expression* is defined in [§§](#error-control-operator);\r\n*shell-command-expression* is defined in [§§](#shell-command-operator); *cast-expression* is\r\ndefined in [§§](#cast-operator) and *variable-name-creation-expression* is defined in\r\n[§§](#variable-name-creation-operator).\r\n\r\n**Semantics**\r\n\r\nThese operators associate right-to-left.\r\n\r\n###Prefix Increment and Decrement Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>prefix-increment-expression:</i>\r\n    ++ <i>unary-expression</i>\r\n\r\n  <i>prefix-decrement-expression:</i>\r\n    -- <i>unary-expression</i>\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14).   \r\n\r\n**Constraints**\r\n\r\nThe operand of the prefix `++` or `--` operator must be a modifiable lvalue\r\nthat has scalar type.\r\n\r\n**Semantics**\r\n\r\n*Arithmetic Operands*\r\n\r\nFor a prefix `++` operator used with an arithmetic operand, the side\r\neffect ([§§](#general-10)) of the operator is to increment by 1, as appropriate, the\r\nvalue of the operand. The result is the value of the operand after it\r\nhas been incremented. If an int operand's value is the largest\r\nrepresentable for that type, the type and value of the result is\r\nimplementation-defined ([§§](#the-integer-type)).\r\n\r\nFor a prefix `--` operator used with an arithmetic operand, the side\r\neffect of the operator is to decrement by 1, as appropriate, the value\r\nof the operand. The result is the value of the operand after it has been\r\ndecremented. If an int operand's value is the smallest representable for\r\nthat type, the type and value of the result is implementation-defined\r\n([§§](#the-integer-type)).\r\n\r\nFor a prefix `++` or `--` operator used with an operand having the value\r\n`INF`, `-INF`, or `NAN`, there is no side effect, and the result is the\r\noperand's value.\r\n\r\n*Boolean Operands*\r\n\r\nFor a prefix `++` or `--` operator used with a Boolean-valued operand, there\r\nis no side effect, and the result is the operand's value.\r\n\r\n*NULL-valued Operands*\r\n\r\nFor a prefix -- operator used with a `NULL`-valued operand, there is no\r\nside effect, and the result is the operand's value. For a prefix `++`\r\noperator used with a `NULL`-valued operand, the side effect is that the\r\noperand's type is changed to int, the operand's value is set to zero,\r\nand that value is incremented by 1. The result is the value of the\r\noperand after it has been incremented.\r\n\r\n*String Operands*\r\n\r\nFor a prefix `--` operator used with an operand whose value is an empty\r\nstring, the side effect is that the operand's type is changed to `int`,\r\nthe operand's value is set to zero, and that value is decremented by 1.\r\nThe result is the value of the operand after it has been incremented.\r\n\r\nFor a prefix `++` operator used with an operand whose value is an empty\r\nstring, the side effect is that the operand's value is changed to the\r\nstring \"1\". The type of the operand is unchanged. The result is the new\r\nvalue of the operand.\r\n\r\nFor a prefix `--` or `++` operator used with a numeric string, the numeric\r\nstring is treated as the corresponding `int` or `float` value.\r\n\r\nFor a prefix `--` operator used with a non-numeric string-valued operand,\r\nthere is no side effect, and the result is the operand's value.\r\n\r\nFor a non-numeric string-valued operand that contains only alphanumeric\r\ncharacters, for a prefix `++` operator, the operand is considered to be a\r\npseudo-base-36 number (i.e., with digits 0–9 followed by A–Z or a–z) in\r\nwhich letter case is ignored for value purposes. The right-most digit is\r\nincremented by 1. For the digits 0–8, that means going to 1–9. For the\r\nletters \"A\"–\"Y\" (or \"a\"–\"y\"), that means going to \"B\"–\"Z\" (or \"b\"–\"z\").\r\nFor the digit 9, the digit becomes 0, and the carry is added to the next\r\nleft-most digit, and so on. For the digit \"Z\" (or \"z\"), the resulting\r\nstring has an extra digit \"A\" (or \"a\") appended. For example, when\r\nincrementing, \"a\" -> \"b\", \"X\" -> \"AA\", \"AA\" -> \"AB\", \"F29\" -> \"F30\", \"FZ9\" -> \"GA0\", and \"ZZ9\" -> \"AAA0\". A digit position containing a number wraps\r\nmodulo-10, while a digit position containing a letter wraps modulo-26.\r\n\r\nFor a non-numeric string-valued operand that contains any\r\nnon-alphanumeric characters, for a prefix `++` operator, all characters up\r\nto and including the right-most non-alphanumeric character is passed\r\nthrough to the resulting string, unchanged. Characters to the right of\r\nthat right-most non-alphanumeric character are treated like a\r\nnon-numeric string-valued operand that contains only alphanumeric\r\ncharacters, except that the resulting string will not be extended.\r\nInstead, a digit position containing a number wraps modulo-10, while a\r\ndigit position containing a letter wraps modulo-26.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 10; $j = --$i + 100;   // new value of $i (9) is added to 100\r\n$a = array(100, 200); $v = ++$a[1]; // new value of $ia[1] (201) is assigned\r\n```\r\n\r\n###Unary Arithmetic Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>unary-op-expression:</i>\r\n    <i>unary-operator cast-expression</i>\r\n\r\n  <i>unary-operator: one of</i>\r\n    +  -  !  \\\r\n</pre>\r\n\r\n*cast-expression* is defined in [§§](#cast-operator).   \r\n\r\n**Constraints**\r\n\r\nThe operand of the unary `+`, unary `-`, and unary `!` operators must have\r\nscalar type.\r\n\r\nThe operand of the unary `~` operator must have arithmetic type.\r\n\r\n**Semantics**\r\n\r\n*Arithmetic Operands*\r\n\r\nFor a unary `+` operator used with an arithmetic operand, the type and\r\nvalue of the result is the type and value of the operand. \r\n\r\nFor a unary `-` operator used with an arithmetic operand, the value of the\r\nresult is the negated value of the operand. However, if an int operand's\r\noriginal value is the smallest representable for that type, the type and\r\nvalue of the result is implementation-defined ([§§](#the-integer-type)).\r\n\r\nFor a unary `!` operator used with an arithmetic operand, the type of the\r\nresult is `bool`. The value of the result is `TRUE` if the value of the\r\noperand is non-zero; otherwise, the value of the result is `FALSE`. For\r\nthe purposes of this operator, `NAN` is considered a non-zero value. The\r\nexpression `!E` is equivalent to `(E == 0)`.\r\n\r\nFor a unary `~` operator used with an `int` operand, the type of the result\r\nis `int`. The value of the result is the bitwise complement of the value\r\nof the operand (that is, each bit in the result is set if and only if\r\nthe corresponding bit in the operand is clear). For a unary `~` operator\r\nused with a `float` operand, the value of the operand is first converted\r\nto `int` before the bitwise complement is computed.\r\n\r\n*Boolean Operands*\r\n\r\nFor a unary `+` operator used with a `TRUE`-valued operand, the value of the\r\nresult is 1 and the type is `int`. When used with a `FALSE`-valued operand,\r\nthe value of the result is zero and the type is `int`.\r\n\r\nFor a unary `-` operator used with a `TRUE`-valued operand, the value of the\r\nresult is -1 and the type is `int`. When used with a `FALSE`-valued operand,\r\nthe value of the result is zero and the type is `int`.\r\n\r\nFor a unary `!` operator used with a `TRUE`-valued operand, the value of the\r\nresult is `FALSE` and the type is `bool`. When used with a `FALSE`-valued\r\noperand, the value of the result is `TRUE` and the type is `bool`.\r\n\r\n*NULL-valued Operands*\r\n\r\nFor a unary `+` or unary `-` operator used with a `NULL`-valued operand, the\r\nvalue of the result is zero and the type is `int`.\r\n\r\nFor a unary `!` operator used with a `NULL`-valued operand, the value of the\r\nresult is `TRUE` and the type is `bool`.\r\n\r\n*String Operands*\r\n\r\nFor a unary `+` or `-` operator used with a numeric string or a\r\nleading-numeric string, the string is first converted to an `int` or\r\n`float`, as appropriate, after which it is handled as an arithmetic\r\noperand. The trailing non-numeric characters in leading-numeric strings\r\nare ignored. With a non-numeric string, the result has type `int` and\r\nvalue 0.\r\n\r\nFor a unary `!` operator used with a string, the string is first converted\r\nto `bool`, after which its value is negated.\r\n\r\n**Examples**\r\n\r\n```\r\n$v = +10;\r\nif ($v1 > -5) ...\r\n$t = TRUE;\r\nif (!$t) ...\r\n$v = ~0b1010101;\r\n```\r\n\r\n###Error Control Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>error-control-expression:</i>\r\n    @   <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Semantics**\r\n\r\nOperator `@` supresses any error messages generated by the evaluation of\r\n*expression*.\r\n\r\nIf a custom error-handler has been established using the library\r\nfunction [`set_error_handler` (§xx), that\r\nhandler](http://us3.php.net/manual/en/function.set-error-handler.php)is\r\nstill called.\r\n\r\n**Examples**\r\n\r\n```\r\n$infile = @fopen(\"NoSuchFile.txt\", 'r');\r\n```\r\n\r\nOn open failure, the value returned by `fopen` is `FALSE`, which is\r\nsufficient to know to handle the error. There is no need to have any\r\nerror message displayed.\r\n\r\n**Implementation Notes**\r\n\r\nGiven the following example:\r\n\r\n```\r\nfunction f() {\r\n  $ret = $y;\r\n  return $ret;\r\n}\r\n\r\n$x = @f();  // without @, get \"Undefined variable: y\"\r\n```\r\n\r\nThe following code shows how this statement is handled:\r\n\r\n```\r\n$origER = error_reporting();\r\nerror_reporting(0);\r\n$tmp = f();\r\n$curER = error_reporting();\r\nif ($curER === 0) error_reporting($origER);\r\n$x = $tmp;\r\n```\r\n\r\n###Shell Command Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>shell-command-expression:</i>\r\n    `  <i>dq-char-sequence<sub>opt</sub></i>  `\r\n</pre>\r\n\r\nwhere \\` is the GRAVE ACCENT character U+0060, commonly referred to as a\r\n*backtick*.\r\n\r\n*dq-char-sequence* is described in [§§](#double-quoted-string-literals).\r\n\r\n**Semantics**\r\n\r\nThis operator passes *dq-char-sequence* to the command shell for\r\nexecution, as though it was being passed to the library function\r\n`shell_exec` (§xx). If the output from execution of that command is\r\nwritten to `STDOUT` ([§§](#resource-types)), that output is the result of this operator\r\nas a string. If the output is redirected away from `STDOUT`, or\r\n*dq-char-sequence* is empty or contains only white space, the result of\r\nthe operator is `NULL`.\r\n\r\nIf [`shell_exec`](http://www.php.net/manual/en/function.shell-exec.php)\r\n(§xx) is disabled, this operator is disabled.\r\n\r\n**Examples**\r\n\r\n```\r\n$result = `ls`;           // result is the output of command ls\r\n$result = `ls >dirlist.txt`;  // result is NULL\r\n$d = \"dir\"; $f = \"*.*\";\r\n$result = `$d {$f}`;      // result is the output of command dir *.*\r\n```\r\n\r\n###Cast Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>cast-expression:</i>\r\n    <i>unary-expression</i>\r\n    (  <i>cast-type</i>  ) <i>cast-expression</i>\r\n\r\n  <i>cast-type: one of</i>\r\n    array  binary  bool  boolean  double  int  integer  float  object\r\n    real  string  unset\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14).   \r\n\r\n**Constraints**\r\n\r\nFor *binary*, *cast-expression* must designate a string.\r\n\r\n**Semantics**\r\n\r\nWith the exception of the *cast-type*s unset and binary (see below), the\r\nvalue of the operand *cast-expression* is converted to the type\r\nspecified by *cast-type*, and that is the type and value of the result.\r\nThis construct is referred to a *cast,* and is used as the verb, \"to\r\ncast\". If no conversion is involved, the type and value of the result\r\nare the same as those of *cast-expression*.\r\n\r\nA cast can result in a loss of information.\r\n\r\nA *cast-type* of `array` results in a conversion to type array. See [§§](#converting-to-array-type)\r\nfor details.\r\n\r\nA *cast-type* of `binary` is reserved for future use in dealing with\r\nso-called *binary strings*. Casting a string to binary results in the\r\nsame string.\r\n\r\nA *cast-type* of `bool` or `boolean` results in a conversion to type `bool`.\r\nSee [§§](#converting-to-boolean-type) for details.\r\n\r\nA *cast-type* of `int` or `integer` results in a conversion to type `int`. See [§§](#converting-to-integer-type) for details.\r\n\r\nA *cast-type* of `float`, `double`, or `real` results in a conversion to type `float`. See [§§](#converting-to-floating-point-type) for details.\r\n\r\nA *cast-type* of `object` results in a conversion to type `object`. See [§§](#converting-to-object-type)\r\nfor details.\r\n\r\nA *cast-type* of `string` results in a conversion to type `string`. See [§§](#converting-to-string-type)\r\nfor details.\r\n\r\nA *cast-type* of `unset` always results in a value of `NULL`. (This use of\r\n`unset` should not be confused with the `unset` intrinsic ([§§](#unset)).)\r\n\r\n**Examples**\r\n\r\n```\r\n(int)(10/3)          // results in the int 3 rather than the float 3.333...\r\n(array)(16.5)      // results in an array of 1 float; [0] = 16.5\r\n(int)(float)\"123.87E3\" // results in the int 123870\r\n```\r\n\r\n###Variable-Name Creation Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>variable-name-creation-expression:</i>\r\n    $   <i>expression</i>\r\n    $  {  <i>expression</i>  }\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nIn the non-brace form, *expression* must be a\r\n*variable-name-creation-expression* or a *variable-name* that designates\r\na scalar value.\r\n\r\nIn the brace form, *expression* must be a\r\n*variable-name-creation-expression* or an expression that designates a\r\nscalar value.\r\n\r\n**Semantics**\r\n\r\nThe result of this operator is a variable name spelled using the textual\r\nrepresentation of the value of *expression* even though such a name\r\nmight not be permitted as a variable-name ([§§](#names)) source code token.\r\n\r\nThis specification documents existing practice rather than ideal\r\nlanguage design, and **there is one aspect of this operator that behaves\r\nin a manner that violates the precedence rules**. Consider `o` to be an\r\nobject of some class that has an instance property called `pr`. How is the\r\nnon-brace-form expression `$$o->pr` handled with respect to precedence?\r\nAs the operator `->` has higher precedence, the answer would seem to be,\r\n\"`->` wins over `$`\"; however, that is not the case. In fact, the\r\nexpression is treated as `${$o}->pr`.\r\n\r\n**Examples**\r\n\r\n```\r\n$color = \"red\";\r\n$$color = 123;    // equivalent to $red = 123\r\n// -----------------------------------------\r\n$x = 'ab'; $ab = 'fg'; $fg = 'xy';\r\n$$ $ $x = 'Hello';  // equivalent to $xy = Hello\r\n// -----------------------------------------\r\n$v1 = 3;\r\n$$v1 = 22;        // equivalent to ${3} = 22\r\n$v2 = 9.543;\r\n$$v2 = TRUE;    // equivalent to ${9.543} = TRUE\r\n$v3 = NULL;\r\n$$v3 = \"abc\";   // equivalent to ${NULL} = \"abc\"\r\n// -----------------------------------------\r\nfunction f1 () { return 2.5; }\r\n${1 + f1()} = 1000;   // equivalent to ${3.5} = 1000\r\n// -----------------------------------------\r\n$v = array(10, 20); $a = 'v';\r\n$$a[0] = 5;       // [] has higher precedence than $\r\n$v = array(10, 20); $a = 'v';\r\n${$a[0]} = 5;   // equivalent to above\r\n$v = array(10, 20); $a = 'v';\r\n${$a}[0] = 5;   // $ gets first shot at $a\r\n```\r\n\r\n##`instanceof` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>instanceof-expression:</i>\r\n    <i>unary-expression</i>\r\n    <i>instanceof-subject</i>  instanceof   <i>instanceof-type-designator</i>\r\n\r\n  <i>instanceof-subject:</i>\r\n    <i>expression</i>\r\n\r\n  <i>instanceof-type-designator:</i>\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14); *expression* is defined in\r\n[§§](#general-16); and *qualified-name* is defined in [§§](#names). \r\n\r\n**Constraints**\r\n\r\nThe *expression* in *instanceof-subject* must designate a variable.\r\n\r\nThe *expression* in *instanceof-type-designator* must not be any form of\r\nliteral.\r\n\r\n*qualified-name* must be the name of a class or interface type.\r\n\r\n**Semantics**\r\n\r\nOperator `instanceof` returns `TRUE` if the variable designated by\r\n*expression* in *instanceof-subject* is an object having type\r\n*qualified-name*, is an object whose type is derived from type\r\n*qualified-name*, or is an object whose type implements interface\r\n*qualified-name*. Otherwise, it returns `FALSE`. When the *expression*\r\nform of *instanceof-type-designator* is used, *expression* may be a\r\nstring that contains a class or interface name. Alternatively,\r\n*expression* can designate an instance variable, in which case, operator\r\n`instanceof` returns `TRUE` if the variable designated by the left-hand\r\n*expression* is an instance of the\r\n[`class`](http://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class)\r\ntype, or of a derived type, of the right-hand *expression*.\r\n\r\nIf either *expression* is not an instance, `FALSE` is returned.\r\n\r\nNote: This operator supersedes the library function `is_a` (§xx), which\r\nhas been deprecated. \r\n\r\n**Examples**\r\n\r\n```\r\nclass C1 { ... } $c1 = new C1;\r\nclass C2 { ... } $c2 = new C2;\r\nclass D extends C1 { ... } $d = new D;\r\n$d instanceof C1      // TRUE\r\n$d instanceof C2      // FALSE\r\n$d instanceof D       // TRUE\r\n// -----------------------------------------\r\ninterface I1 { ... }\r\ninterface I2 { ... }\r\nclass E1 implements I1, I2 { ... }\r\n$e1 = new E1;\r\n$e1 instanceof I1       // TRUE\r\n$iName = \"I2\";\r\n$e1 instanceof $iName     // TRUE\r\n```\r\n\r\n##Multiplicative Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>multiplicative-expression:</i>\r\n    <i>instanceof-expression</i>\r\n    <i>multiplicative-expression</i>  *  <i>multiplicative-expression</i>\r\n    <i>multiplicative-expression</i>  /  <i>multiplicative-expression</i>\r\n    <i>multiplicative-expression</i>  %  <i>multiplicative-expression</i>\r\n</pre>\r\n\r\n*instanceof-expression* is defined in [§§](#instanceof-operator). \r\n\r\n**Constraints**\r\n\r\nThe right-hand operand of operator `/` and operator `%` must not be zero.\r\n\r\n**Semantics**\r\n\r\nThe binary `*` operator produces the product of its operands. If either\r\nor both operands have non-numeric types, their values are converted to\r\ntype `int` or `float`, as appropriate. Then if either operand has type\r\n`float`, the other is converted to that type, and the result has type\r\n`float`. Otherwise, both operands have type `int`, in which case, if the\r\nresulting value can be represented in type `int` that is the result type.\r\nOtherwise, the type and value of the result is implementation-defined\r\n([§§](#the-integer-type)).\r\n\r\nDivision by zero results in a diagnostic followed by a `bool` result\r\nhaving value `FALSE`. (The values +/- infinity and NaN cannot be generated\r\nvia this operator; instead, use the predefined constants `INF` and `NAN`.)\r\n\r\nThe binary `/` operator produces the quotient from dividing the left-hand\r\noperand by the right-hand one. If either or both operands have\r\nnon-numeric types, their values are converted to type `int` or `float`, as\r\nappropriate. Then if either operand has type `float`, the other is\r\nconverted to that type, and the result has type `float`. Otherwise, both\r\noperands have type `int`, in which case, if the mathematical value of the\r\ncomputation can be preserved using type `int`, that is the result type;\r\notherwise, the type of the result is `float`.\r\n\r\nThe binary `%` operator produces the remainder from dividing the left-hand\r\noperand by the right-hand one. If the type of both operands is not `int`,\r\ntheir values are converted to that type. The result has type `int`.\r\n\r\nThese operators associate left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n-10 * 100;       // int with value -1000\r\n100 * -3.4e10;   // float with value -3400000000000\r\n\"123\" * \"2e+5;   // float with value 24600000\r\n100 / 100;       // int with value 1\r\n100  / \"123\";    // float with value 0.8130081300813\r\n\"123\" % 100;     // int with value 23\r\n```\r\n\r\n##Additive Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>additive-expression:</i>\r\n    <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  +  <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  -  <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  .  <i>multiplicative-expression</i>\r\n</pre>\r\n\r\n*multiplicative-expression* is defined in [§§](#multiplicative-operators). \r\n\r\n**Constraints**\r\n\r\nIf either operand has array type, the other operand must also have array\r\ntype.\r\n\r\n**Semantics**\r\n\r\nFor non-array operands, the binary `+` operator produces the sum of those\r\noperands, while the binary `- `operator produces the difference of its\r\noperands when subtracting the right-hand operand from the left-hand one.\r\nIf either or both operands have non-array, non-numeric types, their\r\nvalues are converted to type `int` or `float`, as appropriate. Then if\r\neither operand has type `float`, the other is converted to that type, and\r\nthe result has type `float`. Otherwise, both operands have type `int`, in\r\nwhich case, if the resulting value can be represented in type `int` that\r\nis the result type. Otherwise, the type and value of the result is\r\nimplementation-defined ([§§](#the-integer-type)).\r\n\r\nIf both operands have array type, the binary `+` operator produces a new\r\narray that is the union of the two operands. The result is a copy of the\r\nleft-hand array with elements inserted at its end, in order, for each\r\nelement in the right-hand array whose key does not already exist in the\r\nleft-hand array. Any element in the right-hand array whose key exists in\r\nthe left-hand array is ignored.\r\n\r\nThe binary `.` operator creates a string that is the concatenation of the\r\nleft-hand operand and the right-hand operand, in that order. If either\r\nor both operands have types other than `string`, their values are\r\nconverted to type `string`. The result has type `string`.\r\n\r\nThese operators associate left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n-10 + 100;        // int with value 90\r\n100 + -3.4e10;    // float with value -33999999900\r\n\"123\" + \"2e+5\";   // float with value 200123\r\n100 - \"123\";      // int with value 23\r\n-3.4e10 - \"abc\";  // float with value -34000000000\r\n// -----------------------------------------\r\n[1, 5 => FALSE, \"red\"] + [4 => -5, 1.23]; // [1, 5 => FALSE, \"red\", 4 => -5]\r\n  // dupe key 5 (value 1.23) is ignored\r\n[NULL] + [1, 5 => FALSE, \"red\"];          // [NULL, 5 => FALSE, \"red\"]\r\n  // dupe key 0 (value 1) is ignored\r\n[4 => -5, 1.23] + [NULL];                 // [4 => -5, 1.23, 0 => NULL]\r\n// -----------------------------------------\r\n-10 . NAN;        // string with value \"-10NAN\"\r\nINF . \"2e+5\";     // string with value \"INF2e+5\"\r\nTRUE . NULL;      // string with value \"1\"\r\n10 + 5 . 12 . 100 - 50;  // int with value 1512050; ((((10 + 5).12).100)-50)\r\n```\r\n\r\n##Bitwise Shift Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>shift-expression:</i>\r\n    <i>additive-expression</i>\r\n    <i>shift-expression</i>  <<  <i>additive-expression</i>\r\n    <i>shift-expression</i>  >>  <i>additive-expression</i>\r\n</pre>\r\n\r\n*additive-expression* is defined in [§§](#additive-operators). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nGiven the expression `e1 << e2`, the bits in the value of `e1` are shifted\r\nleft by `e2` positions. Bits shifted off the left end are discarded, and\r\nzero bits are shifted on from the right end. Given the expression\r\n`e1 >> e2`, the bits in the value of `e1` are shifted right by\r\n`e2` positions. Bits shifted off the right end are discarded, and the sign\r\nbit is propagated from the left end. \r\n\r\nIf either operand does not have type `int`, its value is first converted\r\nto that type.\r\n\r\nThe type of the result is `int`, and the value of the result is that after\r\nthe shifting is complete. The values of `e1` and `e2` are unchanged.\r\n\r\nIf the shift count is negative, the actual shift applied is `n -\r\n(-shift count % n)`, where `n` is the number of bits per `int`. If the\r\nshift count is greater than the number of bits in an `int`, the actual\r\nshift applied is shift count `% n`.\r\n\r\nThese operators associate left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n1000 >> 2   // 3E8 is shifted right 2 places\r\n-1000 << 2      // FFFFFC18 is shifted left 5 places\r\n123 >> 128      // adjusted shift count = 0\r\n123 << 33   // For a 32-bit int, adjusted shift count = 1; otherwise, 33\r\n```\r\n\r\n##Relational Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>relational-expression:</i>\r\n    <i>shift-expression</i>\r\n    <i>relational-expression</i>  <   <i>shift-expression</i>\r\n    <i>relational-expression</i>  >   <i>shift-expression</i>\r\n    <i>relational-expression</i>  <=  <i>shift-expression</i>\r\n    <i>relational-expression</i>  >=  <i>shift-expression</i>\r\n</pre>\r\n\r\n*shift-expression* is defined in [§§](#bitwise-shift-operators). \r\n\r\n**Semantics**\r\n\r\nOperator `<` represents *less-than*, operator `>` represents\r\n*greater-than*, operator `<=` represents *less-than-or-equal-to*, and\r\noperator `>=` represents *greater-than-or-equal-to*.\r\n\r\nThe type of the result is `bool`. \r\n\r\nThe operands are processed using the following steps, in order:\r\n\r\n1.  If either operand has the value `NULL`, then if the other operand has\r\n    type string, the `NULL` is converted to the empty string (\"\");\r\n    otherwise, the `NULL` is converted to type `bool`.\r\n2.  If both operands are non-numeric strings or one is a numeric string\r\n    and the other a leading-numeric string, the result is the lexical\r\n    comparison of the two operands. Specifically, the strings are\r\n    compared byte-by-byte starting with their first byte. If the two\r\n    bytes compare equal and there are no more bytes in either string,\r\n    the strings are equal and the comparison ends; otherwise, if this is\r\n    the final byte in one string, the shorter string compares less-than\r\n    the longer string and the comparison ends. If the two bytes compare\r\n    unequal, the string having the lower-valued byte compares less-than\r\n    the other string, and the comparison ends. If there are more bytes\r\n    in the strings, the process is repeated for the next pair of bytes.\r\n3.  If either operand has type `bool`, the other operand is converted to\r\n    that type. The result is the logical comparison of the two operands\r\n    after conversion, where `FALSE` is defined to be less than `TRUE`.\r\n4.  If the operands both have arithmetic type, string type, or are\r\n    resources, they are converted to the corresponding arithmetic type\r\n    ([§§](#converting-to-integer-type) and [§§](#converting-to-floating-point-type)). The result is the numerical comparison of the two\r\n    operands after conversion.\r\n5.  If both operands have array type, if the arrays have different\r\n    numbers of elements, the one with the fewer is considered less-than\r\n    the other one—regardless of the keys and values in each—, and the\r\n    comparison ends. For arrays having the same numbers of elements, if\r\n    the next key in the left-hand operand exists in the right-hand\r\n    operand, the corresponding values are compared. If they are unequal,\r\n    the array containing the lesser value is considered less-than the\r\n    other one, and the comparison ends; otherwise, the process is\r\n    repeated with the next element. If the next key in the left-hand\r\n    operand does not exist in the right-hand operand, the arrays cannot\r\n    be compared and `FALSE` is returned. For array comparison, the order\r\n    of insertion of the elements into those arrays is irrelevant.\r\n6.  If only one operand has object type, that compares greater-than any\r\n    other operand type.\r\n7.  If only one operand has array type, that compares greater-than any\r\n    other operand type.\r\n8.  If the operands have different object types, the result is always\r\n    `FALSE`.\r\n9.  If the operands have the same object type, the result is determined\r\n    by comparing the lexically first-declared instance property in each\r\n    object. If those properties have object type, the comparison is\r\n    applied recursively.\r\n\r\nThese operators associate left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n\"\" < \"ab\"       // result has value TRUE\r\n\"a\" > \"A\"       // result has value TRUE\r\n\"a0\" < \"ab\"     // result has value TRUE\r\n\"aA <= \"abc\"    // result has value TRUE\r\n// -----------------------------------------\r\nNULL < [10,2.3] // result has value TRUE\r\nTRUE > -3.4     // result has value FALSE\r\nTRUE < -3.4     // result has value FALSE\r\nTRUE >= -3.4    // result has value TRUE\r\nFALSE < \"abc\"   // result has value TRUE\r\n// -----------------------------------------\r\n10 <= 0         // result has value FALSE\r\n10 >= \"-3.4\"    // result has value TRUE\r\n\"-5.1\" > 0      // result has value FALSE\r\n// -----------------------------------------\r\n[100] < [10,20,30] // result has value TRUE (LHS array is shorter)\r\n[10,20] >= [\"red\"=>0,\"green\"=>0] // result has value FALSE, (key 10 does not exists in RHS)\r\n[\"red\"=>0,\"green\"=>0] >= [\"green\"=>0,\"red\"=>0] // result has value TRUE (order is irrelevant)\r\n```\r\n\r\n##Equality Operators\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>equality-expression:</i>\r\n    <i>relational-expression</i>\r\n    <i>equality-expression</i>  ==  <i>relational-expression</i>\r\n    <i>equality-expression</i>  !=  <i>relational-expression</i>\r\n    <i>equality-expression</i>  <>  <i>relational-expression</i>\r\n    <i>equality-expression</i>  ===  <i>relational-expression</i>\r\n    <i>equality-expression</i>  !==  <i>relational-expression</i>\r\n</pre>\r\n\r\n*relational-expression* is defined in [§§](#relational-operators). \r\n\r\n**Semantics**\r\n\r\nOperator `==` represents *value-equality*, operators `!=` and `<>` are\r\nequivalent and represent *value-inequality*, operator `===` represents\r\n*same-type-and-value-equality*, and operator `!==` represents\r\n*not-same-type-and-value-equality*. However, when comparing two objects,\r\noperator `===` represents *identity* and operator `!==` represents\r\n*non-identity*. Specifically, in this context, these operators check to\r\nsee if the two operands are the exact same object, not two different\r\nobjects of the same type and value.\r\n\r\nThe type of the result is `bool`. \r\n\r\nThe operands are processed using the following steps, in order:\r\n\r\n1.  For operators `==`, `!=`, and `<>`, if either operand has the value\r\n    `NULL`, then if the other operand has type string, the `NULL` is\r\n    converted to the empty string (\"\"); otherwise, the `NULL` is converted\r\n    to type bool.\r\n2.  If both operands are non-numeric strings or one is a numeric string\r\n    and the other a leading-numeric string, the result is the lexical\r\n    comparison of the two operands. Specifically, the strings are\r\n    compared byte-by-byte starting with their first byte. If the two\r\n    bytes compare equal and there are no more bytes in either string,\r\n    the strings are equal and the comparison ends; otherwise, if this is\r\n    the final byte in one string, the shorter string compares less-than\r\n    the longer string and the comparison ends. If the two bytes compare\r\n    unequal, the string having the lower-valued byte compares less-than\r\n    the other string, and the comparison ends. If there are more bytes\r\n    in the strings, the process is repeated for the next pair of bytes.\r\n3.  If either operand has type bool, for operators `==`, `!=`, and `<>`, the\r\n    other operand is converted to that type. The result is the logical\r\n    comparison of the two operands after any conversion, where `FALSE` is\r\n    defined to be less than `TRUE`.\r\n4.  If the operands both have arithmetic type, string type, or are\r\n    resources, for operators `==`, `!=`, and `<>`, they are converted to the\r\n    corresponding arithmetic type ([§§](#converting-to-integer-type) and [§§](#converting-to-floating-point-type)). The result is the\r\n    numerical comparison of the two operands after any conversion.\r\n5.  If both operands have array type, for operators `==`, `!=`, and `<>`,\r\n    the arrays are equal if they have the same set of key/value pairs,\r\n    after element type conversion, without regard to the order of\r\n    insertion of their elements. For operators `===` and `!==` the arrays\r\n    are equal if they have the same set of key/value pairs, the\r\n    corresponding values have the same type, and the order of insertion\r\n    of their elements are the same.\r\n6.  If only one operand has object type, the two operands are never\r\n    equal.\r\n7.  If only one operand has array type, the two operands are never\r\n    equal.\r\n8.  If the operands have different object types, the two operands are\r\n    never equal.\r\n9.  If the operands have the same object type, the two operands are\r\n    equal if the instance properties in each object have the same\r\n    values. Otherwise, the objects are unequal. The instance properties\r\n    are compared, one at a time, in the lexical order of their\r\n    declaration. For properties that have object type, the comparison is\r\n    applied recursively.\r\n\r\nThese operators associate left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n\"a\" <> \"aa\" // result has value TRUE\r\n// -----------------------------------------\r\nNULL == 0   // result has value TRUE\r\nNULL === 0  // result has value FALSE\r\nTRUE != 100  // result has value FALSE\r\nTRUE !== 100  // result has value TRUE\r\n// -----------------------------------------\r\n\"10\" != 10  // result has value FALSE\r\n\"10\" !== 10 // result has value TRUE\r\n// -----------------------------------------\r\n[10,20] == [10,20.0]  // result has value TRUE\r\n[10,20] === [10,20.0] // result has value FALSE\r\n[\"red\"=>0,\"green\"=>0] === [\"red\"=>0,\"green\"=>0] // result has value TRUE\r\n[\"red\"=>0,\"green\"=>0] === [\"green\"=>0,\"red\"=>0] // result has value FALSE\r\n```\r\n\r\n## Bitwise AND Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>bitwise-AND-expression:</i>\r\n    <i>equality-expression</i>\r\n    <i>bit-wise-AND-expression</i>  &  <i>equality-expression</i>\r\n</pre>\r\n\r\n*equality-expression* is defined in [§§](#equality-operators). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type `int`, its value is first converted\r\nto that type.\r\n\r\nThe result of this operator is the bitwise-AND of the two operands, and\r\nthe type of that result is `int`.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n0b101111 & 0b101          // 0b101\r\n$lLetter = 0x73;          // letter 's'\r\n$uLetter = $lLetter & ~0x20;  // clear the 6th bit to make letter 'S'\r\n```\r\n\r\n##Bitwise Exclusive OR Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>bitwise-exc-OR-expression:</i>\r\n    <i>bitwise-AND-expression</i>\r\n    <i>bitwise-exc-OR-expression</i>  ^   <i>bitwise-AND-expression</i>\r\n</pre>\r\n\r\n*bitwise-AND-expression* is defined in [§§](#bitwise-and-operator). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type `int`, its value is first converted\r\nto that type.\r\n\r\nThe result of this operator is the bitwise exclusive-OR of the two\r\noperands, and the type of that result is `int`.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n0b101111 | 0b101    // 0b101010\r\n$v1 = 1234; $v2 = -987; // swap two integers having different values\r\n$v1 = $v1 ^ $v2;\r\n$v2 = $v1 ^ $v2;\r\n$v1 = $v1 ^ $v2;    // $v1 is now -987, and $v2 is now 1234\r\n```\r\n\r\n##Bitwise Inclusive OR Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>bitwise-inc-OR-expression:</i>\r\n    <i>bitwise-exc-OR-expression</i>\r\n    <i>bitwise-inc-OR-expression</i>  |  <i>bitwise-exc-OR-expression</i>\r\n</pre>\r\n\r\n*bitwise-exc-OR-expression* is defined in [§§](#bitwise-exclusive-or-operator). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type `int`, its value is first converted\r\nto that type.\r\n\r\nThe result of this operator is the bitwise inclusive-OR of the two\r\noperands, and the type of that result is `int`.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\n0b101111 | 0b101      // 0b101111\r\n$uLetter = 0x41;      // letter 'A'\r\n$lLetter = $upCaseLetter | 0x20;  // set the 6th bit to make letter 'a'\r\n```\r\n\r\n##Logical AND Operator (form 1)\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>logical-AND-expression-1:</i>\r\n    <i>bitwise-incl-OR-expression</i>\r\n    <i>logical-AND-expression-1</i>  &&  <i>bitwise-inc-OR-expression</i>\r\n</pre>\r\n\r\n*bitwise-incl-OR-expression* is defined in [§§](#bitwise-inclusive-or-operator). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type bool, its value is first converted\r\nto that type.\r\n\r\nGiven the expression `e1 && e2, e1` is evaluated first. If `e1` is `FALSE`, `e2` is not evaluated, and the result has type `bool`, value `FALSE`. Otherwise, `e2` is evaluated. If `e2` is `FALSE`, the result has type bool, value `FALSE`; otherwise, it has type `bool`, value `TRUE`. There is a sequence point after the evaluation of `e1`.\r\n\r\nThis operator associates left-to-right.\r\n\r\nExcept for the difference in precedence, operator `&&` has exactly the\r\nsame semantics as operator `and` ([§§](#logical-and-operator-form-2)).\r\n\r\n**Examples**\r\n\r\n```\r\nif ($month > 1 && $month <= 12) ...\r\n```\r\n\r\n##Logical Inclusive OR Operator (form 1)\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>logical-inc-OR-expression-1:</i>\r\n    <i>logical-AND-expression-1</i>\r\n    <i>logical-inc-OR-expression-1</i>  ||  <i>logical-AND-expression-1</i>\r\n</pre>\r\n\r\n*logical-exc-OR-expression* is defined in [§§](#bitwise-exclusive-or-operator). \r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type bool, its value is first converted\r\nto that type.\r\n\r\nGiven the expression `e1 || e2`, `e1` is evaluated first. If `e1` is TRUE, `e2` is not evaluated, and the result has type `bool`, value `TRUE`. Otherwise, `e2` is evaluated. If `e2` is `TRUE`, the result has type `bool`, value `TRUE`; otherwise, it has type `bool`, value `FALSE`. There is a sequence point after the evaluation of `e1`.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\nif ($month < 1 || $month > 12) ...\r\n```\r\n\r\n##Conditional Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>conditional-expression:</i>\r\n    <i>logical-inc-OR-expression-1</i>\r\n    <i>logical-inc-OR-expression-1</i>  ?  <i>expression<sub>opt</sub></i>  :  <i>conditional-expression</i>\r\n</pre>\r\n\r\n*logical-OR-expression* is defined in [§§](#logical-inclusive-or-operator-form-1); and *expression* is\r\ndefined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nThe first operand must have scalar type.\r\n\r\n**Semantics**\r\n\r\nGiven the expression `e1 ? e2 : e3`, if `e1` is `TRUE`, then and only then is `e2` evaluated, and the result and its type become the result and type of\r\nthe whole expression. Otherwise, then and only then is `e3` evaluated, and\r\nthe result and its type become the result and type of the whole\r\nexpression. There is a sequence point after the evaluation of `e1`. If `e2`\r\nis omitted, the result and type of the whole expression is the value and\r\ntype of `e1` when it was tested.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\nfor ($i = -5; $i <= 5; ++$i)\r\n  echo \"$i is \".(($i & 1 == TRUE) ? \"odd\\n\" : \"even\\n\");\r\n// -----------------------------------------\r\n$a = 10 ? : \"Hello\";  // result is int with value 10\r\n$a = 0 ? : \"Hello\";     // result is string with value \"Hello\"\r\n$i = PHP_INT_MAX;\r\n$a = $i++ ? : \"red\";  // result is int with value 2147483647 (on a 32-bit \r\n                // system) even though $i is now the float 2147483648.0\r\n// -----------------------------------------\r\n$i++ ? f($i) : f(++$i); // the sequence point makes this well-defined\r\n// -----------------------------------------\r\nfunction factorial($int)\r\n{\r\n  return ($int > 1) ? $int * factorial($int - 1) : $int;\r\n}\r\n```\r\n\r\n##Assignment Operators\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>assignment-expression:</i>\r\n    <i>conditional-expression</i>\r\n    <i>simple-assignment-expression</i>\r\n    <i>byref-assignment-expression</i>\r\n    <i>compound-assignment-expression</i>\r\n</pre>\r\n\r\n*conditional-expression* is defined in [§§](#conditional-operator);\r\n*simple-assignment-expression* is defined in [§§](#simple-assignment);\r\n*byref-assignment-expression* is defined in [§§](#byref-assignment); and\r\n*compound-assignment-expression* is defined in [§§](#compound-assignment).\r\n\r\n**Constraints**\r\n\r\nThe left-hand operand of an assignment operator must be a modiﬁable\r\nlvalue.\r\n\r\n**Semantics**\r\n\r\nThese operators associate right-to-left.\r\n\r\n###Simple Assignment\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>simple-assignment-expression:</i>\r\n    <i>unary-expression</i>  =  <i>assignment-expression</i>\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14); *assignment-expression* is\r\ndefined in [§§](#general-15).\r\n\r\n**Constraints**\r\n\r\nIf the location designated by the left-hand operand is a string element,\r\nthe key must not be a negative-valued `int`, and the right-hand operand\r\nmust have type `string`.\r\n\r\n**Semantics**\r\n\r\nIf *assignment-expression* designates an expression having value type,\r\nsee [§§](#value-assignment-of-object-and-resource-types-to-a-local-variable). If *assignment-expression*\r\ndesignates an expression having handle type, see [§§](#byref-assignment-for-scalar-types-with-local-variables). If\r\n*assignment-expression* designates an expression having array type, see\r\n[§§](#value-assignment-of-array-types-to-local-variables).\r\n\r\nThe type and value of the result is the type and value of the left-hand\r\noperand after the store (if any [see below]) has taken place. The result\r\nis not an lvalue.\r\n\r\nIf the location designated by the left-hand operand is a non-existent\r\narray element, a new element is inserted with the designated key and\r\nwith a value being that of the right-hand operand.\r\n\r\nIf the location designated by the left-hand operand is a string element,\r\nthen if the key is a negative-valued `int`, there is no side effect.\r\nOtherwise, if the key is a non-negative-valued `int`, the left-most single\r\ncharacter from the right-hand operand is stored at the designated\r\nlocation; all other characters in the right-hand operand string are\r\nignored.  If the designated location is beyond the end of the\r\ndestination string, that string is extended to the new length with\r\nspaces (U+0020) added as padding beyond the old end and before the newly\r\nadded character. If the right-hand operand is an empty string, the null\r\ncharacter \\\\0 (U+0000) is stored.\r\n\r\n**Examples**\r\n\r\n```\r\n$a = $b = 10    // equivalent to $a = ($b = 10)\r\n$v = array(10, 20, 30);\r\n$v[1] = 1.234;    // change the value (and type) of an existing element\r\n$v[-10] = 19;   // insert a new element with int key -10\r\n$v[\"red\"] = TRUE; // insert a new element with string key \"red\"\r\n$s = \"red\";\r\n$s[1] = \"X\";    // OK; \"e\" -> \"X\"\r\n$s[-5] = \"Y\";   // warning; string unchanged\r\n$s[5] = \"Z\";    // extends string with \"Z\", padding with spaces in [3]-[5]\r\n$s = \"red\";\r\n$s[0] = \"DEF\";    // \"r\" -> \"D\"; only 1 char changed; \"EF\" ignored\r\n$s[0] = \"\";       // \"D\" -> \"\\0\"\r\n$s[\"zz\"] = \"Q\";   // warning; defaults to [0], and \"Q\" is stored there\r\n// -----------------------------------------\r\nclass C { ... }\r\n$a = new C; // make $a point to the allocated object\r\n```\r\n\r\n###byRef Assignment\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>byref-assignment-expression:</i>\r\n    <i>unary-expression</i>  =  &  <i>assignment-expression</i>\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14); *assignment-expression* is\r\ndefined in [§§](#general-15).\r\n\r\n**Constraints**\r\n\r\n*unary-expression* must be a variable name.\r\n\r\n*assignment-expression* must be an lvalue, a call to a function that\r\nreturns a value byRef, or a *new-expression* (see comment below\r\nregarding this).\r\n\r\n**Semantics**\r\n\r\n*unary-expression* becomes an alias for *assignment-expression*. If\r\n*assignment-expression* designates an expression having value type, see\r\n[§§](#value-assignment-of-object-and-resource-types-to-a-local-variable). If *assignment-expression* designates an expression having\r\nhandle type, see [§§](#byref-assignment-of-non-scalar-types-with-local-variables). If *assignment-expression* designates an\r\nexpression having array type, see [§§](#deferred-array-copying).\r\n\r\n**Examples**\r\n\r\n```\r\n$a = 10;\r\n$b = &$a;   // make $b an alias of $a\r\n++$a;       // increment $a/$b to 11\r\n$b = -12;   // sets $a/$b to -12\r\n$a = \"abc\";     // sets $a/$b to \"abc\"\r\nunset($b);      // removes $b's alias to $a\r\n// -----------------------------------------\r\nfunction &g2() { $t = \"xxx\"; return $t; } // return byRef\r\n$b = &g2();     // make $b an alias to \"xxx\"\r\n```\r\n\r\n##Compound Assignment\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>compound-assignment-expression:</i>\r\n    <i>unary-expression   compound-assignment-operator   assignment-expression</i>\r\n\r\n  <i>compound-assignment-operator: one of</i>\r\n    **=  *=  /=  %=  +=  -=  .=  <<=  >>=  &=  ^=  |=\r\n</pre>\r\n\r\n*unary-expression* is defined in [§§](#general-14); *assignment-expression* is\r\ndefined in [§§](#general-15).\r\n\r\n**Constraints**\r\n\r\nAny constraints that apply to the corresponding postfix or binary\r\noperator apply to the compound-assignment form as well.\r\n\r\n**Semantics**\r\n\r\nThe expression `e1 op= e2` is equivalent to `e1 = e1 op (e2)`, except\r\nthat `e1` is evaluated once only.\r\n\r\n**Examples**\r\n\r\n```\r\n$v = 10;\r\n$v += 20;   // $v = 30\r\n$v -= 5;    // $v = 25\r\n$v .= 123.45  // $v = \"25123.45\"\r\n$a = [100, 200, 300];\r\n$i = 1;\r\n$a[$i++] += 50; // $a[1] = 250, $i → 2\r\n```\r\n\r\n##Logical AND Operator (form 2)\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>logical-AND-expression-2:</i>\r\n    <i>assignment-expression</i>\r\n    <i>logical-AND-expression-2</i>  and  <i>assignment-expression</i>\r\n</pre>\r\n\r\n*assignment-expression* is defined in [§§](#general-15).\r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nExcept for the difference in precedence, operator and has exactly the\r\nsame semantics as operator `&&` ([§§](#logical-and-operator-form-1)).\r\n\r\n##Logical Exclusive OR Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>logical-exc-OR-expression:</i>\r\n    <i>logical-AND-expression-2</i>\r\n    <i>logical-exc-OR-expression</i>  xor  <i>logical-AND-expression-2</i>\r\n</pre>\r\n\r\n*logical-AND-expression* is defined in [§§](#logical-and-operator-form-2).\r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nIf either operand does not have type `bool`, its value is first converted\r\nto that type.\r\n\r\nGiven the expression `e1 xor e2`, `e1` is evaluated first, then `e2`. If\r\neither `e1` or `e2` is `TRUE`, but not both, the result has type `bool`, value\r\n`TRUE`. Otherwise, the result has type `bool`, value `FALSE`. There is a\r\nsequence point after the evaluation of `e1`.\r\n\r\nThis operator associates left-to-right.\r\n\r\n**Examples**\r\n\r\n```\r\nf($i++) XOR g($i) // the sequence point makes this well-defined\r\n```\r\n\r\n##Logical Inclusive OR Operator (form 2)\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>logical-inc-OR-expression-2:</i>\r\n    <i>logical-exc-OR-expression</i>\r\n    <i>logical-inc-OR-expression-2</i>  or  <i>logical-exc-OR-expression</i>\r\n</pre>\r\n\r\n*logical-exc-OR-expression* is defined in [§§](#logical-exclusive-or-operator).\r\n\r\n**Constraints**\r\n\r\nEach of the operands must have scalar type.\r\n\r\n**Semantics**\r\n\r\nExcept for the difference in precedence, operator and has exactly the\r\nsame semantics as operator `||` ([§§](#logical-inclusive-or-operator-form-1)).\r\n\r\n## `yield` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>yield-expression:</i>\r\n    <i>logical-inc-OR-expression-2</i>\r\n    yield  <i>array-element-initializer</i>\r\n</pre>\r\n\r\n*logical-inc-OR-expression* is defined in [§§](#logical-inclusive-or-operator-form-2);\r\n*array-element-initializer* is defined in [§§](#array-creation-operator).\r\n\r\n**Semantics**\r\n\r\nAny function containing a *yield-expression* is a *generator function*.\r\nA generator function generates a collection of zero or more key/value\r\npairs where each pair represents the next in some series. For example, a\r\ngenerator might *yield* random numbers or the series of Fibonacci\r\nnumbers. When a generator function is called explicitly, it returns an\r\nobject of type `Generator` ([§§](#class-generator)), which implements the interface\r\n`Iterator` ([§§](#interface-iterator)). As such, this allows that object to be iterated over\r\nusing the `foreach` statement ([§§](#the-foreach-statement)). During each iteration, the Engine\r\ncalls the generator function implicitly to get the next key/value pair.\r\nThen the Engine saves the state of the generator for subsequent\r\nkey/value pair requests.\r\n\r\nThis operator produces the result `NULL` unless the method\r\n`Generator->send` ([§§](#class-generator)) was called to provide a result value. This\r\noperator has the side effect of generating the next value in the\r\ncollection.\r\n\r\nBefore being used, an *element-key* must have, or be converted to, type\r\n`int` or `string`. Keys with `float` or `bool` values, or strings whose contents\r\nmatch exactly the pattern of *decimal-literal* ([§§](#integer-literals)), are\r\nconverted to `int` ([§§](#converting-to-integer-type)). Values of all other key types are converted to\r\n`string` ([§§](#converting-to-string-type)).\r\n\r\nIf *element-key* is omitted from an *array-element-initializer*, an\r\nelement key of type `int` is associated with the corresponding\r\n*element-value*. The key associated is one more than the previously\r\nassigned int key for this collection. However, if this is the first\r\nelement in this collection with an `int` key, key zero is used. If\r\n*element-key* is provided, it is associated with the corresponding\r\n*element-value*. The resulting key/value pair is made available by\r\n`yield`.\r\n\r\nIf *array-element-initializer* is omitted, default int-key assignment is\r\nused and each value is `NULL`.\r\n\r\nIf the generator function definition declares that it returns byRef,\r\neach value in a key/value pair is yielded byRef.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction getTextFileLines($filename)\r\n{\r\n  $infile = fopen($filename, 'r');\r\n  if ($infile == FALSE) { /* deal with the file-open failure */ }\r\n\r\n  try\r\n  {\r\n    while ($textLine = fgets($infile))  // while not EOF\r\n    {\r\n      $textLine = rtrim($textLine, \"\\r\\n\"); // strip off terminator\r\n      yield $textLine;\r\n    }\r\n  }\r\n  finally\r\n  {\r\n    fclose($infile);\r\n  }\r\n}\r\nforeach (getTextFileLines(\"Testfile.txt\") as $line) { /* process each line */ }\r\n// -----------------------------------------\r\nfunction series($start, $end, $keyPrefix = \"\")\r\n{\r\n  for ($i = $start; $i <= $end; ++$i)\r\n  {\r\n    yield $keyPrefix . $i => $i;  // generate a key/value pair\r\n  }\r\n}\r\nforeach (series(1, 5, \"X\") as $key => $val) { /* process each key/val pair */ }\r\n```\r\n\r\n##Script Inclusion Operators\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>expression:</i>\r\n    <i>yield-expression</i>\r\n    <i>include-expression</i>\r\n    <i>include-once-expression</i>\r\n    <i>require-expression</i>\r\n    <i>require-once-expression</i>\r\n</pre>\r\n\r\n*yield-expression* is described in [§§](#yield-operator); *include-expression* is\r\ndescribed in [§§](#the-include-operator); *include-once-expression* is described in\r\n[§§](#the-include_once-operator); *require-expression* is described in [§§](#the-require-operator); and\r\n*require-once-expression* is described in [§§](#the-require_once-operator).\r\n\r\n**Semantics:**\r\n\r\nWhen creating large applications or building component libraries, it is\r\nuseful to be able to break up the source code into small, manageable\r\npieces each of which performs some specific task, and which can be\r\nshared somehow, and tested, maintained, and deployed individually. For\r\nexample, a programmer might define a series of useful constants and use\r\nthem in numerous and possibly unrelated applications. Likewise, a set of\r\nclass definitions can be shared among numerous applications needing to\r\ncreate objects of those types.\r\n\r\nAn *include file* is a script that is suitable for *inclusion* by\r\nanother script. The script doing the including is the *including file*,\r\nwhile the one being included is the *included file*. A script can be an\r\nincluding file and an included file, either, or neither.\r\n\r\nUsing the series-of-constants example, an include file called\r\n`Positions.php` might define the constants `TOP`, `BOTTOM`, `LEFT`, and `RIGHT`,\r\nin their own namespace ([§§](#general-28)), Positions. Using the set-of-classes\r\nexample, to support two-dimensional geometry applications, an include\r\nfile called `Point.php` might define the class `Point`. An include file\r\ncalled `Line.php` might define the class Line (where a `Line` is represented\r\nas a pair of Points).An include file, called `Circle.php` might define the\r\nclass `Circle` (where a `Circle` is represented as a `Point` for the origin,\r\nand a radius).\r\n\r\nIf a number of the scripts making up an application each use one or more\r\nof the Position constants, they can each include the corresponding\r\ninclude file via the `include` operator ([§§](#the-include-operator)). However, most include\r\nfiles behave the same way each time they are included, so it is\r\ngenerally a waste of time including the same include file more than once\r\ninto the same scope. In the case of the geometry example, any attempt to\r\ninclude the same include file more than once will result in a fatal\r\n\"attempted class type redefinition\" error. However, this can be avoided\r\nby using the `include_once` operator ([§§](#the-include_once-operator)) instead.\r\n\r\nThe `require` operator ([§§](#the-require-operator)) is a variant of the `include` operator,\r\nand the `require_once` operator ([§§](#the-require_once-operator)) is a variant of the\r\n`include_once` operator.\r\n\r\nIt is important to understand that unlike the C/C++ (or similar)\r\npreprocessor, script inclusion in PHP is not a text substitution\r\nprocess. That is, the contents of an included file are not treated as if\r\nthey directly replaced the inclusion operation source in the including\r\nfile.\r\n\r\nAn inclusion expression can be written to look like a function call;\r\nhowever, that is not the case, even though an included file can return a\r\nvalue to its including file.\r\n\r\nThe name used to specify an include file may contain an absolute or\r\nrelative path. In the latter case, an implementation may use the\r\nconfiguration directive\r\n[`include_path`](http://www.php.net/manual/en/ini.core.php#ini.include-path)\r\n(§xx) to resolve the include file's location.\r\n\r\n###The `include` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>include-expression:</i>\r\n    include  (  <i>include-filename</i>  )\r\n    include  <i>include-filename</i>\r\n\r\n  <i>include-filename:</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).   \r\n\r\n**Constraints:**\r\n\r\n*expression* must be a string that designates a file that exists, is\r\naccessible, and whose format is suitable for inclusion (that is, starts\r\nwith a PHP start-tag, and optionally ends with a PHP end-tag). However,\r\nif the designated file is not accessible, execution may continue.\r\n\r\n**Semantics:**\r\n\r\nWhen an included file is opened, parsing immediately drops out of PHP\r\nmode and into HTML mode at the beginning, and switches back again when\r\nthe end of the included file is reached.\r\n\r\nVariables defined in an included file take on scope of the source line\r\non which the inclusion occurs in the including file. However, functions\r\nand classes defined in the included file are given global scope.\r\n\r\nIf inclusion occurs inside a function definition within the including\r\nfile, the complete contents of the included file are treated as though\r\nit were defined inside that function.\r\n\r\nOperator `include` has a side effect of including the designated include\r\nfile. The result produced by this operator is one of the following:\r\n`FALSE`, which indicates the inclusion attempt failed; the `int` 1, which\r\nindicates the default value for inclusion attempt succeeded; or some\r\nother value, as returned from the included file ([§§](#the-return-statement)). \r\n\r\nThe library function `get_included_files` (§xx) provides the names of\r\nall files included or required.\r\n\r\n**Examples:**\r\n\r\n```\r\n$fileName = 'limits' . '.php'; include $fileName;\r\n$inc = include('limits.php');\r\nIf ((include 'Positions.php') == 1) ...\r\n```\r\n\r\n###The `include_once` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>include-once-expression:</i>\r\n    include_once  (  <i>include-filename</i>  )\r\n    include_once  <i>include-filename</i>\r\n</pre>\r\n\r\n*include-filename* is defined in [§§](#the-include-operator).   \r\n\r\n**Semantics:**\r\n\r\nThis operator is identical to operator `include` ([§§](#the-include-operator)) except that in\r\nthe case of `include_once`, the include file is included once only during\r\nprogram execution.\r\n\r\nOnce an include file has been included, a subsequent use of\r\n`include_once` on that include file results in a return value of `TRUE`.\r\n\r\n**Examples:**\r\n\r\nPoint.php:\r\n\r\n```\r\n\\\\ Point.php:\r\n<?php ...\r\nclass Point { ... }\r\n\r\n\\\\ Circle.php:\r\n<?php ...\r\ninclude_once 'Point.php';\r\nclass Circle { /* uses Point somehow */ }\r\n\r\n\\\\ MyApp.php\r\ninclude_once 'Point.php';   // Point.php included directly\r\ninclude_once 'Circle.php';    // Point.php now not included indirectly\r\n$p1 = new Point(10, 20);\r\n$c1 = new Circle(9, 7, 2.4);\r\n```\r\n\r\n###The `require` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>require-expression:</i>\r\n    require  (  <i>include-filename</i>  )\r\n    require  <i>include-filename</i>\r\n</pre>\r\n\r\n*include-filename* is defined in [§§](#the-include-operator).   \r\n\r\n**Semantics:**\r\n\r\nThis operator is identical to operator `include` ([§§](#the-include-operator)) except that in\r\nthe case of `require`, failure to find/open the designated include file\r\nterminates program execution.\r\n\r\nThe library function `get_included_files` (§xx) provides the names of\r\nall files included or required.\r\n\r\n###The `require_once` Operator\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>require-once-expression:</i>\r\n    require_once  (  <i>include-filename</i>  )\r\n    require_once  <i>include-filename</i>\r\n</pre>\r\n\r\n*include-filename* is defined in [§§](#the-include-operator).   \r\n\r\n**Semantics:**\r\n\r\nThis operator is identical to operator `require` ([§§](#the-require-operator)) except that in\r\nthe case of `require_once`, the include file is included once only during\r\nprogram execution.\r\n\r\nOnce an include file has been included, a subsequent use of\r\n`require_once` on that include file results in a return value of TRUE.\r\n\r\n##Constant Expressions\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>constant-expression:</i>\r\n    <i>array-creation-expression</i>\r\n    <i>const-expression</i>\r\n\r\n  <i>const-expression:</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*array-creation-expression* is defined in [§§](#array-creation-operator) and *expression* is\r\ndefined in [§§](#general-16).   \r\n\r\n**Constraints:**\r\n\r\nAll of the *element-key* and *element-value* *expression*s in\r\n*array-creation-expression* ([§§](#array-creation-operator)) must be literals.\r\n\r\n*expression* must have a scalar type, and be a literal or the name of an\r\nexisting c-constant ([§§](#general-4)), that is currently in scope.\r\n\r\n**Semantics:**\r\n\r\nA *const-expression* is the value of a c-constant. A *const-expression*\r\nis required in several contexts, such as in initializer values in a\r\n*const-declaration* ([§§](#constants-2)) and default initial values in a function\r\ndefinition ([§§](#function-definitions)).\r\n\r\nAn initializer in a *property-declaration* ([§§](#properties)) is less restrictive\r\nthan one in a *const-declaration*.\r\n\r\n\r\n\r\n#Statements\r\n\r\n##General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n\r\n  <i>statement:</i>\r\n    <i>compound-statement</i>\r\n\t<i>labeled-statement</i>\r\n    <i>expression-statement</i>\r\n    <i>selection-statement</i>\r\n    <i>iteration-statement</i>\r\n    <i>jump-statement</i>\r\n    <i>declare-statement</i>\r\n    <i>const-declaration</i>\r\n    <i>function-deﬁnition</i>\r\n    <i>class-declaration</i>\r\n    <i>interface-declaration</i>\r\n    <i>trait-declaration</i>\r\n    <i>namespace-definition</i>\r\n    <i>namespace-use-declaration</i>\r\n    <i>global-declaration</i>\r\n    <i>function-static-declaration</i>\r\n</pre>\r\n\r\n*compound-statement* is defined in [§§](#compound-statements); *labeled-statement* is defined\r\nin [§§](#labeled-statements); *expression-statement* is defined in [§§](#expression-statements);\r\n*selection-statement* is defined in [§§](#general-18); *iteration-statement* is\r\ndefined in [§§](#general-19); *jump-statement* is defined in [§§](#general-20);\r\n*declare-statement* is defined in [§§](#the-declare-statement); *const-declaration* is defined\r\nin [§§](#constants-2); *function-deﬁnition* is defined in [§§](#function-definitions); *class-declaration*\r\nis defined in [§§](#class-declarations); *interface-declaration* is defined in [§§](#interface-declarations);\r\n*trait-declaration* is defined in [§§](#trait-declarations); *namespace-definition* is\r\ndefined in [§§](#defining-namespaces); *namespace-use-declaration* is defined in [§§](#namespace-use-declarations);\r\n*global-declaration* is defined in [§§](#global-variables); and\r\n*function-static-declaration* is defined in [§§](#function-statics). \r\n\r\n##Compound Statements\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>compound-statement:</i>\r\n    {   <i>statement-list<sub>opt</sub></i>  }\r\n\r\n  <i>statement-list:</i>\r\n    <i>statement</i>\r\n    <i>statement-list   statement</i>\r\n</pre>\r\n\r\n*statement* is defined in [§§](#general-17).\r\n\r\n**Semantics**\r\n\r\nA *compound statement* allows a group of zero of more statements to be\r\ntreated syntactically as a single statement. A compound statement is\r\noften referred to as a *block*.\r\n\r\n**Examples**\r\n\r\n```\r\nif (condition)\r\n{\t// braces are needed as the true path has more than one statement\r\n\t// statement-1\r\n\t// statement-2\r\n}\r\nelse\r\n{\t// braces are optional as the false path has only one statement\r\n\t// statement-3\r\n}\r\n// -----------------------------------------\r\nwhile (condition)\r\n{\t// the empty block is equivalent to a null statement\r\n}\r\n```\r\n\r\n##Labeled Statements\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>labeled-statement:</i>\r\n    <i>named-label</i>\r\n    <i>case-label</i>\r\n    <i>default-label</i>\r\n\r\n  <i>named-label:</i>\r\n    <i>name</i>  :  <i>statement</i>\r\n\r\n  <i>case-label:</i>\r\n    <i>case   expression   case-default-label-terminator   statement</i>\r\n\r\n  <i>default-label:</i>\r\n    <i>default  case-default-label-terminator   statement</i>\r\n\r\n  <i>case-default-label-terminator:</i>\r\n    :\r\n    ;\r\n</pre>\r\n\r\n*name* is defined in [§§](#names); *statement* is defined in [§§](#general-17); and\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nA named label must only be used as the target of a `goto` statement\r\n([§§](#the-goto-statement)). \r\n\r\nNamed labels must be unique within a function.\r\n\r\nA case and default label must only occur inside a `switch` statement\r\n([§§](#the-switch-statement)).\r\n\r\n**Semantics**\r\n\r\nAny statement may be preceded by a token sequence that declares a name\r\nas a label name. The presence of a label does not alter the ﬂow of\r\nexecution.\r\n\r\n##Expression Statements\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n   <i>expression-statement:</i>\r\n     <i>expression<sub>opt</sub></i>  ;\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16).\r\n\r\n**Semantics**\r\n\r\nIf present, *expression* is evaluated for its side effects, if any, and\r\nany resulting value is discarded. If *expression* is omitted, the\r\nstatement is a *null statement*, which has no effect on execution.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 10;\t// $i is assigned the value 10; result (10) is discarded\r\n++$i;\t// $i is incremented; result (11) is discarded\r\n$i++;\t// $i is incremented; result (11) is discarded\r\nDoIt();\t// function DoIt is called; result (return value) is discarded\r\n// -----------------------------------------\r\n$i;\t\t// no side effects, result is discarded. Vacuous but permitted\r\n123;\t// likewise for this one and the two statements following\r\n34.5 * 12.6 + 11.987;\r\nTRUE;\r\n// -----------------------------------------\r\nfunction findValue($table, $value)  // where $table is 2x3 array\r\n{\r\n\tfor ($row = 0; $row <= 1; ++$row)\r\n\t{\r\n\t\tfor ($colm = 0; $colm <= 2; ++$colm)\r\n\t\t{\r\n\t\t\tif ($table[$row][$colm] == $value)\r\n\t\t\t{\r\n\t\t\t\t// ...\r\n\t\t\t\tgoto done;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// ...\r\ndone:\r\n\t;     // null statement needed as a label must precede a statement\r\n}\r\n```\r\n\r\n##Selection Statements\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>selection-statement:</i>\r\n    <i>if-statement</i>\r\n    <i>switch-statement</i>\r\n</pre>\r\n\r\n*if-statement* is defined in [§§](#the-if-statement) and *switch-statement* is defined\r\nin [§§](#the-switch-statement).\r\n\r\n**Semantics**\r\n\r\nBased on the value of a controlling expression, a selection statement\r\nselects among a set of statements.\r\n\r\n###The `if` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>if-statement:</i>\r\n    if   (   <i>expression</i>   )   <i>statement   elseif-clauses-1opt   else-clause-1opt</i>\r\n    if   (   <i>expression   )   :   <i>statement-list   elseif-clauses-2opt   else-clause-2opt</i>   endif   ;\r\n\r\n  <i>elseif-clauses-1:</i>\r\n    <i>elseif-clause-1</i>\r\n    <i>elseif-clauses-1   elseif-clause-1</i>\r\n\r\n  <i>elseif-clause-1:</i>\r\n    elseif   (   <i>expression</i>   )   <i>statement</i>\r\n \r\n  <i>else-clause-1:</i>\r\n    else   <i>statement</i>\r\n\r\n  <i>elseif-clauses-2:</i>\r\n    <i>elseif-clause-2</i>\r\n    <i>elseif-clauses-2   elseif-clause-2</i>\r\n\r\n  <i>elseif-clause-2:</i>\r\n    elseif   (   <i>expression</i>   )   :   <i>statement-list</i>\r\n  \r\n  <i>else-clause-2:</i>\r\n    else   :   <i>statement-list</i>\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16); *statement* is defined in [§§](#general-17);\r\nand *statement-list* is defined in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe controlling expression *expression* must have type `bool` or be\r\nimplicitly convertible to that type.\r\n\r\n**Semantics**\r\n\r\nThe two forms of the `if` statement are equivalent; they simply provide\r\nalternate styles.\r\n\r\nIf *expression* tests `TRUE`, the *statement* that follows immediately is\r\nexecuted. Otherwise, if an `elseif` clause is present the *statement*\r\nimmediately following the `elseif` is executed. Otherwise, any other\r\n`elseif` *expression*s are evaluated. If none of those tests `TRUE`, if an\r\n`else` clause is present the *statement* immediately following the `else` is\r\nexecuted.\r\n\r\nAn `else` clause is associated with the lexically nearest preceding `if` or\r\n`elseif` that is permitted by the syntax.\r\n\r\n**Examples**\r\n```\r\nif ($count > 0)\r\n{\r\n\t...\r\n\t...\r\n\t...\r\n}\r\n// -----------------------------------------\r\ngoto label1;\r\necho \"Unreachable code\\n\";\r\n\r\nif ($a)\r\n{\r\nlabel1:\r\n\t...\r\n}\r\nelse\r\n{\r\n\t...\r\n}\r\n// -----------------------------------------\r\nif (1)\r\n\t...\r\n\tif (0)\r\n\t\t...\r\nelse \t// this else does NOT go with the outer if\r\n\t...\r\n\r\nif (1)\r\n{\r\n\t...\r\n\tif (0)\r\n\t\t...\r\n}\r\nelse \t// this else does go with the outer if\r\n\t\t...\r\n```\r\n\r\n###The `switch` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>switch-statement:</i>\r\n    switch  (  <i>expression</i>  )  <i>compound-statement</i>\r\n    switch  (  <i>expression</i>  )  :   <i>statement-list</i>  endswitch;\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16); and *compound-statement* and\r\n*statement-list* are defined in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe controlling expression *expression* must have scalar type.\r\n\r\nThe *statement-list* must not contain any *compound-statement*s.\r\n\r\nThere must be at most one default label.\r\n\r\n**Semantics**\r\n\r\nThe two forms of the `switch` statement are equivalent; they simply\r\nprovide alternate styles.\r\n\r\nBased on the value of its *expression*, a `switch` statement transfers\r\ncontrol to a case label (§[[11.3](#labeled-statements)](#labeled-statements)); to a default label (§[[11.3](#labeled-statements)](#labeled-statements)), if one\r\nexists; or to the statement immediately following the end of the `switch`\r\nstatement. A case or default label is only reachable directly within its\r\nclosest enclosing `switch` statement.\r\n\r\nOn entry to the `switch` statement, the controlling expression is\r\nevaluated and then compared with the value of the case-label-expression\r\nvalues, in lexical order. If one matches, control transfers to the\r\nstatement following the corresponding case label. If there is no match,\r\nthen if there is a default label, control transfers to the statement\r\nfollowing that; otherwise, control transfers to the statement\r\nimmediately following the end of the `switch` statement. If a `switch`\r\ncontains more than one case label whose values compare equal to the\r\ncontrolling expression, the first in lexical order is consider the\r\nmatch.\r\n\r\nAn arbitrary number of statements can be associated with any case or\r\ndefault label. In the absence of a `break` statement ([§§](#the-break-statement)) at the end\r\nof a set of such statements, control drops through into any following\r\ncase or default label. Thus, if all cases and the default end in break\r\nand there are no duplicate-valued case labels, the order of case and\r\ndefault labels is insignificant.\r\n\r\nCase-label values can be runtime expressions, and the types of sibling\r\ncase-label values need not be the same.\r\n\r\nSwitches may nested, in which case, each `switch` has its own set of\r\n`switch` clauses.\r\n\r\n**Examples**\r\n\r\n```\r\n$v = 10;\r\nswitch ($v)\r\n{\r\ndefault:\r\n\techo \"default case: \\$v is $v\\n\";\r\n\tbreak;\t\t// break ends \"group\" of default statements\r\ncase 20:\r\n\techo \"case 20\\n\";\r\n\tbreak; \t\t// break ends \"group\" of case 20 statements\r\ncase 10:\r\n\techo \"case 10\\n\";\t// no break, so control drops into next label's \"group\"\r\ncase 30:\r\n\techo \"case 30\\n\";\t// no break, but then none is really needed either\r\n}\r\n// -----------------------------------------\r\n$v = 30;\r\nswitch ($v)\r\n{\r\ncase 30.0:\t// <===== this case matches with 30\r\n\techo \"case 30.0\\n\";\r\n\tbreak;\r\ndefault:\r\n\techo \"default case: \\$v is $v\\n\";\r\n\tbreak;\r\ncase 30:\t\t// <===== rather than this case matching with 30\r\n\techo \"case 30\\n\";\r\n\tbreak;\r\n}\r\n// -----------------------------------------\r\nswitch ($v)\r\n{\r\ncase 10 + $b:\t// non-constant expression\r\n\t// ...\r\ncase $v < $a: \t// non-constant expression\r\n\t// ...\r\n// ...\r\n}\r\n```\r\n\r\n##Iteration Statements\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>iteration-statement:</i>\r\n    <i>while-statement</i>\r\n    <i>do-statement</i>\r\n    <i>for-statement</i>\r\n    <i>foreach-statement</i>\r\n</pre>\r\n\r\n*while-statement* is defined in [§§](#the-while-statement); *do-statement* is defined in\r\n[§§](#the-do-statement); *for-statement* is defined in [§§](#the-for-statement); and *foreach-statement*\r\nis defined in [§§](#the-foreach-statement).\r\n\r\n##The `while` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>while-statement:</i>\r\n    while  (  <i>expression</i>  )  <i>statement</i>\r\n    while  (  <i>expression</i>  )  :   <i>statement-list</i>  endwhile ;\r\n</pre>\r\n\r\n*expresion* is defined in [§§](#general-16); *statement* is defined in [§§](#general-17); and\r\n*statement-list* is defined in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe controlling expression *expression* must have type `bool` or be\r\nimplicitly convertible to that type.\r\n\r\n**Semantics**\r\n\r\nThe two forms of the `while` statement are equivalent; they simply provide\r\nalternate styles.\r\n\r\nIf *expression* tests `TRUE`, the *statement* that follows immediately is\r\nexecuted, and the process is repeated. If *expression* tests `FALSE`,\r\ncontrol transfers to the point immediately following the end of the\r\n`while` statement. The loop body, *statement*, is executed zero or more\r\ntimes.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 1;\r\nwhile ($i <= 10):\r\n\techo \"$i\\t\".($i * $i).\"\\n\";\t// output a table of squares\r\n\t++$i;\r\nendwhile;\r\n// -----------------------------------------\r\nwhile (TRUE)\r\n{\r\n\t// ...\r\n\tif ($done)\r\n\t\tbreak;\t// break out of the while loop\r\n\t// ...\r\n}\r\n```\r\n\r\n##The `do` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>do-statement:</i>\r\n    do  <i>statement</i>  while  (  <i>expression</i>  )  ;\r\n</pre>\r\n\r\n*statement* is defined in [§§](#general-17) and *expresion* is defined in [§§](#general-16).\r\n\r\n (Note: There is no `:/enddo` alternate syntax.)\r\n\r\n**Constraints**\r\n\r\nThe controlling expression *expression* must have type `bool` or be\r\nimplicitly convertible to that type.\r\n\r\n**Semantics**\r\n\r\nFirst, *statement* is executed and then *expression* is tested. If its\r\nvalue is `TRUE`, the process is repeated. If *expression* tests `FALSE`,\r\ncontrol transfers to the point immediately following the end of the `do`\r\nstatement. The loop body, *statement*, is executed one or more times.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 1;\r\ndo\r\n{\r\n\techo \"$i\\t\".($i * $i).\"\\n\";\t// output a table of squares\r\n\t++$i;\r\n}\r\nwhile ($i <= 10);\r\n```\r\n\r\n##The `for` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>for-statement:</i>\r\n    for   (   <i>for-initializeropt</i>   ;   <i>for-controlopt</i>   ;   <i>for-end-of-loopopt</i>   )   <i>statement</i>\r\n    for   (   <i>for-initializeropt</i>   ;   <i>for-controlopt</i>   ;   <i>for-end-of-loopopt</i>   )   :   <i>statement-list</i>   endfor   ;\r\n\r\n  <i>for-initializer:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-control:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-end-of-loop:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-expression-group:</i>\r\n    <i>expression</i>\r\n    <i>for-expression-group</i>   ,   <i>expression</i>\r\n</pre>\r\n\r\n*statement* is defined in [§§](#general-17); *statement-list* is defined in [§§](#compound-statements);\r\nand *expression* is defined in [§§](#general-16).\r\n\r\nNote: Unlike C/C++, PHP does not support a comma operator, per se.\r\nHowever, the syntax for the `for` statement has been extended from that of\r\nC/C++ to achieve the same results in this context.\r\n\r\n**Constraints**\r\n\r\nThe controlling expression—the right-most *expression* in\r\n*for-control*—must have type `bool` or be implicitly convertible to that\r\ntype.\r\n\r\n**Semantics**\r\n\r\nThe two forms of the `for` statement are equivalent; they simply provide\r\nalternate styles.\r\n\r\nThe group of expressions in *for-initializer* is evaluated once,\r\nleft-to-right, for their side effects. Then the group of expressions in\r\n*for-control* is evaluated left-to-right (with all but the right-most\r\none for their side effects only), with the right-most expression's value\r\nbeing tested. If that tests `TRUE`, *statement* is executed, and the group\r\nof expressions in *for-end-of-loop* is evaluated left-to-right, for\r\ntheir side effects only. Then the process is repeated starting with\r\n*for-control*. If the right-most expression in *for-control* tests\r\n`FALSE`, control transfers to the point immediately following the end of\r\nthe `for` statement. The loop body, *statement*, is executed zero or more\r\ntimes.\r\n\r\nIf *for-initializer* is omitted, no action is taken at the start of the\r\nloop processing. If *for-control* is omitted, this is treated as if\r\n*for-control* was an expression with the value `TRUE`. If\r\n*for-end-of-loop* is omitted, no action is taken at the end of each\r\niteration.\r\n\r\n**Examples**\r\n\r\n```\r\nfor ($i = 1; $i <= 10; ++$i)\r\n{\r\n\techo \"$i\\t\".($i * $i).\"\\n\";\t// output a table of squares\r\n}\r\n// -----------------------------------------\r\n// omit 1st and 3rd expressions\r\n\r\n$i = 1;\r\nfor (; $i <= 10;):\r\n\techo \"$i\\t\".($i * $i).\"\\n\";\t// output a table of squares\r\n\t++$i;\r\nendfor;\r\n// -----------------------------------------\r\n// omit all 3 expressions\r\n\r\n$i = 1;\r\nfor (;;)\r\n{\r\n\tif ($i > 10)\r\n\t\tbreak;\r\n\techo \"$i\\t\".($i * $i).\"\\n\";\t// output a table of squares\r\n\t++$i;\r\n}\r\n// -----------------------------------------\r\n//  use groups of expressions\r\n\r\nfor ($a = 100, $i = 1; ++$i, $i <= 10; ++$i, $a -= 10)\r\n{\r\n\techo \"$i\\t$a\\n\";\r\n}\r\n```\r\n\r\n##The `foreach` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>foreach-statement:</i>\r\n    foreach  (  <i>foreach-collection-name</i>  as  <i>foreach-key<sub>opt</sub>  foreach-value</i>  )   statement\r\n    foreach  (  <i>foreach-collection-name</i>  as  <i>foreach-key<sub>opt</sub>   foreach-value</i>  )  :   <i>statement-list</i>  endforeach  ;\r\n\r\n  <i>foreach-collection-name</i>:\r\n    <i>expression</i>\r\n\r\n  <i>foreach-key:</i>\r\n    <i>expression</i>  =>\r\n\r\n  <i>foreach-value:<i>\r\n    &<sub>opt</sub>   <i>expression</i>\r\n    <i>list-intrinsic</i>\r\n</pre>\r\n\r\n*statement* is defined in [§§](#general-17); *statement-list* is defined in [§§](#compound-statements);\r\n*variable-name* is defined in [§§](#names); *list-intrinsic* is defined in\r\n[§§](#list); and *expression* is defined in [§§](#general-16).\r\n\r\n**Constraints**\r\n\r\nThe variable designated by *foreach-collection-name* must be a\r\ncollection.\r\n\r\nEach *expression* must designate a variable name.\r\n\r\n**Semantics**\r\n\r\nThe two forms of the `foreach` statement are equivalent; they simply\r\nprovide alternate styles.\r\n\r\nThe *foreach* statement iterates over the set of elements in the\r\ncollection designated by *foreach-collection-name*, starting at the\r\nbeginning, executing *statement* each iteration. On each iteration, if\r\nthe `&` is present in *foreach-value*, the variable designated by the\r\ncorresponding *expression* is made an alias to the current element. If\r\nthe `&` is omitted, the value of the current element is assigned to the\r\ncorresponding variable. The loop body, *statement*, is executed zero or\r\nmore times. After the loop terminates, *expression* in *foreach-value*\r\nhas the same meaning it had after the final iteration, if any.\r\n\r\nIf *foreach-key* is present, the variable designated by its *expression*\r\nis assigned the current element's key value.\r\n\r\nIn the *list-intrinsic* case, a value that is an array is split into\r\nindividual elements.\r\n\r\n**Examples**\r\n\r\n```\r\n$colors = array(\"red\", \"white\", \"blue\");\r\nforeach ($colors as $color):\r\n    // ...\r\nendforeach;\r\n// -----------------------------------------\r\nforeach ($colors as $key => $color)\r\n{\r\n    // ...\r\n}\r\n// -----------------------------------------\r\n// Modify the local copy of an element's value\r\n\r\nforeach ($colors as $color)\r\n{\r\n\t$color = \"black\";\r\n}\r\n// -----------------------------------------\r\n// Modify the the actual element itself\r\n\r\nforeach ($colors as &$color)\t// note the &\r\n{\r\n\t$color = \"black\";\r\n}\r\n```\r\n\r\n##Jump Statements\r\n\r\n###General\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>jump-statement:</i>\r\n    <i>goto-statement</i>\r\n    <i>continue-statement</i>\r\n    <i>break-statement</i>\r\n    <i>return-statement</i>\r\n    <i>throw-statement</i>\r\n</pre>\r\n\r\n*goto-statement* is defined in [§§](#the-goto-statement); *continue-statement* is defined\r\nin [§§](#the-continue-statement); *break-statement* is defined in [§§](#the-break-statement); *return-statement*\r\nis defined in [§§](#the-return-statement); and *throw-statement* is defined in [§§](#the-throw-statement).\r\n\r\n###The `goto` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>goto-statement:</i>\r\n    goto  <i>name</i>  ;\r\n</pre>\r\n\r\n*name* is defined in [§§](#names). \r\n\r\n**Constraints**\r\n\r\nThe name in a `goto` statement must be that of a named label located\r\nsomewhere in the current script. Control must not be transferred into or\r\nout of a function, or into an iteration statement ([§§](#iteration-statements)) or a `switch`\r\nstatement ([§§](#the-switch-statement)).\r\n\r\nA `goto` statement must not attempt to transfer control out of a\r\nfinally-block ([§§](#the-try-statement)).\r\n\r\n**Semantics**\r\n\r\nA `goto` statement transfers control unconditionally to the named label\r\n([§§](#labeled-statements)).\r\n\r\nA `goto` statement may break out of a construct that is fully contained\r\nwithin a finally-block.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction findValue($table, $v)\t// where $table is 2x3 array\r\n{\r\n\tfor ($row = 0; $row <= 1; ++$row)\r\n\t{\r\n\t\tfor ($colm = 0; $colm <= 2; ++$colm)\r\n\t\t{\r\n\t\t\tif ($table[$row][$colm] == $v)\r\n\t\t\t{\r\n\t\t\t\techo \"$v was found at row $row, column $colm\\n\";\r\n\t\t\t\tgoto done; // not quite the same as break 2!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\techo \"$v was not found\\n\";\r\ndone:\r\n\t;\t// note that a label must always precede a statement\r\n}\r\n```\r\n\r\n###The `continue` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>continue-statement:</i>\r\n    continue   <i>breakout-level<sub>opt</sub></i>  ;\r\n\r\n  <i>breakout-level:</i>\r\n    <i>integer-literal</i>\r\n</pre>\r\n\r\n*integer-literal* is defined in [§§](#integer-literals). \r\n\r\n**Constraints**\r\n\r\nThe breakout level must not be zero, and it must not exceed the level of\r\nactual enclosing iteration and/or `switch` statements.\r\n\r\nA `continue` statement must not attempt to break out of a finally-block\r\n([§§](#the-try-statement)).\r\n\r\n**Semantics**\r\n\r\nA `continue` statement terminates the execution of the innermost enclosing\r\niteration ([§§](#iteration-statements)) or `switch` ([§§](#the-switch-statement)) statement.\r\n\r\nA `continue` statement terminates the execution of one or more enclosing\r\niteration ([§§](#iteration-statements)) or `switch` ([§§](#the-switch-statement)) statements. If *breakout-level* is\r\ngreater than one, the next iteration (if any) of the next innermost\r\nenclosing iteration or switch statement is started; however, if that\r\nstatement is a `for` statement and it has a *for-end-of-loop*, its\r\nexpression group for the current iteration is evaluated first. If\r\n*breakout-level* is 1, the behavior is the same as for `break 1`. If\r\n*breakout-level* is omitted, a level of 1 is assumed.\r\n\r\nA `continue` statement may break out of a construct that is fully\r\ncontained within a finally-block.\r\n\r\n**Examples**\r\n\r\n```\r\nfor ($i = 1; $i <= 5; ++$i)\r\n{\r\n\tif (($i % 2) == 0)\r\n\t\tcontinue;\r\n\techo \"$i is odd\\n\";\r\n}\r\n```\r\n\r\n##The `break` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>break-statement:</i>\r\n    break  <i>breakout-level<sub>opt</sub></i>  ;\r\n</pre>\r\n\r\n*breakout-level* is defined in [§§](#the-continue-statement). \r\n\r\n**Constraints**\r\n\r\nThe breakout level must not be zero, and it must not exceed the level of\r\nactual enclosing iteration and/or `switch` statements.\r\n\r\nA `break` statement must not attempt to break out of a finally-block\r\n([§§](#the-try-statement)).\r\n\r\n**Semantics**\r\n\r\nA `break` statement terminates the execution of one or more enclosing\r\niteration ([§§](#iteration-statements)) or `switch` ([§§](#the-switch-statement)) statements. The number of levels\r\nbroken out is specified by *breakout-level*. If *breakout-level* is\r\nomitted, a level of 1 is assumed.\r\n\r\nA `break` statement may break out of a construct that is fully contained\r\nwithin a finally-block.\r\n\r\n**Examples**\r\n\r\n```\r\n$i = 1;\r\nfor (;;)\r\n{\r\n\tif ($i > 10)\r\n\t\tbreak;\r\n\t// ...\r\n\t++$i;\r\n}\r\n// -----------------------------------------\r\nfor ($row = 0; $row <= 1; ++$row)\r\n{\r\n\tfor ($colm = 0; $colm <= 2; ++$colm)\r\n\t{\r\n\t\tif (some-condition-set)\r\n\t\t{\r\n\t\t\tbreak 2;\r\n\t\t}\r\n\t\t// ...\r\n\t}\r\n}\r\n// -----------------------------------------\r\nfor ($i = 10; $i <= 40; $i +=10)\r\n{\r\n        switch($i)\r\n        {\r\n        case 10: /* ... */; break;\t\t// breaks to the end of the switch\r\n        case 20: /* ... */; break 2;\t// breaks to the end of the for\r\n        case 30: /* ... */; break; \t\t// breaks to the end of the switch\r\n        }\r\n}\r\n```\r\n\r\n###The `return` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>return-statement:</i>\r\n    return  <i>expression<sub>opt</sub></i>  ;\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16). \r\n\r\n**Constraints**\r\n\r\nThe *expression* in a *return-statement* in a generator function\r\n([§§](#yield-operator)) must be the literal `NULL` or be omitted.\r\n\r\n**Semantics**\r\n\r\nA `return` statement from within a function terminates the execution of\r\nthat function normally, and depending on how the function was defined\r\n([§§](#function-calls)), it returns the value of *expression* to the function's caller\r\nby value or byRef. If *expression* is omitted the value `NULL` is used. \r\n\r\nIf execution flows into the closing brace (`}`) of a function, `return\r\nNULL;` is implied.\r\n\r\nA function may have any number of `return` statements, whose returned\r\nvalues may have different types.\r\n\r\nIf an undefined variable is returned byRef, that variable becomes\r\ndefined, with a value of `NULL`.\r\n\r\nA `return` statement is permitted in a try-block ([§§](#the-try-statement)) and a catch-block\r\n([§§](#the-try-statement)). However, it is unspecified whether a `return` statement is\r\npermitted in a finally-block ([§§](#the-try-statement)), and, if so, the semantics of\r\nthat. \r\n\r\nUsing a `return` statement inside a finally-block will override any other\r\n`return` statement or thrown exception from the try-block and all its\r\ncatch-blocks.   Code execution in the parent stack will continue as if\r\nthe exception was never thrown.\r\n\r\nIf an uncaught exception exists when a finally-block is executed, if\r\nthat finally-block executes a `return` statement, the uncaught exception\r\nis discarded.\r\n\r\nIn an included file ([§§](#general-16)) a `return` statement may occur outside any\r\nfunction. This statement terminates processing of that script and\r\nreturns control to the including file. If *expression* is present, that\r\nis the value returned; otherwise, the value `NULL` is returned. If\r\nexecution flows to the end of the script, `return 1;` is implied. However,\r\nif execution flows to the end of the top level of a script, `return 0;` is\r\nimplied. Likewise, if *expression* is omitted at the top level. (See\r\nexit ([§§](#exitdie)).)\r\n\r\nReturning from a constructor or destructor behaves just like returning\r\nfrom a function.\r\n\r\nA `return` statement inside a generator function causes the generator to\r\nterminate.\r\n\r\nReturn statements can also be used in the body of anonymous functions.\r\n\r\n`return` terminates the execution of source code given to the intrinsic\r\n[`eval` ([§§](#eval))](http://www.php.net/manual/en/function.eval.php). \r\n\r\n**Examples**\r\n\r\n```\r\nfunction f() { return 100; }\t// f explicitly returns a value\r\nfunction g() { \treturn; }\t\t// g explicitly returns an implicit NULL\r\nfunction h() { }\t\t\t// h implicitly returns NULL\r\n// -----------------------------------------\r\n// j returns one of three dissimilarly-typed values\r\nfunction j($x)\r\n{\r\n\tif ($x > 0)\r\n\t{\r\n\t\treturn \"Positive\";\r\n\t}\r\n\telse if ($x < 0)\r\n\t{\r\n\t\treturn -1;\r\n\t}\r\n\t// for zero, implied return NULL\r\n}\r\nfunction &compute() { ...; return $value; } // returns $value byRef\r\n// -----------------------------------------\r\nclass Point \r\n{\r\n\tprivate static $pointCount = 0;\r\n\tpublic static function getPointCount() \r\n\t{\r\n\t\treturn self::$pointCount;\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nAlthough *expression* is a full expression ([§§](#general-10)), and there is a\r\nsequence point ([§§](#general-10)) at the end of that expression, as stated in\r\n[§§](#general-10), a side effect need not be executed if it can be determined that\r\nno other program code relies on its having happened. (For example, in\r\nthe cases of `return $a++;` and `return ++$a;`, it is obvious what value\r\nmust be returned in each case, but if `$a` is a variable local to the\r\nenclosing function, `$a` need not actually be incremented.\r\n\r\n###The `throw` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>throw-statement:</i>\r\n    throw  <i>expression</i>  ;\r\n</pre>\r\n\r\n*expression* is defined in [§§](#general-16). \r\n\r\n**Constraints**\r\n\r\nThe type of *expression* must be Exception ([§§](#class-exception)) or a subclass of that\r\nclass.\r\n\r\n*expression* must be such that an alias to it can be created. \r\n\r\n**Semantics**\r\n\r\nA `throw` statement throws an exception immediately and unconditionally.\r\nControl never reaches the statement immediately following the throw. See\r\n[§§](#general-27) and [§§](#the-try-statement) for more details of throwing and catching exceptions,\r\nand how uncaught exceptions are dealt with.\r\n\r\nRather than handle an exception, a catch-block may (re-)throw the same\r\nexception that it caught, or it can throw an exception of a different\r\ntype.\r\n\r\n**Examples**\r\n\r\n```\r\nthrow new Exception;\r\nthrow new Exception(\"Some message\", 123);\r\nclass MyException extends Exception { ... }\r\nthrow new MyException;\r\n```\r\n\r\n##The `try` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>try-statement:</i>\r\n    try  <i>compound-statement   catch-clauses</i>\r\n    try  <i>compound-statement   finally-clause</i>\r\n    try  <i>compound-statement   catch-clauses   finally-clause</i>\r\n\r\n  <i>catch-clauses:</i>\r\n    <i>catch-clause</i>\r\n    <i>catch-clauses   catch-clause</i>\r\n\r\n  <i>catch-clause:</i>\r\n    catch  (  <i>parameter-declaration-list</i>  )  <i>compound-statement</i>\r\n\r\n  <i>finally-clause:</i>\r\n    finally   <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is defined in [§§](#compound-statements) and\r\n*parameter-declaration-list* is defined in [§§](#function-definitions).\r\n\r\n**Constraints**\r\n\r\nIn a *catch-clause*, *parameter-declaration-list* must contain only one\r\nparameter, and its type must be `Exception` ([§§](#class-exception)) or a type derived from\r\nthat class, and that parameter must not be passed byRef.\r\n\r\n**Semantics**\r\n\r\nIn a *catch-clause*, *identifier* designates an *exception variable*\r\npassed in by value. This variable corresponds to a local variable with a\r\nscope that extends over the catch-block. During execution of the\r\ncatch-block, the exception variable represents the exception currently\r\nbeing handled.\r\n\r\nOnce an exception is thrown, the Engine searches for the nearest\r\ncatch-block that can handle the exception. The process begins at the\r\ncurrent function level with a search for a try-block that lexically\r\nencloses the throw point. All catch-blocks associated with that\r\ntry-block are considered in lexical order. If no catch-block is found\r\nthat can handle the run-time type of the exception, the function that\r\ncalled the current function is searched for a lexically enclosing\r\ntry-block that encloses the call to the current function. This process\r\ncontinues until a catch-block is found that can handle the current\r\nexception. \r\n\r\nIf a matching catch-block is located, the Engine prepares to transfer\r\ncontrol to the first statement of that catch-block. However, before\r\nexecution of that catch-block can start, the Engine first executes, in\r\norder, any finally-blocks associated with try-blocks nested more deeply\r\nthan the one that caught the exception. \r\n\r\nIf no matching catch-block is found, the behavior is\r\nimplementation-defined.\r\n\r\n**Examples**\r\n\r\n```\r\nfunction getTextLines($filename)\r\n{\r\n\t$infile = fopen($filename, 'r');\r\n\tif ($infile == FALSE) { /* deal with an file-open failure */ }\r\n\ttry\r\n\t{\r\n\t\twhile ($textLine = fgets($infile)) \t// while not EOF\r\n\t\t{\r\n\t\t\tyield $textLine;\t// leave line terminator attached\r\n\t\t}\r\n\t}\r\n\tfinally\r\n\t{\r\n\t\tfclose($infile);\r\n\t}\r\n}\r\n// -----------------------------------------\r\nclass DeviceException extends Exception { ... }\r\nclass DiskException extends DeviceException { ... }\r\nclass RemovableDiskException extends DiskException { ... }\r\nclass FloppyDiskException extends RemovableDiskException { ... }\r\n\r\ntry\r\n{\r\n\tprocess(); // call a function that might generate a disk-related exception\r\n}\r\ncatch (FloppyDiskException $fde) { ... }\r\ncatch (RemovableDiskException $rde) { ... }\r\ncatch (DiskException $de) { ... }\r\ncatch (DeviceException $dve) { ... }\r\nfinally { ... }\r\n```\r\n\r\n##The `declare` Statement\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>declare-statement:</i>\r\n    declare  (  <i>declare-directive</i>  )  <i>statement</i>\r\n    declare  (  <i>declare-directive</i>  )  :  <i>statement-list</i>  enddeclare  ;\r\n    declare  (  <i>declare-directive</i>  )  ;\r\n\r\n  <i>declare-directive:</i>\r\n    ticks  =  <i>declare-tick-count</i>\r\n    encoding  =  <i>declare-character-encoding</i>\r\n\r\n  <i>declare-tick-count</i>\r\n    <i>expression</i>\r\n\r\n  <i>declare-character-encoding:</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n*statement* is defined in [§§](#general-17); *statement-list* is defined in [§§](#compound-statements);\r\nand *expression* is defined in [§§](#the-include-operator).\r\n\r\n**Constraints**\r\n\r\n*tick-count* must designate a value that is, or can be converted, to an\r\ninteger having a non-negative value.\r\n\r\n*character-encoding* must designate a string whose value names an\r\n8-bit-[character\r\nencoding](http://en.wikipedia.org/wiki/Character_encoding).\r\n\r\nExcept for white space, a *declare-statement* in a script that specifies\r\n*character-encoding* must be the first thing in that script.\r\n\r\n**Semantics**\r\n\r\nThe first two forms of the `declare` statement are equivalent; they simply\r\nprovide alternate styles.\r\n\r\nThe `declare` statement sets an *execution directive* for its *statement*\r\nbody, or for the `;`-form, for the remainder of the script or until the\r\nstatement is overridden by another *declare-statement*, whichever comes\r\nfirst. As the parser is executing, certain statements are considered\r\n*tickable*. For every *tick-count* ticks, an event occurs, which can be\r\nserviced by the function previously registered by the library function \r\n[`register_tick_function`\r\n(§xx)](http://www.php.net/manual/en/function.register-tick-function.php).\r\nTick event monitoring can be disabled by calling the library function \r\n[`unregister_tick_function`\r\n(§xx)](http://www.php.net/manual/en/function.unregister-tick-function.php).\r\nThis facility allows a profiling mechanism to be developed.\r\n\r\nCharacter encoding can be specified on a script-by-script basis using\r\nthe encoding directive. The joint ISO and IEC standard ISO/IEC\r\n8859 standard series (<http://en.wikipedia.org/wiki/ISO/IEC_8859>)\r\nspecifies a number of 8-bit-[character\r\nencodings](http://en.wikipedia.org/wiki/Character_encoding) whose names\r\ncan be used with this directive.\r\n\r\n**Examples**\r\n\r\n```\r\ndeclare(ticks = 1) { ... }\r\ndeclare(encoding = 'ISO-8859-1'); // Latin-1 Western European\r\ndeclare(encoding = 'ISO-8859-5'); // Latin/Cyrillic\r\n```\r\n\r\n#Arrays\r\n\r\n##General\r\n\r\nAn *array* is a data structure that contains a collection of zero or\r\nmore *elements*. The elements of an array need not have the same type,\r\nand the type of an array element can change over its lifetime. An array\r\nelement can have any type (which allows for arrays of arrays). However,\r\nPHP does not support\r\nmultidimensional [array](http://www.php.net/manual/en/language.types.array.php)s.\r\n\r\nAn [array](http://www.php.net/manual/en/language.types.array.php) is\r\nrepresented as an ordered map in which each entry is a key/value pair\r\nthat represents an element. An element key can be an expression of type\r\n`int` or `string`. Duplicate keys are not permitted. The order of the\r\nelements in the map is the order in which the elements were *inserted*\r\ninto the array. An element is said to *exist* once it has been inserted\r\ninto the array with a corresponding key. An array is *extended* by\r\ninitializing a previously non-existent element using a new key. Elements\r\ncan be *removed* from an array via the intrinsic unset ([§§](#unset)).\r\n\r\nThe `foreach` statement ([§§](#the-foreach-statement)) can be used to iterate over the\r\ncollection of elements in an array, in the order in which the elements\r\nwere inserted. This statement provides a way to access the key and value\r\nfor each element.\r\n\r\nEach array has its own *current element pointer* that designates the\r\n*current array element*. When an array is created, the current element\r\nis the first element inserted into the array.\r\n\r\nNumerous library functions are available to create and/or manipulate\r\narrays. See §xx.\r\n\r\n(Note: Arrays in PHP are quite different from arrays in numerous\r\nmainstream languages. Specifically, in PHP, array elements need not have\r\nthe same type, the subscript index need not be an integer (so there is\r\nno concept of a base index of zero or 1), and there is no concept of\r\nconsecutive elements occupying physically adjacent memory locations.)\r\n\r\n##Array Creation and Initialization\r\n\r\nAn array is created and initialized by one of two equivalent ways: via\r\nthe array-creation operator `[]` ([§§](#array-creation-operator)) or the intrinsic array\r\n([§§](#array)).\r\n\r\n##Element Access and Insertion\r\n\r\nThe value (and possibly the type) of an existing element is changed, and\r\nnew elements are inserted, using the subscript operator `[]` ([§§](#subscript-operator)).\r\n\r\n\r\n#Functions\r\n\r\n##General\r\n\r\nWhen a function is called, information may be passed to it by the caller\r\nvia an *argument list*, which contains one or more *argument\r\nexpressions*, or more simply, *arguments*. These correspond by position\r\nto the *parameters* in a *parameter list* in the called function's\r\ndefinition ([§§](#function-definitions)).\r\n\r\nAn *unconditionally defined function* is a function whose definition is\r\nat the top level of a script. A *conditionally defined function* is a\r\nfunction whose definition occurs inside a compound statement (which is\r\ninside a function definition); that is, it is a *nested function*. There\r\nis no limit on the depth of levels of function nesting. Consider the\r\ncase of an *outer function*, and an *inner function* defined within it.\r\nUntil the outer function is called at least once, its inner function\r\ncannot exist. Even if the outer function is called, if its runtime logic\r\nbypasses the definition of the inner function, that inner function still\r\ndoes not exist.\r\n\r\nAny function containing `yield` ([§§](#yield-operator)) is a *generator function*.\r\n\r\n**Examples**\r\n\r\n```\r\nucf1(); // can call ucf1 before its definition is seen\r\nfunction ucf1() { ... }\r\nucf1(); // can call ucf1 after its definition is seen\r\ncf1(); // Error; call to non-existent function\r\n$flag = TRUE;\r\nif ($flag) { function cf1() { ... } } // cf1 now exists\r\nif ($flag) { cf1(); } // can call cf1 now\r\n// -----------------------------------------\r\nfunction ucf2() { function cf2() { ... } }\r\ncf2(); // Error; call to non-existent function\r\nucf2(); // now cf2 exists\r\ncf2(); // so we can call it\r\n```\r\n\r\n##Function Calls\r\n\r\nA function is called via the function-call operator `()` ([§§](#function-call-operator)).\r\n\r\n##Function Definitions\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>function-deﬁnition:</i>\r\n    <i>function-deﬁnition-header   compound-statement</i>\r\n\r\n  <i>function-deﬁnition-header:</i>\r\n    function  &<sub>opt</sub>   <i>name</i>  (  <i>parameter-declaration-list<sub>opt</sub></i>  )\r\n\r\n  <i>parameter-declaration-list:</i>\r\n    <i>parameter-declaration</i>\r\n    <i>parameter-declaration-list</i>  ,  <i>parameter-declaration</i>\r\n\r\n  <i>parameter-declaration:</i>\r\n    <i>type-hint<sub>opt</sub></i>  &<sub>opt</sub>   <i>variable-name   default-argument-specifier<sub>opt</sub></i>\r\n\r\n  <i>type-hint:</i>\r\n    array\r\n    callable\r\n    <i>qualified-name</i>\r\n\r\n  <i>default-argument-specifier:</i>\r\n    =  <i>const-expression</i>\r\n</pre>\r\n\r\n*const-expression* is defined in [§§](#constant-expressions). *qualified-name* is defined in\r\n[§§](#names).\r\n\r\n**Constraints**\r\n\r\nEach parameter name in a *function-definition* must be distinct.\r\n\r\nA conditionally defined function ([§§](#general-22)) must exist before any calls are\r\nmade to that function.\r\n\r\n*parameter-declaration* must not contain `&` if *type-hint* is `array` or\r\n`callable`.\r\n\r\n**Semantics**\r\n\r\nA *function-definition* defines a function called *name*. Function names\r\nare **not** case-sensitive. A function can be defined with zero or more\r\nparameters, each of which is specified in its own\r\n*parameter-declaration* in a *parameter-declaration-list*. Each\r\nparameter has a name, *variable-name*, and optionally, a\r\n*default-argument-specifier*. An `&` in *parameter-declaration* indicates\r\nthat parameter is passed byRef ([§§](#assignment)) rather than by value. An `&`\r\nbefore *name* indicates that the value returned from this function is to\r\nbe returned byRef. Function-value returning is described in [§§](#the-return-statement).\r\n\r\nWhen the function is called, if there exists a parameter for which there\r\nis a corresponding argument, the argument is assigned to the parameter \r\nvariable using value assignment, while for passing-byRef, the argument is \r\nassigned to the parameter variable using byRef assignment ([§§](#assignment), [§§](#argument-passing)). If that parameter has no corresponding argument, but the parameter has a \r\ndefault argument value, for passing-by-value or passing-byRef, the default \r\nvalue is assigned to the parameter variable using value assignment. \r\nOtherwise, if the parameter has no corresponding argument and the parameter \r\ndoes not have a default value, the parameter variable is non-existent and no corresponding VSlot ([§§](#the-memory-model)) exists.  After all possible parameters have been \r\nassigned initial values or aliased to arguments, the body of the function, \r\n*compound-statement*, is executed. This execution may terminate normally \r\n(§[[4.3](#program-termination)](#program-termination), [§§](#the-return-statement)) or abnormally (§[[4.3](#program-termination)](#program-termination)).\r\n\r\nEach parameter is a variable local to the parent function, and is a\r\nmodifiable lvalue.\r\n\r\nA *function-definition* may exist at the top level of a script, inside\r\nany *compound-statement*, in which case, the function is conditionally\r\ndefined ([§§](#general-22)), or inside a *method-declaration* ([§§](#methods)). \r\n\r\nBy default, a parameter will accept an argument of any type. However, by\r\nspecifying a *type-hint*, the types of argument accepted can be\r\nrestricted. By specifying `array`, only an argument designating an array\r\ntype is accepted. By specifying `callable`, only an argument designating a\r\nfunction is accepted. By specifying *qualified-name*, only an instance\r\nof a class having that type, or being derived from that type, are\r\naccepted, or only an instance of a class that implements that interface\r\ntype directly or indirectly is accepted.    \r\n\r\n##Variable Functions\r\n\r\nIf a variable name is followed by the function-call operator `()`\r\n([§§](#function-call-operator)), and the value of that variable is a string containing the\r\nname of a function currently defined and visible, that function will be\r\nexecuted.\r\n\r\nThe library function `is_callable` (§xx) reports whether the contents of\r\na variable can be called as a function.\r\n\r\n##Anonymous Functions\r\n\r\nAn *anonymous function*, also known as a *closure*, is a function\r\ndefined with no name. As such, it must be defined in the context of an\r\nexpression whose value is used immediately to call that function, or\r\nthat is saved in a variable for later execution. An anonymous function\r\nis defined via the anonymous function-creation operator ([§§](#anonymous-function-creation)).\r\n\r\nFor both `__FUNCTION__` and `__METHOD__` ([§§](#context-dependent-constants)), an anonymous\r\nfunction's name is `{closure}`. All anonymous functions created in the\r\nsame scope have the same name.\r\n\r\n\r\n#Classes\r\n\r\n##General\r\n\r\nA class is a type that may contain zero or more explicitly declared\r\n*members*, which can be any combination of *class constants* ([§§](#constants-2));\r\ndata members, called *properties* ([§§](#properties)); and function members, called\r\n*methods* ([§§](#methods)). (The ability to add properties and methods to an\r\ninstance at runtime is described in [§§](#dynamic-members).) An object (often called an\r\n*instance*) of a class type is created (i.e., *instantiated*) via the\r\nnew operator ([§§](#the-new-operator)). \r\n\r\nPHP supports inheritance ([§§](#class-declarations)), a means by which a *derived class* can\r\n*extend* and specialize a single *base class*. However, unlike numerous\r\nother languages, classes in PHP are **not** all derived from a common\r\nancestor. An *abstract* class ([§§](#class-declarations)) is a base type intended for\r\nderivation, but which cannot be instantiated directly. A *concrete*\r\nclass is a class that is not abstract. A *final* class ([§§](#class-declarations)) is one\r\nfrom which other classes cannot be derived.\r\n\r\nA class may *implement* one or more *interfaces* ([§§](#class-declarations), [§§](#general-25)), each of\r\nwhich defines a contract.\r\n\r\nA class can *use* one or more traits ([§§](#general-26)), which allows a class to\r\nhave some of the benefits of multiple inheritance.\r\n\r\nA *constructor* ([§§](#constructors)) is a special method that is used to initialize\r\nan instance immediately after it has been created. A *destructor*\r\n([§§](#destructors)) is a special method that is used to free resources when an\r\ninstance is no longer needed. Other special methods exist; they are\r\ndescribed in ([§§](#methods-with-special-semantics)).\r\n\r\nThe members of a class each have a default or explicitly declared\r\n*visibility*, which determines what source code can access them. A\r\nmember with `private` visibility may be accessed only from within its own\r\nclass. A member with `protected` visibility may be accessed only from\r\nwithin its own class and from classes derived from that class. Access to\r\na member with `public` visibility is unrestricted. \r\n\r\nThe *signature* of a method is a combination of the parent class name,\r\nthat method's name, and its parameter list, including type hints and\r\nindication for arguments passed using byRef, and whether the resulting\r\nvalue is returned byRef.\r\n\r\nMethods and properties from a base class can be *overridden* in a\r\nderived class by redeclaring them with the same signature defined in the\r\nbase class.\r\n\r\nWhen an instance is allocated, new returns a handle that points to that\r\nobject. As such, assignment of a handle does not copy the object itself.\r\n(See [§§](#cloning-objects) for a discussion of shallow and deep copying.)\r\n\r\n##Class Declarations\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>class-declaration:</i>\r\n    <i>class-modifier<sub>opt</sub></i>  class  <i>name   class-base   clause<sub>opt</sub>  class-interface-clause<sub>opt</sub></i>   {   <i>trait-use-clauses<sub>opt</sub>   class-member-declarations<sub>opt</sub></i> }\r\n\r\n  <i>class-modifier:</i>\r\n    abstract\r\n    final\r\n\r\n  <i>class-base-clause:</i>\r\n    extends  <i>qualified-name</i>\r\n\r\n  <i>class-interface-clause:</i>\r\n    implements  <i>qualified-name</i>\r\n    <i>class-interface-clause</i>  ,  <i>qualified-name</i>\r\n</pre>\r\n\r\n*qualified-name* is defined in [§§](#names). *class-member-declarations* is\r\ndefined in [§§](#class-members). *trait-use-clauses* ~~ is defined in [§§](#trait-declarations)\r\n\r\n**Constraints**\r\n\r\nA class must not be derived directly or indirectly from itself.\r\n\r\nA *class-declaration* containing any *class-member-declarations* that\r\nhave the modifier `abstract` must itself have an `abstract`\r\n*class-modifier*.\r\n\r\n*class-base-clause* must not name a final class.\r\n\r\n*qualified-name* in *class-base-clause* must name a class type, and must\r\nnot be `parent`, `self`, or `static`.\r\n\r\nA concrete class must implement each of the methods from all the\r\ninterfaces ([§§](#general-25)) specified in *class-interface-clause*, using the\r\nexact same signature as defined in each interface.\r\n\r\n*qualified-name* in *class-interface-clause* must name an interface\r\ntype.\r\n\r\n**Semantics**\r\n\r\nA *class-declaration* defines a class type by the name *name*. Class\r\nnames are case-insensitive.\r\n\r\nThe `abstract` modifier declares a class usable only as a base class; the\r\nclass cannot be instantiated directly. An abstract class may contain one\r\nor more abstract members, but it is not required to do so. When a\r\nconcrete class is derived from an abstract class, the concrete class\r\nmust include an implementation for each of the abstract members it\r\ninherits.\r\n\r\nThe `final` modifier prevents a class from being used as a base class.\r\n\r\nThe optional *class-base-clause* specifies the one base class from which\r\nthe class being defined is derived. In such a case, the derived class\r\ninherits all the members from the base class.\r\n\r\nThe optional *class-interface-clause* specifies the one or more\r\ninterfaces that are implemented by the class being defined.\r\n\r\nA class can use one or more traits via a *trait-use-clauses*; see [§§](#general-26)\r\nand [§§](#trait-declarations).\r\n\r\n**Examples**\r\n\r\n```\r\nabstract class Vehicle \r\n{\r\n\tpublic abstract function getMaxSpeed();\r\n\t...\r\n}\r\nabstract class Aircraft extends Vehicle \r\n{\r\n\tpublic abstract function getMaxAltitude();\r\n\t...\r\n}\r\nclass PassengerJet extends Aircraft \r\n{\r\n\tpublic function getMaxSpeed()\r\n\t{\r\n\t\t// implement method\r\n\t}\r\n\tpublic function getMaxAltitude()\r\n\t{\r\n\t\t// implement method\r\n\t}\r\n\t...\r\n}\r\n$pj = new PassengerJet(...);\r\necho \"\\$pj's maximum speed: \" . $pj->getMaxSpeed() . \"\\n\";\r\necho \"\\$pj's maximum altitude: \" . $pj->getMaxAltitude() . \"\\n\";\r\n// -----------------------------------------\r\nfinal class MathLibrary \r\n{\r\n\tprivate function MathLibrary() {}\t// disallows instantiation\r\n\tpublic static function sin() { ... }\r\n\t// ...\r\n}\r\n$v = MathLibrary::sin(2.34);\r\n// -----------------------------------------\r\ninterface MyCollection \r\n{\r\n        function put($item);\r\n        function get();\r\n}\r\nclass MyList implements MyCollection \r\n{\r\n\tpublic function put($item)\r\n\t{\r\n\t\t// implement method\r\n\t}\r\n\tpublic function get()\r\n\t{\r\n\t\t// implement method\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n##Class Members\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>class-member-declarations:</i>\r\n    <i>class-member-declaration</i>\r\n    <i>class-member-declarations   class-member-declaration</i>\r\n\r\n   <i>class-member-declaration:</i>\r\n     <i>const-declaration</i>\r\n     <i>property-declaration</i>\r\n     <i>method-declaration</i>\r\n     <i>constructor-declaration</i>\r\n     <i>destructor-declaration</i>\r\n</pre>\r\n\r\n*const-declaration* is defined in [§§](#constants-2); *property-declaration* is\r\ndefined in [§§](#properties); *method-declaration* is defined in [§§](#methods);\r\n*constructor-declaration* is defined in [§§](#names); and\r\n*destructor-declaration* is defined in [§§](#destructors).\r\n\r\n**Semantics**\r\n\r\nThe members of a class are those specified by its\r\n*class-member-declaration*s, and the members inherited from its base\r\nclass. (A class may also contain dynamic members, as described in [§§](#dynamic-members).\r\nHowever, as these have no compile-time names, they can only be accessed\r\nvia method calls.)\r\n\r\nA class may contain the following members:\r\n\r\n-   Constants – the constant values associated with the class ([§§](#constants-2)).\r\n-   Properties – the variables of the class ([§§](#properties)).\r\n-   Methods – the computations and actions that can be performed by the\r\n    class ([§§](#methods), [§§](#methods-with-special-semantics)).\r\n-   Constructor – the actions required to initialize an instance of the\r\n    class ([§§](#constructors))\r\n-   Destructor – the actions to be performed when an instance of the\r\n    class is no longer needed ([§§](#destructors)).\r\n\r\nA number of names are reserved for methods with special semantics, which\r\nuser-defined versions must follow. These are described in ([§§](#methods-with-special-semantics)).\r\n\r\nMethods and properties can either be *static* or *instance* members. A\r\nstatic member is declared using `static`. An instance member is one that\r\nis not static. The name of a static method or property can never be used\r\non its own; it must always be used as the right-hand operand of the\r\nscope resolution operator ([§§](#scope-resolution-operator)). The name of an instance method or\r\nproperty can never be used on its own; it must always be used as the\r\nright-hand operand of the member selection operator ([§§](#member-selection-operator)).\r\n\r\nEach instance of a class contains its own, unique set of instance\r\nproperties of that class. An instance member is accessed via the\r\n`->` operator ([§§](#member-selection-operator)). In contrast, a static property designates\r\nexactly one VSlot for its class, which does not belong to any instance,\r\nper se. A static property exists whether or not any instances of that\r\nclass exist. A static member is accessed via the `::` operator ([§§](#scope-resolution-operator)).\r\n\r\nWhen any instance method operates on a given instance of a class, within\r\nthat method that object can be accessed via `$this` ([§§](#general-11)). As a\r\nstatic method does not operate on a specific instance, it has no `$this`.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate static $pointCount = 0;\t\t\t// static property\r\n\r\n\tprivate $x;\t\t\t\t\t\t\t// instance property\r\n\tprivate $y;\t\t\t\t\t\t\t// instance property\r\n\r\n\tpublic static function getPointCount()\t\t// static method\r\n\t{\r\n\t\treturn self::$pointCount;\t\t\t// access static property\r\n\t}\r\n\tpublic function move($x, $y)\t\t\t\t// instance method\r\n\t{\r\n\t\t$this->x = $x;\r\n\t\t$this->y = $y;\r\n\t}\r\n\tpublic function __construct($x = 0, $y = 0)\t// instance method\r\n\t{\r\n\t\t$this->x = $x; \t\t\t\t\t// access instance property\r\n\t\t$this->y = $y; \t\t\t\t\t// access instance property\r\n\t\t++self::$pointCount; \t\t\t\t// access static property\r\n\t}\r\n\tpublic function __destruct()\t\t\t\t// instance method\r\n\t{\r\n\t\t--self::$pointCount; \t\t\t\t// access static property\r\n\t\t...\r\n\t}\r\n\t...\r\n}\r\necho \"Point count = \" . Point::getPointCount() . \"\\n\";\r\n$cName = 'Point';\r\necho \"Point count = \" . $cName::getPointCount() . \"\\n\";\r\n```\r\n\r\n##Dynamic Members\r\n\r\nOrdinarily, all of the instance properties and methods of a class are\r\ndeclared explicitly in that class's definition. However, other\r\nmembers—*dynamic properties* and, under certain circumstances, *dynamic\r\nmethods*—can be added to a particular instance of a class or to the\r\nclass as a whole at runtime. A dynamic property can also be removed from\r\nan instance at runtime. In the case of dynamic properties, if a class\r\nmakes provision to do so by defining a series of special methods, it can\r\ndeal with the allocation and management of storage for those properties,\r\nby storing them in another object or in a database, for example. (The\r\ndefault behavior is for the Engine to allocate a VSlot for each one.)\r\nThis is called *class-specific dynamic allocation*. Otherwise, the\r\nEngine takes care of the storage in some unspecified manner. Dynamic\r\nmethod handling is only possible when ** class-specific dynamic\r\nallocation is used.\r\n\r\nConsider the following scenario, which involves dynamic properties:\r\n\r\n```\r\nclass Point { ... } // has no public property \"color\", but has made\r\n                    // provision to support dynamic properties.\r\n$p = new Point(10, 15);\r\n$p->color = \"red\"; // create/set the dynamic property \"color\"\r\n$v = $p->color;    // get the dynamic property \"color\"\r\nisset($p->color);  // test if the dynamic property \"color\" exists\r\nunset($p->color);  // remove the dynamic property \"color\"\r\n```\r\n\r\nFor the ** class-specific dynamic allocation scenario, when a property\r\nname that is not currently visible (because it is hidden or it does not\r\nexist) is used in a modifiable lvalue context (as with the assignment of\r\n\"red\"), the Engine generates a call to the instance method `__set`\r\n([§§](#method-__set)). This method treats that name as designating a dynamic\r\nproperty of the instance being operated on, and sets its value to \"red\",\r\ncreating the property, if necessary. Similarly, in a non-lvalue context,\r\n(as with the assignment of color to $v), the Engine generates a call to\r\nthe instance method `__get` ([§§](#method-__get)), which treats that name as\r\ndesignating a dynamic property of the instance being operated on, and\r\ngets its value. In the case of the call to the intrinsic `isset`\r\n([§§](#isset)), this generates a call to the instance method `__isset`\r\n([§§](#method-__isset)), while a call to the intrinsic `unset` ([§§](#unset)) generates a\r\ncall to the instance method `__unset` ([§§](#method-__unset)). By defining these\r\nfour special methods, the implementer of a class can control how dynamic\r\nproperties are handled. For the non-class-specific dynamic allocation\r\nscenario, the process is like that above except that no special `__*`\r\nmethods are called.\r\n\r\nIn the case of a dynamic method, no method is really added to the\r\ninstance or the class. However, the illusion of doing that is achieved\r\nby allowing a call to an instance or static method, but one which is not\r\ndeclared in that instance's class, to be accepted, intercepted by a\r\nmethod called `__call` ([§§](#method-__call)) or `__callStatic` ([§§](#method-__callstatic)), and\r\ndealt with under program control. \r\n\r\nConsider the following code fragment, in which class Widget has neither\r\nan instance method called `iMethod` nor a static method called `sMethod`,\r\nbut that class has made provision to deal with dynamic methods:\r\n\r\n```\r\n$obj = new Widget;\r\n$obj->iMethod(10, TRUE, \"abc\");\r\nWidget::sMethod(NULL, 1.234);\r\n```\r\n\r\nThe call to `iMethod` is treated as if it were\r\n\r\n```\r\n$obj->__call('iMethod', array(10, TRUE, \"abc\"))\r\n```\r\n\r\nand the call to `sMethod` is treated as if it were\r\n\r\n```\r\nWidget::__callStatic('sMethod', array(NULL, 1.234))\r\n```\r\n\r\n##Constants\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>const-declaration:</i>\r\n    const  <i>name</i>  =  <i>const-expression</i>   ;\r\n</pre>\r\n\r\n*name* is defined in ([§§](#names)). *const-expression* is defined in\r\n([§§](#constant-expressions)).\r\n\r\n**Constraints:**\r\n\r\nA *const-declaration* must only appear at the top level of a script, be\r\na *class constant* (inside a *class-definition*; [§§](#class-members)) or be an\r\n*interface constant* (inside an *interface-definition;* [§§](#interface-members)).\r\n\r\nA *const-declaration* must not redefine an existing c-constant ([§§](#general-4)).\r\n\r\nA class constant must not have an explicit visibility specifier ([§§](#general-23)).\r\n\r\nA class constant must not have an explicit `static` specifier.\r\n\r\n**Semantics:**\r\n\r\nA *const-declaration* defines a c-constant.\r\n\r\nAll class constants have public visibility.\r\n\r\nAll constants are implicitly `static`.\r\n\r\n**Examples:**\r\n\r\n```\r\nconst MIN_VAL = 20;\r\nconst LOWER = MIN_VAL;\r\n// -----------------------------------------\r\nclass Automobile\r\n{\r\n  const DEFAULT_COLOR = \"white\";\r\n  ...\r\n}\r\n$col = Automobile::DEFAULT_COLOR;\r\n```\r\n\r\n##Properties\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>property-declaration:</i>\r\n    <i>property-modifier   name   property-initializer<sub>opt</sub></i>  ;\r\n\r\n  <i>property-modifier:</i>\r\n    var\r\n    <i>visibility-modifier   static-modifier<sub>opt</sub></i>\r\n    <i>static-modifier   visibility-modifier<sub>opt</sub></i>\r\n\r\n  <i>visibility-modifier:</i>\r\n    public\r\n    protected\r\n    private\r\n\r\n  <i>static-modifier:</i>\r\n    static\r\n\r\n  <i>property-initializer:</i>\r\n    =  <i>constant-expression</i>\r\n</pre>\r\n\r\n\r\n*name* is described in [§§](#names) and *constant-expression* is described\r\nin [§§](#constant-expressions).\r\n\r\n**Semantics**\r\n\r\nA *property-declaration* defines an instance or static property.\r\n\r\nThe visibility modifiers are described in [§§](#general-23). If\r\n*visibility-modifier* is omitted, public is assumed. The var modifier\r\nimplies public visibility. The `static` modifier is described in [§§](#class-members).\r\n\r\nThe *property-initializer*s for instance properties are applied prior to\r\nthe class's constructor being called. \r\n\r\nAn instance property that is visible may be unset ([§§](#unset)), in which\r\ncase, the property is actually removed from that instance.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n  private static $pointCount = 0; // static property with initializer\r\n  \r\n  private $x; // instance property\r\n  private $y; // instance property\r\n  ...\r\n\r\n}\r\n```\r\n\r\n##Methods\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  method-declaration:\r\n    <i>method-modifiers<sub>opt</sub>   function-deﬁnition</i>\r\n    <i>method-modifiers   function-deﬁnition-header</i>  ;\r\n\r\n  <i>method-modifiers:</i>\r\n    <i>method-modifier</i>\r\n    <i>method-modifiers   method-modifier</i>\r\n\r\n  <i>method-modifier:</i>\r\n    <i>visibility-modifier</i>\r\n    <i>static-modifier</i>\r\n    abstract\r\n    final\r\n</pre>\r\n\r\n*visibility-modifier* is described in [§§](#general-23); *static-modifier* is\r\ndescribed in [§§](#class-members); and *function-deﬁnition* and\r\n*function-deﬁnition-header* are defined in [§§](#function-definitions).\r\n\r\n**Constraints**\r\n\r\nWhen defining a concrete class that inherits from an abstract class, the\r\ndefinition of each abstract method inherited by the derived class must\r\nhave the same or a\r\nless-restricted [visibility](http://www.php.net/manual/en/language.oop5.visibility.php)\r\nthan in the corresponding abstract declaration. Furthermore, the\r\nsignature of a method definition must match that of its abstract\r\ndeclaration.\r\n\r\nThe *method-modifiers* preceding a *function-deﬁnition* must not contain\r\nthe `abstract` modifier.\r\n\r\nThe *method-modifiers* preceding a *function-deﬁnition-header* must\r\ncontain the `abstract` modifier.\r\n\r\nA method must not have the same modifier specified more than once. A\r\nmethod must not have more than one *visibility-modifier*. A method must\r\nnot have both the modifiers `abstract` and `private`, or `abstract` and `final`.\r\n\r\n**Semantics**\r\n\r\nA *method-declaration* defines an instance or static method. A method is\r\na function that is defined inside a class. However, the presence of\r\n`abstract` indicates an abstract method, in which case, no implementation\r\nis provided. The absence of `abstract` indicates a concrete method, in\r\nwhich case, an implementation is provided.\r\n\r\nMethod names are case-insensitive.\r\n\r\nThe presence of `final` indicates the method cannot be overridden in a\r\nderived class.\r\n\r\nIf *visibility-modifier* is omitted, `public` is assumed.\r\n\r\n**Examples**\r\n\r\nSee [§§](#class-members) for examples of instance and static methods. See [§§](#class-declarations) for\r\nexamples of abstract methods and their subsequent definitions.\r\n\r\n##Constructors\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>constructor-deﬁnition:</i>\r\n    <i>visibility-modifier</i>  function &<sub>opt</sub>   __construct  (  <i>parameter-declaration-list<sub>opt</sub></i>  )  <i>compound-statement</i>\r\n    <i>visibility-modifier</i>  function &<sub>opt</sub>    <i>name</i>  (  <i>parameter-declaration-list<sub>opt</sub></i>  )  <i>compound-statement </i>    <b>[Deprecated form]</b>\r\n\r\n</pre>\r\n\r\n*visibility-modifier* is described in [§§](#general-23);\r\n*parameter-declaration-list* is described in [§§](#function-definitions); and\r\n*compound-statement* is described in [§§](#compound-statements). *name* is described in\r\n[§§](#names).\r\n\r\n**Constraints**\r\n\r\nAn overriding constructor in a derived class must have the same or a\r\nless-restricted [visibility](http://www.php.net/manual/en/language.oop5.visibility.php)\r\nthan that being overridden in the base class.\r\n\r\n*name* must be the same as that in the *class-declaration* ([§§](#class-declarations)) that\r\ncontains this *constructor-definition*.\r\n\r\n**Semantics**\r\n\r\nA constructor is a specially named instance method ([§§](#methods)) that is used\r\nto initialize an instance immediately after it has been created. Any\r\ninstance properties not explicitly initialized by a constructor take on\r\nthe value `NULL`. Like a method, a constructor can return a result by\r\nvalue or byRef. (Unlike a method, a constructor cannot be abstract or\r\nstatic.)\r\n\r\nIf *visibility-modifier* is omitted, `public` is assumed. A `private`\r\nconstructor inhibits the creation of an instance of the class type.\r\n\r\nConstructors can be overridden in a derived class by redeclaring them.\r\nHowever, an overriding constructor need not have the same signature as\r\ndefined in the base class. \r\n\r\nConstructors are called by *object-creation-expression*s ([§§](#the-new-operator))\r\nand from within other constructors.\r\n\r\nIf classes in a derived-class hierarchy have constructors, it is the\r\nresponsibility of the constructor at each level to call the constructor\r\nin its base-class explicitly, using the notation\r\n`parent::__construct(...)`. If a constructor calls its base-class\r\nconstructor, it should do so as the first statement in\r\n*compound-statement*, so the object hierarchy is built from the\r\nbottom-up. A constructor should not call its base-class constructor more\r\nthan once. A call to a base-class constructor searches for the nearest\r\nconstructor in the class hierarchy. Not every level of the hierarchy\r\nneed have a constructor.\r\n\r\nPrior to the addition of the `__construct` form of constructor, a\r\nclass's constructor was called the same as its class name. For example,\r\nclass `Point`'s constructor was called `Point`. Although this old-style form\r\nis supported, its use is deprecated. In any event, both\r\n`parent::__construct(...)` and `parent::name(...)` (where `name` is the name\r\nof the parent class type) will find an old- or a new-style constructor\r\nin the base class, if one exists. If both forms exist, the new-style one\r\nis used. The same is true of an *object-creation-expression* when\r\nsearching for a base-class constructor.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate static $pointCount = 0;\r\n\tprivate $x;\r\n\tprivate $y;\r\n\tpublic function __construct($x = 0, $y = 0)\r\n\t{\r\n\t\t$this->x = $x;\r\n\t\t$this->y = $y;\r\n\t\t++self::$pointCount;\r\n\t}\r\n\tpublic function __destruct()\r\n\t{\r\n\t\t--self::$pointCount;\r\n\t\t...\r\n\t}\r\n\t...\r\n}\r\n// -----------------------------------------\r\nclass MyRangeException extends Exception \r\n{\r\n\tpublic function __construct($message, ...)\r\n\t{\r\n\t\tparent::__construct($message);\r\n\t\t...\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n##Destructors\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>destructor-deﬁnition:</i>\r\n    <i>visibility-modifier</i>  function  &<sub>opt</sub>  __destruct  ( ) <i>compound-statement</i>\r\n</pre>\r\n\r\n*visibility-modifier* is described in [§§](#general-23) and *compound-statement* is\r\ndescribed in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nAn overriding destructor in a derived class must have the same or a\r\nless-restricted [visibility](http://www.php.net/manual/en/language.oop5.visibility.php)\r\nthan that being overridden in the base class.\r\n\r\n**Semantics**\r\n\r\nA destructor is a special-named instance method ([§§](#methods)) that is used to\r\nfree resources when an instance is no longer needed. The destructors for\r\ninstances of all classes are called automatically once there are no\r\nhandles pointing to those instances or in some unspecified order during\r\nprogram shutdown. Like a method, a destructor can return a result by\r\nvalue or byRef. (Unlike a method, a destructor cannot be abstract or\r\nstatic.)\r\n\r\nIf *visibility-modifier* is omitted, `public` is assumed. \r\n\r\nDestructors can be overridden in a derived class by redeclaring them. \r\n\r\nDestructors are called by the Engine or from within other destructors.\r\n\r\nIf classes in a derived-class hierarchy have destructors, it is the\r\nresponsibility of the destructor at each level to call the destructor in\r\nthe base-class explicitly, using the notation `parent::__destruct()`. If\r\na destructor calls its base-class destructor, it should do so as the\r\nlast statement in *compound-statement*, so the object hierarchy is\r\ndestructed from the top-down. A destructor should not call its\r\nbase-class destructor more than once. A call to a base-class destructor\r\nsearches for the nearest destructor in the class hierarchy. Not every\r\nlevel of the hierarchy need have a destructor. A `private` destructor\r\ninhibits destructor calls from derived classes.\r\n\r\nAny dynamic properties\r\n([§](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12)14.4,\r\n[§](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12)14.10.8)\r\nhaving an object type, and whose parent instances exist when the program\r\nterminates will have their destructors (if any) called as part of the\r\ncleanup of the parent instances, even if the parent class type has no\r\ndestructor defined.\r\n\r\n**Examples**\r\n\r\nSee [§§](#constructors) for an example of a constructor and destructor.\r\n\r\n##Methods with Special Semantics\r\n\r\n###General\r\n\r\nIf a class contains a definition for a method having one of the\r\nfollowing names, that method must have the prescribed visibility,\r\nsignature, and semantics:\r\n\r\nMethod Name\t| Description | Reference\r\n------------|-------------|----------\r\n`__call` | Calls a dynamic method in the context of an instance-method call | [§§](#method-__call)\r\n`__callStatic` | Calls a dynamic method in the context of a static-method call | [§§](#method-__callstatic)\r\n__clone |Typically used to make a deep copy ([§§](#)) of an object | [§§](#method-__clone)\r\n`__construct` | A constructor | \t[§§](#constructors)\r\n`__destruct` | A destructor |\t[§§](#destructors)\r\n`__get` | Retrieves the value of a given dynamic property |\t[§§](#method-__get)\r\n`__invoke` | Called when a script calls an object as a function |\t[§§](#method-__invoke)\r\n`__isset` | Reports if a given dynamic property exists |\t[§§](#method-__isset)\r\n`__set` | Sets the value of a given dynamic property |\t[§§](#method-__set) \r\n`__set_state` | Called when a class is exported by `var_export` (§xx) | [§§](#method-__set_state)\r\n`__sleep` | Executed before serialization ([§§](#serialization)) of an instance of this class | [§§](#method-__sleep)\r\n`__toString` | Returns a string representation of the instance on which it is called | \t[§§](#method-__tostring)\r\n`__unset` | Removes a given dynamic property |\t[§§](#method-__unset)\r\n`__wakeup` | Executed after unserialization ([§§](#serialization)) of an instance of this class | [§§](#method-__wakeup)\r\n\r\n###Method `__call`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  public  function  __call  (  <i>$name</i>  ,  <i>$arguments</i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe argument corresponding to `$name` must have type `string`, and that\r\ncorresponding to `$arguments` must have type `array`.\r\n\r\nThe arguments passed to this method must not be passed byRef.\r\n\r\n**Semantics**\r\n\r\nThis instance method is called to invoke the dynamic method ([§§](#dynamic-members))\r\ndesignated by `$name` using the arguments specified by the elements of\r\nthe array designated by `$arguments`. It can return any value deemed\r\nappropriate.\r\n\r\nTypically, `__call` is called implicitly, when the `->` operator\r\n([§§](#member-selection-operator)) is used to call an instance method that is not visible. Now\r\nwhile `__call` can be called explicitly, the two scenarios do not\r\nnecessarily produce the same result. Consider the expression `p->m(...)`,\r\nwhere `p` is an instance and `m` is an instance-method name. If `m` is the\r\nname of a visible method, `p->m(...)` does not result in `__call`'s being\r\ncalled. Instead, the visible method is used. On the other hand, the\r\nexpression `p->__call('m',array(...))` always calls the named dynamic\r\nmethod, ignoring the fact that a visible method having the same name\r\nmight exist. If `m` is not the name of a visible method, the two\r\nexpressions are equivalent; that is; when handling `p->m(...)`, if no\r\nvisible method by that name is found, a dynamic method is assumed, and\r\n`__call` is called. (Note: While it would be unusual to create\r\ndeliberately a dynamic method with the same name as a visible one, the\r\nvisible method might be added later. This name \"duplication\" is\r\nconvenient when adding a dynamic method to a class without having to\r\nworry about a name clash with any method names that class inherits.)\r\n\r\nWhile a method-name source token has a prescribed syntax, there are no\r\nrestrictions on the spelling of the dynamic method name designated by\r\n*$name*. Any source character is allowed here.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Widget\r\n{\r\n\tpublic function __call($name, $arguments)\r\n\t{\r\n\t\t// using the method name and argument list, redirect/process\r\n\t\t// the method call, as desired.\r\n\t}\r\n\t...\r\n}\r\n$obj = new Widget;\r\n$obj->iMethod(10, TRUE, \"abc\");\t// $obj->__call('iMethod', array(...))\r\n```\r\n\r\n###Method `__callStatic`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  public  static  function  __callStatic  (  <i>$name</i>  ,  <i>$arguments</i>  )   <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe argument corresponding to `$name` must have type `string`, and that\r\ncorresponding to `$arguments` must have type `array`.\r\n\r\nThe arguments passed to this method must not be passed byRef.\r\n\r\n**Semantics**\r\n\r\nThis static method is called to invoke the dynamic method ([§§](#dynamic-members))\r\ndesignated by `$name` using the arguments specified by the elements of\r\nthe array designated by `$arguments`. It can return any value deemed\r\nappropriate.\r\n\r\nTypically, `__callStatic` is called implicitly, when the `::` operator\r\n([§§](#scope-resolution-operator)) is used to call a static method that is not visible. Now while\r\n`__callStatic` can be called explicitly, the two scenarios do not\r\nnecessarily produce the same result. Consider the expression `C::m(...)`,\r\nwhere `C` is a class and `m` is a static-method name. If `m` is the name of a\r\nvisible method, `C::m(...)` does not result in `__callStatic`'s being\r\ncalled. Instead, the visible method is used. On the other hand, the\r\nexpression `C::__callStatic('m',array(...))` always calls the named\r\ndynamic method, ignoring the fact that a static visible method having\r\nthe same name might exist. If m is not the name of a visible method, the\r\ntwo expressions are equivalent; that is; when handling `C::m(...)`, if no\r\nvisible method by that name is found, a dynamic method is assumed, and\r\n`__callStatic` is called. (Note: While it would be unusual to create\r\ndeliberately a static dynamic method with the same name as a static\r\nvisible one, the visible method might be added later. This name\r\n\"duplication\" is convenient when adding a dynamic method to a class\r\nwithout having to worry about a name clash with any method names that\r\nclass inherits.)\r\n\r\nWhile a method-name source token has a prescribed syntax, there are no\r\nrestrictions on the spelling of the dynamic method name designated by\r\n`$name`. Any source character is allowed here.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Widget\r\n{\r\n    public static function __callStatic($name, $arguments)\r\n    {\r\n      // using the method name and argument list, redirect/process\\\r\n      // the method call, as desired.\r\n    }\r\n    ...\r\n}\r\n\r\nWidget::sMethod(NULL, 1.234); // Widget::__callStatic('sMethod', array(...))\r\n```\r\n\r\n###Method `__clone`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  public  function  __clone  (  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Semantics**\r\n\r\nThis instance method is called by the `clone` operator ([§§](#the-clone-operator)),\r\n(typically) to make a deep copy ([§§](#)) of the current class component of the instance on which it is\r\ncalled. (Method `__clone` cannot be called directly by the program.) \r\n\r\nConsider a class `Employee`, from which is derived a class `Manager`. Let us\r\nassume that both classes contain properties that are objects. To make a\r\ncopy of a `Manager` object, its `__clone` method is called to do whatever\r\nis necessary to copy the properties for the `Manager` class. That method\r\nshould, in turn, call the `__clone` method of its parent class,\r\n`Employee`, so that the properties of that class can also be copied (and\r\nso on, up the derived-class hierarchy).\r\n\r\nTo clone an object, the `clone` operator makes a shallow copy ([§§](#)) of the object on which it is called.\r\nThen, if the class of the instance being cloned has a method called\r\n`__clone`, that method is automatically called to make a deep copy.\r\nMethod `__clone` cannot be called directly from outside a class; it can\r\nonly be called by name from within a derived class, using the notation\r\n`self::__clone()`. This method can return a value; however, if it does\r\nso and control returns directly to the point of invocation via the `clone`\r\noperator, that value will be ignored. The value returned to a\r\n`self::__clone()` call can, however, be retrieved.\r\n\r\nWhile cloning creates a new object, it does so without using a\r\nconstructor, in which case, code may need to be added to the `__clone`\r\nmethod to emulate what happens in a corresponding constructor. (See the\r\n`Point` example below.)\r\n\r\nAn implementation of `__clone` should factor in the possibility of an\r\ninstance having dynamic properties ([§§](#dynamic-members)).\r\n\r\n**Examples**\r\n\r\n```\r\nclass Employee\r\n{\r\n\t...\r\n\tpublic function __clone() \r\n\t{\r\n\t\t// do what it takes here to make a copy of Employee object properties\r\n\t}\r\n}\r\nclass Manager extends Employee\r\n{\r\n\t...\r\n\tpublic function __clone() \r\n\t{\r\n\t\tparent::__clone(); // request cloning of the Employee properties\r\n\r\n\t\t// do what it takes here to make a copy of Manager object properties\r\n\t}\r\n\t...\r\n}\r\n// -----------------------------------------\r\nclass Point \r\n{\r\n\tprivate static $pointCount = 0;\r\n\tpublic function __construct($x = 0, $y = 0) \r\n\t{\r\n\t\t...\r\n\t\t++self::$pointCount;\r\n\t}\r\n\tpublic function __clone() \r\n\t{\r\n\t\t++self::$pointCount; // emulate the constructor\r\n\t}\r\n\t...\r\n}\r\n$p1 = new Point;\t// created using the constructor\r\n$p2 = clone $p1; \t// created by cloning\r\n```\r\n\r\n###Method `__get`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  public  function  &<sub>opt</sub>  __get  (  <i>$name</i>  )   <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe argument passed to this method must have type `string` and be passed\r\nby value.\r\n\r\n**Semantics**\r\n\r\nThis instance method gets the value of the dynamic property ([§§](#dynamic-members))\r\ndesignated by `$name`. If no such dynamic property currently exists,\r\nNULL is returned.\r\n\r\nTypically, `__get` is called implicitly, when the `->` operator ([§§](#member-selection-operator))\r\nis used in a non-lvalue context and the named property is not visible.\r\nNow while `__get` can be called explicitly, the two scenarios do not\r\nnecessarily produce the same result. Consider the expression\r\n`$v = $p->m`, where `p` is an instance and `m` is a property name. If `m` is\r\nthe name of a visible property, `p->m` does not result in `__get`'s being\r\ncalled. Instead, the visible property is used. On the other hand, the\r\nexpression `p->__get('m')` always gets the value of the named dynamic\r\nproperty, ignoring the fact that a visible property having the same name\r\nmight exist. If `m` is not the name of a visible property, the two\r\nexpressions are equivalent; that is; when handling `p->m` in a non-lvalue\r\ncontext, if no visible property by that name is found, a dynamic\r\nproperty is assumed, and `__get` is called.\r\n\r\nConsider the expression $`v = $p->m = 5`, where `m` is a dynamic\r\nproperty. While `__set` ([§§](#method-__set)) is called to assign the value 5 to\r\nthat property, `__get` is not called to retrieve the result after that\r\nassignment is complete.\r\n\r\nIf the dynamic property is an array, `__get` should return byRef, so\r\nsubscripting can be done correctly on the result.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n    private $dynamicProperties = array();\r\n    private $x;\r\n    private $y;\r\n    public function __get($name)\r\n    {\r\n        if (array_key_exists($name, $this->dynamicProperties))\r\n        {\r\n            return $this->dynamicProperties[$name];\r\n        }\r\n\r\n        // no-such-property error handling goes here\r\n        return NULL;\r\n    }\r\n\t...\r\n}\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nConsider the following class, which does **not** contain a property\r\ncalled prop:\r\n\r\n```\r\nclass C\r\n{\r\n\tpublic function __get($name)\r\n\t{\r\n\t\treturn $this->$name;    // must not recurse\r\n\t}\r\n\t...\r\n}\r\n$c = new C;\r\n$x = $c->prop;\r\n```\r\n\r\n\r\nAs no property (dynamic or otherwise) by the name prop exists in the\r\nclass and a `__get` method is defined, this looks look a recursive\r\nsituation. However, the implementation must not allow that. The same\r\napplies to seemingly self-referential implementations of `__set`\r\n([§§](#method-__set)), `__isset` ([§§](#method-__isset)), and `__unset` ([§§](#method-__unset)).\r\n\r\n###Method `__invoke`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __invoke  ( <i>parameter-declaration-list<sub>opt</sub></i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*parameter-declaration-list* is defined in [§§](#function-definitions); *compound-statement*\r\nis described in [§§](#compound-statements).\r\n\r\n**Semantics**\r\n\r\nThis instance method allows an instance to be used with function-call\r\nnotation. An instance whose class provides this method will return `TRUE`\r\nwhen passed to `is_callable` (§xx); otherwise, `FALSE` is returned.\r\n\r\nWhen an instance is called as a function, the argument list used is made\r\navailable to `__invoke`, whose return value becomes the value of the\r\ninitial function call.\r\n\r\n**Examples**\r\n\r\n```\r\nclass C\r\n{\r\n\tpublic function __invoke($p)\r\n\t{\r\n\t\t...\r\n\t\treturn ...;\r\n\t}\r\n\t...\r\n}\r\n$c = new C;\r\nis_callable($c)\t\t// returns TRUE\r\n$r = $c(123);\t\t// becomes $r = $c->__invoke(123);\t\r\n```\r\n\r\n###Method `__isset`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __isset  (  <i>$name</i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe argument passed to this method must have type `string` and be passed\r\nby value.\r\n\r\n**Semantics**\r\n\r\nIf the dynamic property ([§§](#dynamic-members)) designated by `$name` exists, this\r\ninstance method returns `TRUE`; otherwise, `FALSE` is returned.\r\n\r\nTypically, `__isset` is called implicitly, when the intrinsic `isset`\r\n([§§](#isset)) is called with an argument that designates a property that\r\nis not visible. (It can also be called by the intrinsic empty\r\n([§§](#empty)).) Now while `__isset` can be called explicitly, the two\r\nscenarios do not necessarily produce the same result. Consider the\r\nexpression `isset($p->m)`, where `p` is an instance and `m` is a property\r\nname. If `m` is the name of a visible property, `__isset` is not called.\r\nInstead, the visible property is used. On the other hand, the expression\r\n`p->__isset('m')` always tests for the named dynamic property, ignoring\r\nthe fact that a visible property having the same name might exist. If `m`\r\nis not the name of a visible property, the two expressions are\r\nequivalent; that is; when handling `p->m` in a non-lvalue context, if no\r\nvisible property by that name is found, a dynamic property is assumed.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n    private $dynamicProperties = array();\r\n    private $x;\r\n    private $y;\r\n    public function __isset($name)\r\n    {\r\n        return isset($this->dynamicProperties[$name]);\r\n    }\r\n\t...\r\n}\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nSee the Implementation Notes for `__get` ([§§](#method-__get)).\r\n\r\n###Method `__set`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __set  (  <i>$name</i>  ,  <i>$value</i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe arguments passed to this method must not be passed byRef.\r\n\r\nThe argument corresponding to `$name` must have type `string`.\r\n\r\n**Semantics**\r\n\r\nThis instance method sets the value of the dynamic property ([§§](#dynamic-members))\r\ndesignated by `$name` to `$value`. If no such dynamic property\r\ncurrently exists, it is created. No value is returned.\r\n\r\nTypically, `__set` is called implicitly, when the `->` operator ([§§](#member-selection-operator))\r\nis used in a modifiable lvalue context and the named property is not\r\nvisible. Now while `__set` can be called explicitly, the two scenarios\r\ndo not necessarily produce the same result. Consider the expression\r\n`p->m = 5`, where `p` is an instance and `m` is a property name. If `m` is the\r\nname of a visible property, `p->m` does not result in `__set`'s being\r\ncalled. Instead, the visible property is used. On the other hand, the\r\nexpression `p->__set('m',5)` always sets the value of the named dynamic\r\nproperty, ignoring the fact that a visible property having the same name\r\nmight exist. If `m` is not the name of a visible property, the two\r\nexpressions are equivalent; that is; when handling `p->m`, if no visible\r\nproperty by that name is found, a dynamic property is assumed, and\r\n`__set` is called. (Note: While it would be unusual to create\r\ndeliberately a dynamic property with the same name as a visible one, the\r\nvisible property might be added later. This name \"duplication\" is\r\nconvenient when adding a dynamic property to a class without having to\r\nworry about a name clash with any property names that class inherits.)\r\n\r\nThe parameter `$value` can have any type including an object type, and\r\nthat type could have a destructor. Any dynamic properties of such types,\r\nwhose parent instances exist when the program terminates will have their\r\ndestructors called as part of the cleanup of the parent instances, even\r\nif the parent class type has no destructor defined.\r\n\r\nWhile a property-name source token has a prescribed syntax, there are no\r\nrestrictions on the spelling of the dynamic property name designated by\r\n`$name`. Any source character is allowed here.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n    private $dynamicProperties = array();\r\n    private $x;\r\n    private $y;\r\n    public function __set($name, $value)\r\n    {\r\n        $this->dynamicProperties[$name] = $value;\r\n    }\r\n\t...\r\n}\r\n// -----------------------------------------\r\nclass X\r\n{\r\n    public function __destruct() { ... }\r\n}\r\n$p = new Point(5, 9);\r\n$p->thing = new X;  // set dynamic property \"thing\" to instance with destructor\r\n...\r\n// at the end of the program, p->thing's destructor is called\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nSee the Implementation Notes for `__get` ([§§](#method-__get)).\r\n\r\n###Method `__set_state`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\nstatic public  function  __set_state  ( array  <i>$properties</i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\n`$properties` must contain a key/value pair for each instance property\r\nin the class and all its direct and indirect base classes, where each\r\nkey is the name of a property in that class.\r\n\r\n**Semantics**\r\n\r\nThis function supports the library function `var_export` (§xx) when it is\r\ngiven an instance of this class type. `var_export` takes a variable and\r\nproduces a string representation of that variable as valid PHP code\r\nsuitable for use with the intrinsic `eval` ([§§](#eval)). \r\n\r\nFor an object, the string returned by `var_export` has the following\r\ngeneral format:\r\n\r\n`classname::__set_state(array('prop1' => value, ..., 'propN'\r\n=> value , ))` \r\n\r\nwhere the property names `prop1` through `propN` do not include a\r\nleading dollar (`$`). This string contains a call to the `__set_state`\r\nmethod even if no such method is defined for this class or in any of its\r\nbase classes, in which case, a subsequent call to `eval` using this string\r\nwill fail. To allow the string to be used with eval, the method\r\n`__set_state` must be defined, and it must create a new instance of the\r\nclass type, initialize its instance properties using the key/value pairs\r\nin `$properties`, and it must return that new object. \r\n\r\nIf a derived class does not define a `__set_state` method, a call to it\r\nwill look for such a method in the base class hierarchy, and that method\r\nwill return an instance of the appropriate base class, not of the class\r\non which it was invoked. This is probably not what the programmer\r\nexpected. If a derived class defines a `__set_state` method, but any\r\nbase class has instance properties that are not visible within that\r\nmethod, that method must invoke parent's `__set_state` as well, but\r\nthat can require support from a base class. See the second example\r\nbelow.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate $x;\r\n\tprivate $y;\r\n\tstatic public function __set_state(array $properties)\r\n\t{\r\n\t\t$p = new Point;\r\n\t\t$p->x = $properties['x'];\r\n\t\t$p->y = $properties['y'];\r\n\t\treturn $p;\r\n\t}\r\n\t...\r\n}\r\n$p = new Point(3, 5);\r\n$v = var_export($p, TRUE);\t// returns string representation of $p\r\n```\r\nThe string produced looks something like the following:\r\n\r\n```\r\n\"Point::__set_state(array(\r\n   'x' => 3,\r\n   'y' => 5,\r\n))\" \r\neval('$z = ' . $v . \";\");\t// execute the string putting the result in $z\r\necho \"Point \\$z is $z\\n\";\t// Point $z is (3,5)\r\n// -----------------------------------------\r\nclass B\t// base class of D\r\n{\r\n\tprivate $bprop;\r\n\tpublic function __construct($p)\r\n\t{\r\n\t\t$this->bprop = $p;\r\n\t}\r\n\tstatic public function __set_state(array $properties)\r\n\t{\r\n\t\t$b = new static($properties['bprop']);\t// note the static\r\n\t\treturn $b;\r\n\t\t// Because of the \"new static\", the return statement\r\n\t\t//   returns a B when called in a B context, and\r\n\t\t//   returns a D when called in a D context\r\n\t}\r\n}\r\nclass D extends B\r\n{\r\n\tprivate $dprop = 123;\r\n\tpublic function __construct($bp, $dp = NULL)\r\n\t{\r\n\t\t$this->dprop = $dp;\r\n\t\tparent::__construct($bp);\r\n\t}\r\n\tstatic public function __set_state(array $properties)\r\n\t{\r\n\t\t$d = parent::__set_state($properties); // expects back a D, NOT a B\r\n\t\t$d->dprop = $properties['dprop'];\r\n\t\treturn $d;\r\n\t}\r\n}\r\n$b = new B(10);\r\n$v = var_export($b, TRUE);\r\neval('$z = ' . $v . \";\");\r\n$d = new D(20, 30);\r\n$v = var_export($d, TRUE);\r\neval('$z = ' . $v . \";\");\r\n```\r\n\r\n###Method `__sleep`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __sleep  ( ) <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Semantics**\r\n\r\nThe instance methods `__sleep` and `__wakeup` ([§§](#method-__wakeup)) support\r\nserialization ([§§](#serialization)).\r\n\r\nIf a class has a `__sleep` method, the library function `serialize` (§xx)\r\ncalls that method to find out which visible instance properties it\r\nshould serialize. (In the absence of a `__sleep` or `serialize` method,\r\nall such properties are serialized, including any dynamic properties\r\n([§§](#dynamic-members)).) This information is returned by `__sleep` as an array of zero\r\nor more elements, where each element's value is distinct and is the name\r\nof a visible instance property. These properties' values are serialized\r\nin the order in which the elements are inserted in the array. If\r\n`__sleep` does not return a value explicitly, `NULL` is returned, and that\r\nvalue is serialized.\r\n\r\nBesides creating the array of property names, `__sleep` can do whatever\r\nelse might be needed before serialization occurs.\r\n\r\nConsider a `Point` class that not only contains x- and y-coordinates, it\r\nalso has an `id` property; that is, each distinct `Point` created during a\r\nprogram's execution has a unique numerical id. However, there is no need\r\nto include this when a `Point` is serialized. It can simply be recreated\r\nwhen that `Point` is unserialized. This information is transient and need\r\nnot be preserved across program executions. (The same can be true for\r\nother transient properties, such as those that contain temporary results\r\nor run-time caches.)\r\n\r\nIn the absence of methods `__sleep` and `__wakeup`, instances of derived\r\nclasses can be serialized and unserialized. However, it is not possible\r\nto perform customize serialization using those methods for such\r\ninstances. For that, a class must implement the interface Serializable\r\n([§§](#interface--serializable)).\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate static $nextId = 1;\r\n\tprivate $x;\r\n\tprivate $y;\r\n\tprivate $id;\r\n\tpublic function __construct($x = 0, $y = 0) \r\n\t{\r\n\t\t$this->x = $x;\r\n\t\t$this->y = $y;\r\n\t\t$this->id = self::$nextId++;\t// assign the next available id\r\n\t}\r\n\tpublic function __sleep() \r\n\t{\r\n\t\treturn array('y', 'x');\t// serialize only $y and $x, in that order\r\n\t}\r\n\tpublic function __wakeup() \r\n\t{\r\n\t\t$this->id = self::$nextId++;\t// assign a new id\r\n\t}\r\n\t...\r\n}\r\n$p = new Point(-1, 0);\r\n$s = serialize($p);\t\t// serialize Point(-1,0)\r\n$v = unserialize($s);\t\t// unserialize Point(-1,0)\r\n```\r\n\r\n###Method `__toString`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __toString  ( )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThis function must return a string.\r\n\r\nThis function must not throw any exceptions.\r\n\r\n**Semantics**\r\n\r\nThis instance method is intended to create a string representation of\r\nthe instance on which it is called. If the instance's class is derived\r\nfrom a class that has or inherits a `__toString` method, the result of\r\ncalling that method should be prepended to the returned string.\r\n\r\n`__toString` is called by a number of language and library facilities,\r\nincluding `echo`, when an object-to-string conversion is needed.\r\n`__toString` can be called directly.\r\n\r\nAn implementation of `__toString` should factor in the possibility of an\r\ninstance having dynamic properties ([§§](#dynamic-members)).\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate $x;\r\n\tprivate $y;\r\n\tpublic function __construct($x = 0, $y = 0) \r\n\t{\r\n\t\t$this->x = $x;\r\n\t\t$this->y = $y;\r\n\t}\r\n\tpublic function __toString() \r\n\t{\r\n\t\treturn '(' . $this->x . ',' . $this->y . ')';\r\n\t}\r\n\t...\t\r\n}\r\n$p1 = new Point(20, 30);\r\necho $p1 . \"\\n\";\t// implicit call to __toString() returns \"(20,30)\"\r\n// -----------------------------------------\r\nclass MyRangeException extends Exception \r\n{\r\n\tpublic function __toString() \r\n\t{\r\n\t\treturn parent::__toString()\r\n\t\t\t. string-representation-of-MyRangeException\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n###Method `__unset`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __unset  (  <i>$name</i>  )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nThe argument passed to this method must have type `string` and be passed\r\nby value.\r\n\r\n**Semantics**\r\n\r\nIf the dynamic property ([§§](#dynamic-members)) designated by `$name` exists, it is\r\nremoved by this instance method; otherwise, the call has no effect. No\r\nvalue is returned.\r\n\r\nTypically, `__unset` is called implicitly, when the intrinsic `unset`\r\n([§§](#unset)) is called with an argument that designates a property that\r\nis not visible. Now while `__unset` can be called explicitly, the two\r\nscenarios do not necessarily produce the same result. Consider the\r\nexpression `unset($p->m)`, where `p` is an instance and `m` is a property\r\nname. If `m` is the name of a visible property, `__unset` is not called.\r\nInstead, the visible property is used. On the other hand, the expression\r\n`p->__unset('m'))` always removes the named dynamic property, ignoring\r\nthe fact that a visible property having the same name might exist. If `m`\r\nis not the name of a visible property, the two expressions are\r\nequivalent; that is; when handling `p->m` in a non-lvalue context, if no\r\nvisible property by that name is found, a dynamic property is assumed.\r\n\r\n**Examples**\r\n\r\n```\r\nclass Point \r\n{\r\n    private $dynamicProperties = array();\r\n    private $x;\r\n    private $y;\r\n    public function __unset($name)\r\n    {\r\n        unset($this->dynamicProperties[$name]);\r\n    }\r\n\t...\r\n}\r\n```\r\n\r\n**Implementation Notes**\r\n\r\nSee the Implementation Notes for `__get` ([§§](#method-__get)).\r\n\r\n###Method `__wakeup`\r\n\r\n**Syntax**\r\n\r\n<pre>\r\npublic  function  __wakeup  ( )  <i>compound-statement</i>\r\n</pre>\r\n\r\n*compound-statement* is described in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nXx\r\n\r\n**Semantics**\r\n\r\nThe instance methods `__sleep` ([§§](#method-__sleep)) and `__wakeup` support\r\nserialization ([§§](#serialization)).\r\n\r\nWhen the library function `unserialize` (§xx) is called on the string\r\nrepresentation of an object, as created by the library function\r\n`serialize` (§xx), `unserialize` creates an instance of that object's type\r\n**without calling a constructor**, and then calls that class's\r\n`__wakeup` method, if any, to initialize the instance. In the absence of\r\na `__wakeup` method, all that is done is that the values of the instance\r\nproperties encoded in the serialized string are restored.\r\n\r\nConsider a `Point` class that not only contains x- and y-coordinates, it\r\nalso has an `id` property; that is, each distinct `Point` created during a\r\nprogram's execution has a unique numerical id. However, there is no need\r\nto include this when a `Point` is serialized. It can simply be recreated\r\nby `__wakeup` when that `Point` is unserialized. This means that\r\n`__wakeup` must emulate the constructor, as appropriate.\r\n\r\n`__wakeup` does not return a value.\r\n\r\n**Examples**\r\n\r\nSee [§§](#method-__sleep).\r\n\r\n##Serialization\r\n\r\nIn PHP, variables can be converted into some external form suitable for\r\nuse in file storage or inter-program communication. The process of\r\nconverting to this form is known as *serialization* while that of\r\nconverting back again is known as *unserialization*. These facilities\r\nare provided by the library functions `serialize` (§xx) and `unserialize`\r\n(§xx), respectively.\r\n\r\nIn the case of variables that are objects, on their own, these two\r\nfunctions serialize and unserialize all the instance properties, which\r\nmay be sufficient for some applications. However, if the programmer\r\nwants to customize these processes, they can do so in one of two,\r\nmutually exclusive ways. The first approach is to define methods called\r\n`__sleep` and `__awake`, and have them get control before serialization\r\nand after serialization, respectively. For information on this approach,\r\nsee [§§](#method-__sleep) and [§§](#method-__wakeup). The second approach involves implementing\r\nthe interface `Serializable` ([§§](#interface--serializable)) by defining two methods, `serialize`\r\nand `unserialize`.\r\n\r\nConsider a `Point` class that not only contains x- and y-coordinates, it\r\nalso has an `id` property; that is, each distinct `Point` created during a\r\nprogram's execution has a unique numerical id. However, there is no need\r\nto include this when a `Point` is serialized. It can simply be recreated\r\nwhen that `Point` is unserialized. This information is transient and need\r\nnot be preserved across program executions. (The same can be true for\r\nother transient properties, such as those that contain temporary results\r\nor run-time caches.) Furthermore, consider a class `ColoredPoint` that\r\nextends `Point` by adding a `color` property. The following code shows how\r\nthese classes need be defined in order for both `Points` and `ColoredPoints`\r\nto be serialized and unserialized:\r\n\r\n```\r\nclass Point implements Serializable\t// note the interface\r\n{\r\n\tprivate static $nextId = 1;\r\n\tprivate $x;\r\n\tprivate $y;\r\n\tprivate $id;\t// transient property; not serialized\r\n\tpublic function __construct($x = 0, $y = 0) \r\n\t{\r\n\t\t$this->x = $x;\r\n\t\t$this->y = $y;\r\n\t\t$this->id = self::$nextId++;\r\n\t}\r\n\tpublic function __toString() \r\n\t{\r\n\t\treturn 'ID:' . $this->id . '(' . $this->x . ',' . $this->y . ')';\r\n\t}\t\r\n\tpublic function serialize() \r\n\t{\r\n\t\treturn serialize(array('y' => $this->y, 'x' => $this->x));\r\n\t}\r\n```\r\n\r\nThe custom method `serialize` calls the library function `serialize` to\r\ncreate a string version of the array, whose keys are the names of the\r\ninstance properties to be serialized. The insertion order of the array\r\nis the order in which the properties are serialized in the resulting\r\nstring. The array is returned.\r\n\r\n```\r\n\tpublic function unserialize($data)\r\n\t{\r\n\t\t$data = unserialize($data);\r\n\t\t$this->x = $data['x'];\r\n\t\t$this->y = $data['y'];\r\n\t\t$this->id = self::$nextId++;\r\n\t}\r\n}\r\n```\r\n\r\nThe custom method `unserialize` converts the serialized string passed to\r\nit back into an array. Because a new object is being created, but\r\nwithout any constructor being called, the `unserialize` method must\r\nperform the tasks ordinarily done by a constructor. In this case, that\r\ninvolves assigning the new object a unique id.\r\n\r\n```\r\n$p = new Point(2, 5);\r\n$s = serialize($p);\r\n```\r\n\r\nThe call to the library function `serialize` calls the custom `serialize`\r\nmethod. Afterwards, the variable `$s` contains the serialized version of\r\nthe `Point(2,5)`, and that can be stored in a database or transmitted to a\r\ncooperating program. The program that reads or receives that serialized\r\nstring can convert its contents back into the corresponding variable(s),\r\nas follows:\r\n\r\n```\r\n$v = unserialize($s);\r\n```\r\n\r\nThe call to the library function `unserialize` calls the custom\r\n`unserialize` method. Afterwards, the variable `$s` contains a new\r\n`Point(2,5)`.\r\n\r\n\r\n```\r\nclass ColoredPoint extends Point implements Serializable\r\n{\r\n\tconst RED = 1;\r\n\tconst BLUE = 2;\r\n\r\n\tprivate $color;\t// an instance property\r\n\r\n\tpublic function __construct($x = 0, $y = 0, $color = RED) \r\n\t{\r\n\t\tparent::__construct($x, $y);\r\n\t\t$this->color = $color;\r\n\t}\r\n\r\n\tpublic function __toString() \r\n\t{\r\n\t\treturn parent::__toString() . $this->color;\r\n\t}\t\r\n\r\n\tpublic function serialize() \r\n\t{\r\n\t\treturn serialize(array(\r\n\t\t\t'color' => $this->color,\r\n\t\t\t'baseData' => parent::serialize()\r\n\t\t));\r\n\t}\r\n```\r\n\r\nAs with class `Point`, this custom method returns an array of the instance\r\nproperties that are to be serialized. However, in the case of the second\r\nelement, an arbitrary key name is used, and its value is the serialized\r\nversion of the base Point within the current `ColoredPoint` object. The\r\norder of the elements is up to the programmer.\r\n\r\n```\r\n    public function unserialize($data)\r\n    {\r\n\t\t$data = unserialize($data);\r\n\t\t$this->color = $data['color'];\r\n\t\tparent::unserialize($data['baseData']);\r\n    }\r\n}\r\n```\r\n\r\nAs `ColoredPoint` has a base class, it unserializes its own instance\r\nproperties before calling the base class's custom method, so it can\r\nunserialize the `Point` properties.\r\n\r\n```\r\n$cp = new ColoredPoint(9, 8, ColoredPoint::BLUE);\r\n$s = serialize($cp);\r\n...\r\n$v = unserialize($s);\r\n```\r\n\r\n##Predefined Classes\r\n\r\n### Class `Closure`\r\n\r\nThe predefined\r\nclass [`Closure`](http://www.php.net/manual/en/class.closure.php) is used\r\nfor representing an [anonymous\r\nfunction](http://www.php.net/manual/en/functions.anonymous.php). It\r\ncannot be instantiated except by the Engine, as described below.\r\n\r\n```\r\nclass Closure\r\n{\r\n\tpublic static bind(Closure $closure, $newthis [, $newscope = \"static\" ]);\r\n\tpublic bindTo($newthis [, $newscope = \"static\" ]);\r\n}\r\n\r\n```\r\n\r\nThe class members are defined below:\r\n\r\nName | Purpose\r\n-----|--------\r\n`bind` |\tDuplicates closure `$closure` with a specific bound object `$newthis` and class scope `$newscope`. Make `$newthis` `NULL` if the closure is to be unbound. `$newscope` is the class scope to which the closure is to be associated, or static to keep the current one. If an object is given, the type of the object will be used instead. This determines the visibility of protected and private methods of the bound object. Returns a new `Closure` object or `FALSE` on failure.\r\n`bindTo` |\tDuplicates the closure designated by the current instance with a new-bound object and class scope. This method is an instance version of bind. \r\n\r\nWhen the anonymous function-creation operator ([§§](#anonymous-function-creation)) is evaluated,\r\nthe result is an object of type `Closure` (or some unspecified class\r\nderived from that type) created by the Engine. This object is referred\r\nto here as \"the Closure object\". This instance encapsulates the\r\nanonymous function defined in the corresponding\r\n*anonymous-function-creation-expression*.\r\n\r\nThe contents of a `Closure` object are determined based on the context in\r\nwhich an anonymous function is created. Consider the following scenario:\r\n\r\n```\r\nclass C\r\n{\r\n\tpublic function compute()\r\n\t{\r\n\t\t$count = 0;\r\n\t\t$values = array(\"red\" => 3, 10);\r\n\t\t$callback = function ($p1, $p2) use (&$count, $values)\r\n\t\t{\r\n\t\t\t...\r\n\t\t};\r\n\t\t...\r\n\t}\r\n}\r\n\r\n```\r\n\r\nA `Closure` object may contain the following, optional dynamic properties,\r\nin order: `static`, `this`, and `parameter`.\r\n\r\nIf an *anonymous-function-creation-expression* contains an\r\n*anonymous-function-use-clause*, a dynamic property called `static` is\r\npresent. This property is an array having an element for each\r\n*variable-name* in the *use-variable-name-list*, inserted in lexical\r\norder of their appearance in the use clause. Each element's key is the\r\ncorresponding *variable-name*, and each element value is the value of\r\nthat variable at the time the time the `Closure` object is created (not\r\nwhen it is used to call the encapsulated function). In the scenario\r\nabove, this leads to the following, shown as pseudo code:\r\n\r\n```\r\n$this->static = array([\"count\"]=>&0,[\"values\"]=>array([\"red\"]=>3,[0]=>10));\r\n```\r\n\r\nIf an *anonymous-function-creation-expression* is used inside an\r\ninstance method, a dynamic property called `this` is present. This\r\nproperty is a handle that points to the current instance. In the\r\nscenario above, this leads to the following, shown as pseudo code:\r\n\r\n```\r\n$this->this = $this;\r\n```\r\n\r\nIf an *anonymous-function-creation-expression* contains a\r\n*parameter-declaration-list*, a dynamic property called `parameter` is\r\npresent. This property is an array of one or more elements, each of\r\nwhich corresponds to a parameter. The elements are inserted in that\r\narray in lexical order of their declaration. Each element's key is the\r\ncorresponding parameter name, and each element value is some unspecified\r\nvalue. (These values are overridden by the argument values used when the\r\nanonymous function is called.) In the scenario above, this leads to the\r\nfollowing, shown as pseudo code:\r\n\r\n```\r\n$property = array(\"$p1\" => ???, \"$p2\" => ???)\r\n```\r\n\r\nIt is possible for all three dynamic properties to be absent, in which\r\ncase, the `Closure` object is empty.\r\n\r\n###Class `Generator`\r\n\r\nThis class supports the `yield` operator ([§§](#yield-operator)). This class cannot be\r\ninstantiated directly. It is defined, as follows:\r\n\r\nclass Generator implements Iterator\r\n\r\n```\r\nclass Generator implements Iterator\r\n{\r\n\tpublic function current();\r\n\tpublic function key();\r\n\tpublic function next();\r\n\tpublic function rewind();\r\n\tpublic function send($value) ;\r\n\tpublic function throw(Exception $exception) ;\r\n\tpublic function valid();\r\n\tpublic function __wakeup();\r\n}\r\n```\r\n\r\nThe class members are defined below:\r\n\r\nName | Purpose\r\n---- | -------\r\n`current` | An implementation of the instance method `Iterator::current `([§§](#interface-iterator)).\r\n`key` | An implementation of the instance method `Iterator::key` ([§§](#interface-iterator)).\r\nnext | An implementation of the instance method Iterator::next ([§§](#interface-iterator)).\r\n`rewind` | An implementation of the instance method `Iterator::rewind` ([§§](#interface-iterator)).\r\n`send` | This instance method sends the value designated by `$value` to the generator as the result of the current [`yield`](http://us2.php.net/manual/en/ language.generators.syntax.php#control-structures.yield) expression, and resumes execution of the generator. `$value` is the return value of the [`yield`](http://us2.php.net/manual/en/language.generators.syntax.php#control-structures.yield) expression the generator is currently at. If the generator is not at a [`yield`](http://us2.php.net/manual/en/language.generators.syntax.php#control-structures.yield) expression when this method is called, it will first be let to advance to the first [`yield`](http://us2.php.net/manual/en/language.generators.syntax.php#control-structures.yield) expression before sending the value. This method returns the yielded value.\r\n`throw` | This instance method throws an exception into the generator and resumes execution of the generator. The behavior is as if the current [`yield`](http://us2.php.net/manual/en/language.generators.syntax.php#control-structures.yield) expression was replaced with throw `$exception`. If the generator is already closed when this method is invoked, the exception will be thrown in the caller's context instead. This method returns the yielded value.\r\n`valid` |  An implementation of the instance method `Iterator::valid` ([§§](#interface-iterator)).\r\n`__wakeup` | An implementation of the special instance method `__wakeup` ([§§](#method-__wakeup)). As a generator can't be serialized, this method throws an exception of an unspecified type. It returns no value.\r\n\r\n###Class `__PHP_Incomplete_Class`\r\n\r\nThere are certain circumstances in which a program can generate an\r\ninstance of this class, which on its own contains no members. One\r\ninvolves an attempt to unserialize ([§§](#method-__wakeup), [§§](#serialization)) a string that\r\nencodes an instance of a class for which there is no definition in\r\nscope. Consider the following class, which supports a two-dimensional\r\nCartesian point:\r\n\r\n```\r\nclass Point \r\n{\r\n\tprivate $x;\r\n\tprivate $y;\r\n\t...\r\n}\r\n$p = new Point(2, 5);\r\n$s = serialize($p); // properties $x and $y are serialized, in that order\r\n```\r\n\r\nLet us assume that the serialized string is stored in a database from\r\nwhere it is retrieved by a separate program. That program contains the\r\nfollowing code, but does not contain a definition of the class Point:\r\n\r\n```\r\n$v = unserialize($s);\r\n```\r\n\r\nInstead of returning a point, `Point(2, 5`), an instance of\r\n`__PHP_Incomplete_Class` results, with the following contents:\r\n\r\n```\r\n__PHP_Incomplete_Class\r\n{\r\n\t __PHP_Incomplete_Class_Name => \"Point\"\r\n\tx:Point:private => 2\r\n\ty:Point:private => 5\r\n}\r\n```\r\n\r\nThe three dynamic properties ([§§](#dynamic-members)) contain the name of the unknown\r\nclass, and the name, visibility, and value of each property that was\r\nserialized, in order of serialization.\r\n\r\n###Class `stdClass`\r\n\r\nThis class contains no members. It can be instantiated and used as a\r\nbase class. An instance of this type is automatically created when a\r\nnon-object is converted to an object ([§§](#converting-to-object-type)), or the member-selection\r\noperator ([§§](#member-selection-operator)) is applied to `NULL`, `FALSE`, or an empty string.\r\n\r\n\r\n#Interfaces\r\n\r\n##General\r\n\r\nA class can implement a set of capabilities—herein called a\r\n*contract*—through what is called an interface. An *interface* is a set\r\nof method declarations and constants.  Note that the methods are only\r\ndeclared, not defined; that is, an interface defines a type consisting\r\nof abstract methods, where those methods are implemented by client\r\nclasses as they see fit. An interface allows unrelated classes to\r\nimplement the same facilities with the same names and types without\r\nrequiring those classes to share a common base class.\r\n\r\nAn interface can extend one or more other interfaces, in which case, it\r\ninherits all members from its *base interface(s)*.\r\n\r\n##Interface Declarations\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>interface-declaration:</i>\r\n    interface   <i>name   interface-base-clause<sub>opt</sub></i> {  <i>interface-member-declarations<sub>opt</sub></i>  }\r\n\r\n  <i>interface-base-clause:</i>\r\n    extends   <i>qualified-name</i>\r\n    <i>interface-base-clause</i>  ,  <i>qualified-name</i>\r\n</pre>\r\n\r\n*name* and *qualified-name* are defined in [§§](#names).\r\n*interface-member-declarations* is defined in [§§](#interface-members).\r\n\r\n**Constraints**\r\n\r\nAn interface must not be derived directly or indirectly from itself.\r\n\r\n*qualified-name* must name an interface type.\r\n\r\n**Semantics**\r\n\r\nAn interface-declaration defines a contract that one or more classes can\r\nimplement.\r\n\r\nInterface names are case-insensitive.\r\n\r\nThe optional *interface-base-clause* specifies the base interfaces from\r\nwhich the interface being defined is derived. In such a case, the\r\nderived interface inherits all the members from the base interfaces.\r\n\r\n**Examples**\r\n\r\n```\r\ninterface MyCollection \r\n{\r\n\tconst MAX_NUMBER_ITEMS = 1000;\r\n\tfunction put($item);\r\n\tfunction get();\r\n}\r\nclass MyList implements MyCollection \r\n{\r\n\tpublic function put($item)\t{ /* implement method */ }\r\n\tpublic function get()\t\t{ /* implement method */ }\r\n\t...\r\n}\r\nclass MyQueue implements MyCollection \r\n{\r\n\tpublic function put($item)\t{ /* implement method */ }\r\n\tpublic function get()\t\t{ /* implement method */ }\r\n\t...\r\n}\r\nfunction processCollection(MyCollection $p1)\r\n{\r\n\t... /* can process any object whose class implements MyCollection\r\n}\r\nprocessCollection(new MyList(...));\r\nprocessCollection(new MyQueue(...));\r\n```\r\n\r\n##Interface Members\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>interface-member-declarations:</i>\r\n    <i>interface-member-declaration</i>\r\n    <i>interface-member-declarations   interface-member-declaration</i>\r\n\r\n  <i>interface-member-declaration:</i>\r\n    <i>const-declaration</i>\r\n    <i>method-declaration</i>\r\n</pre>\r\n\r\n*const-declaration* is defined in [§§](#constants-2) and *method-declaration* is\r\ndefined in [§§](#methods).\r\n\r\n**Semantics**\r\n\r\nThe members of an interface are those specified by its\r\n*interface-member-declaration*s, and the members inherited from its base\r\ninterfaces.\r\n\r\nAn interface may contain the following members:\r\n\r\n-   Constants – the constant values associated with the interface\r\n    ([§§](#constants-3)).\r\n-   Methods – placeholders for the computations and actions that can be\r\n    performed by implementers of the interface ([§§](#methods-1)).\r\n\r\n##Constants\r\n\r\n**Semantics:**\r\n\r\nAn interface constant is just like a class constant ([§§](#constants-2)), except that\r\nan interface constant cannot be overridden by a class that implements it\r\nnor by an interface that extends it.\r\n\r\n**Examples:**\r\n\r\n```\r\ninterface MyCollection \r\n{\r\n\tconst MAX_NUMBER_ITEMS = 1000;\r\n\tfunction put($item);\r\n\tfunction get();\r\n}\r\n```\r\n\r\n##Methods\r\n\r\n**Constraints**\r\n\r\nAll methods declared in an interface must be implicitly or explicitly\r\npublic, and they must not be declared `abstract`.\r\n\r\n**Semantics:**\r\n\r\nAn interface method is just like an abstract method ([§§](#methods)).\r\n\r\n**Examples:**\r\n\r\n```\r\ninterface MyCollection \r\n{\r\n\tconst MAX_NUMBER_ITEMS = 1000;\r\n\tfunction put($item);\r\n\tfunction get();\r\n}\r\n```\r\n\r\n##Predefined Interfaces\r\n\r\n###Interface `ArrayAccess`\r\n\r\nThis interface allows an instance of an implementing class to be\r\naccessed using array-like notation. This interface is defined, as\r\nfollows:\r\n\r\n```\r\ninterface ArrayAccess\r\n{\r\n\tfunction offsetExists($offset);\r\n\tfunction offsetGet($offset);\r\n\tfunction offsetSet($offset, $value);\r\n\tfunction offsetUnset($offset);\r\n}\r\n```\r\n\r\nThe interface members are defined below:\r\n\r\nName\t|   Purpose\r\n----    |   -------\r\n`offsetExists`  |\tThis instance method returns `TRUE` if the instance contains an element with key `$offset`, otherwise, `FALSE`.\r\n`offsetGet`\t|  This instance method gets the value having key `$offset`. It may return by value or byRef. (Ordinarily, this wouldn't be allowed because a class implementing an interface needs to match the interface's method signatures; however, the Engine gives special treatment to `ArrayAccess` and allows this.) This method is called when an instance of a class that implements this interface is subscripted ([§§](#subscript-operator)) in a non-lvalue context.\r\n`offsetSet`\t| This instance method sets the value having key `$offset` to $value. It returns no value. This method is called when an instance of a class that implements this interface is subscripted ([§§](#subscript-operator)) in a modifiable-lvalue context.\r\n`offsetUnset`\t| This instance method unsets the value having key `$offset`. It returns no value.\r\n\r\n###Interface `Iterator`\r\n\r\nThis interface allows instances of an implementing class to be treated\r\nas a collection. This interface is defined, as follows:\r\n\r\n```\r\ninterface Iterator extends Traversable\r\n{\r\n\tfunction current();\r\n\tfunction key();\r\n\tfunction next();\r\n\tfunction rewind();\r\n\tfunction valid();\r\n}\r\n\r\n```\r\n\r\nThe interface members are defined below:\r\n\r\nName | Purpose\r\n---- | -------\r\n`current` | This instance method returns the element at the current position.\r\n`key` |This instance method returns the key of the current element. On failure, it returns `NULL`; otherwise, it returns the scalar value of the key.\r\n`next` | This instance method moves the current position forward to the next element. It returns no value. From within a `foreach` statement, this method is called after each loop.\r\n`rewind` |  This instance method resets the current position to the first element. It returns no value. From within a `foreach` statement, this method is called once, at the beginning.\r\n`valid` | This instance method checks if the current position is valid. It takes no arguments. It returns a bool value of `TRUE` to indicate the current position is valid; `FALSE`, otherwise. This method is called after each call to [`Iterator::rewind()`](http://us2.php.net/manual/en/iterator.rewind.php) and [`Iterator::next()`](http://us2.php.net/manual/en/iterator.next.php).\r\n\r\n###Interface `IteratorAggregate`\r\n\r\nThis interface allows the creation of an external iterator. This\r\ninterface is defined, as follows:\r\n\r\n```\r\nInterface IteratorAggregate extends Traversable\r\n{\r\n\tfunction getIterator();\r\n}\r\n```\r\nThe interface members are defined below:\r\n\r\n\r\nName\t|   Purpose\r\n----    |   -------\r\n`getIterator` | This instance method retrieves an iterator, which implements `Iterator` or `Traversable`. It throws an `Exception` on failure.\r\n\r\n###Interface `Traversable`\r\n\r\nThis interface is intended as the base interface for all traversable\r\nclasses. This interface is defined, as follows:\r\n\r\n```\r\nTraversable\r\n{\r\n}\r\n```\r\n\r\nThis interface has no members.\r\n\r\n###Interface  `Serializable`\r\n\r\nThis interface provides support for custom serialization. It is defined,\r\nas follows:\r\n\r\n```\r\ninterface Serializable\r\n{\r\n\tfunction serialize();\r\n\tfunction unserialize ($serialized);\r\n\r\n}\r\n```\r\n\r\nThe interface members are defined below:\r\n\r\nName |\tPurpose\r\n-----|  -------\r\n`serialize` | This instance method returns a string representation of the current instance. On failure, it returns `NULL`.\r\n`unserialize` | This instance method constructs an object from its string form designated by `$serialized`. It does not return a value.\r\n\r\n\r\n\r\n#Traits\r\n\r\n##General\r\n\r\nPHP's class model allows single inheritance only ([§§](#general-23)) with contracts\r\nbeing enforced separately via interfaces ([§§](#general-25)). A *trait* can provide\r\nboth implementation and contracts. Specifically, a class can inherit\r\nfrom a base class while getting implementation from one or more traits.\r\nAt the same time, that class can implement contracts from one or more\r\ninterfaces as well as from one or more traits. The use of a trait by a\r\nclass does not involve any inheritance hierarchy, so unrelated classes\r\ncan use the same trait. In summary, a trait is a set of methods and/or\r\nstate information that can be reused.\r\n\r\nTraits are designed to support classes; a trait cannot be instantiated\r\ndirectly.\r\n\r\nThe members of a trait each have visibility ([§§](#general-23)), which applies once\r\nthey are used by a given class. The class that uses a trait can change\r\nthe visibility of any of that trait's members, by either widening or\r\nnarrowing that visibility. For example, a private trait member can be\r\nmade public in the using class, and a pubic trait member can be made\r\nprivate in that class.\r\n\r\nOnce implementation comes from both a base class and one or more traits,\r\nname conflicts can occur. However, trait usage provides a means of\r\ndisambiguating such conflicts. Names gotten from a trait can also be\r\ngiven aliases.\r\n\r\nA class member with a given name overrides one with the same name in any\r\ntraits that class uses, which, in turn, overrides any such name from\r\nbase classes. \r\n\r\nTraits can contain both instance and static members, including both\r\nmethods and properties. In the case of a trait with a static property,\r\neach class using that trait has its own instance of that property.\r\n\r\nMethods in a trait have full access to all members of any class in which\r\nthat trait is used.\r\n\r\n##Trait Declarations\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>trait-declaration:</i>\r\n    trait   <i>name</i>   {   <i>trait-use-clauses<sub>opt</sub>   trait-member-declarations<sub>opt</sub></i>   }\r\n\r\n  <i>trait-use-clauses:</i>\r\n    <i>trait-use-clause</i>\r\n    <i>trait-use-clauses   trait-use-clause</i>\r\n\r\n  <i>trait-use-clause:</i>\r\n    use   <i>trait-name-list   trait-use-terminator</i>\r\n\r\n  <i>trait-name-list:</i>\r\n    <i>qualified-name</i>\r\n    <i>trait-name-list</i>   ,   <i>qualified-name</i>\r\n\r\n  <i>trait-use-terminator:</i>\r\n    ;\r\n    {   <i>trait-select-and-alias-clauses<sub>opt</sub></i>   }\r\n\r\n  <i>trait-select-and-alias-clauses:</i>\r\n    <i>trait-select-and-alias-clause</i>\r\n    <i>trait-select-and-alias-clauses   trait-select-and-alias-clause</i>\r\n\r\n  <i>trait-select-and-alias-clause:</i>\r\n    <i>trait-select-insteadof-clause</i>\r\n    <i>trait-alias-as-clause</i>\r\n\r\n  <i>trait-select-insteadof-clause:</i>\r\n    <i>name</i>   insteadof   <i>name</i>\r\n\r\n  trait-alias-as-clause:\r\n    <i>name</i>   as   <i>visibility-modifier<sub>opt</sub>   name</i>\r\n    <i>name</i>   as   <i>visibility-modifier   name<sub>opt</sub></i>\r\n</pre>\r\n\r\n*name* is defined in [§§](#names); *visibility-modifier* is defined in\r\n[§§](#properties); and *trait-member-declarations* is defined in [§§](#trait-members).\r\n\r\n**Constraints**\r\n\r\nThe *name*s in *trait-name-list* must designate trait names, excluding\r\nthe name of the trait being declared.\r\n\r\nThe left-hand *name* in *trait-select-insteadof-clause* must\r\nunambiguously designate a member of a trait made available by\r\n*trait-use-clauses*. The right-hand *name* in\r\n*trait-select-insteadof-clause* must unambiguously designate a trait\r\nmade available by *trait-use-clauses*.\r\n\r\nThe left-hand *name* in *trait-alias-as-clause* must unambiguously\r\ndesignate a member of a trait made available by *trait-use-clauses*.\r\nThe right-hand *name* in *trait-alias-as-clause* must be a new,\r\nunqualified name.\r\n\r\n**Semantics**\r\n\r\nA *trait-declaration* defines a named set of members, which are made\r\navailable to any class that uses that trait.\r\n\r\nTrait names are case-insensitive.\r\n\r\nA *trait-declaration* may also use other traits. This is done via one or\r\nmore *trait-use-clause*s, each of which contains a comma-separated list\r\nof trait names. A *trait-use-clause* ends in a semicolon or a\r\nbrace-delimited set of *trait-select-insteadof-clause*s and\r\n*trait-alias-as-clause*s.\r\n\r\nA *trait-select-insteadof-clause* allows name clashes to be avoided.\r\nSpecifically, the left-hand *name* designates which name to be used from\r\nof a pair of names. That is, `T1::compute insteadof T2`; indicates that\r\ncalls to method compute, for example, should be satisfied by a method of\r\nthat name in trait `T1` rather than `T2`.\r\n\r\nA *trait-alias-as-clause* allows a (possibly qualified) name to be\r\nassigned a simple alias name. Specifically, the left-hand *name* in\r\n*trait-alias-as-clause* designates a name made available by\r\n*trait-use-clauses* ~~ that is to be aliased, and the right-hand *name*\r\nis the alias.\r\n\r\nIf *trait-alias-as-clause* contains a visibility-modifier, that controls\r\nthe visibility of the alias, if a right-hand name is provided;\r\notherwise, it controls the visibility of the left-hand name.\r\n\r\n**Examples**\r\n\r\n```\r\ntrait T1 { public function compute( ... ) { ... } }\r\ntrait T2 { public function compute( ... ) { ... } }\r\ntrait T1 { public function sort( ... ) { ... } }\r\ntrait T4\r\n{\r\n\tuse T3;\r\n\tuse T1, T2\r\n\t{\r\n\t\tT1::compute insteadof T2;\t// disambiguate between two computes\r\n\t\tT3::sort as private sorter;\t// make alias with adjusted visibility\r\n\t}\r\n}\r\n```\r\n\r\n##Trait Members\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>trait-member-declarations:</i>\r\n    <i>trait-member-declaration</i>\r\n    <i>trait-member-declarations   trait-member-declaration</i>\r\n\r\n  <i>trait-member-declaration:</i>\r\n    <i>property-declaration</i>\r\n    <i>method-declaration</i>\r\n    <i>constructor-declaration</i>\r\n    <i>destructor-declaration</i>\r\n</pre>\r\n\r\n*property-declaration* is defined in [§§](#properties); *method-declaration* is\r\ndefined in [§§](#methods); *constructor-declaration* is defined in [§§](#names); and\r\n*destructor-declaration* is defined in [§§](#destructors).\r\n\r\n**Semantics**\r\n\r\nThe members of a trait are those specified by its\r\n*trait-member-declaration*s, and the members from any other traits it\r\nuses.\r\n\r\nA trait may contain the following members:\r\n\r\n-   Properties – the variables made available to the class in which the\r\n    trait is used ([§§](#properties)).\r\n-   Methods – the computations and actions that can be performed by the\r\n    class in which the trait is used ([§§](#methods), [§§](#methods-with-special-semantics)).\r\n-   Constructor – the actions required to initialize an instance of the\r\n    class in which the trait is used ([§§](#constructors))\r\n-   Destructor – the actions to be performed when an instance of the\r\n    class in which the trait is used is no longer needed ([§§](#destructors)).\r\n\r\nIf a member has no explicit visibility, `public` is assumed.\r\n\r\n**Examples**\r\n\r\n```\r\ntrait T\r\n{\r\n\tprivate $prop1 = 1000;\r\n\tprotected static $prop2;\r\n\tvar $prop3;\r\n\tpublic function compute( ... ) { ... }\r\n\tpublic static function getData( ... ) { ... }\r\n}\r\n```\r\n\r\n\r\n#Exception Handling\r\n\r\n##General\r\n\r\nAn *exception* is some unusual condition in that it is outside the\r\nordinary expected behavior. (Examples include dealing with situations in\r\nwhich a critical resource is needed, but is unavailable, and detecting\r\nan out-of-range value for some computation.) As such, exceptions require\r\nspecial handling. This clause describes how exceptions can be created\r\nand handled.\r\n\r\nWhenever some exceptional condition is detected at runtime, an exception\r\nis *thrown*. A designated exception handler can *catch* the thrown\r\nexception and service it. Among other things, the handler might recover\r\nfrom the situation completely (allowing the script to continue\r\nexecution), it might perform some recovery and then throw an exception\r\nto get further help, or it might perform some cleanup action and\r\nterminate the script. Exceptions may be thrown on behalf of the Engine\r\nor by explicit code source code in the script.\r\n\r\nException handling involves the use of the following keywords:\r\n\r\n-   `try` ([§§](#the-try-statement)), which allows a *try-block* of code containing one or\r\n    more possible exception generations, to be tried\r\n-   `catch` ([§§](#the-try-statement)), which defines a handler for a specific type of\r\n    exception thrown from the corresponding try-block or from some\r\n    function it calls\r\n-   `finally` ([§§](#the-try-statement)), which allows the *finally-block* of a try-block to\r\n    be executed (to perform some cleanup, for example), whether or not\r\n    an exception occurred within that try-block\r\n-   `throw` ([§§](#the-throw-statement)), which generates an exception of a given type, from\r\n    a place called a *throw point*\r\n\r\nWhen an exception is thrown, an *exception object* of type `Exception`\r\n([§§](#class-exception)), or of a subclass of that type, is created and made available to\r\nthe first catch-handler that can catch it. Among other things, the\r\nexception object contains an *exception message* and an *exception\r\ncode*, both of which can be used by a handler to determine how to handle\r\nthe situation.\r\n\r\nPrior to the addition of exception handling to PHP, exception-like\r\nconditions were handled using Error Reporting (§xx). Now, errors can be\r\ntranslated to exceptions via the class\r\n[`ErrorException`](http://www.php.net/manual/en/class.errorexception.php)\r\n(which is not part of this specification).\r\n\r\n##Class `Exception`\r\n\r\nClass `Exception` is the base class of all exception types. This class is\r\ndefined, as follows:\r\n\r\n```\r\nClass Exception\r\n{\r\n\tprivate   $string;\r\n\tprivate   $trace;\r\n\tprivate   $previous;\r\n\r\n\tprotected $message = 'Unknown exception';\r\n\tprotected $code = 0;\r\n\tprotected $file;\r\n\tprotected $line;\r\n\r\n\tpublic function __construct($message = \"\", $code = 0,\r\n \t\t\t\t\t\t\t\tException $previous = NULL);\r\n\r\n\tfinal private function __clone();\r\n\r\n\tfinal public  function getMessage();\r\n\tfinal public  function getCode();\r\n\tfinal public  function getFile();\r\n\tfinal public  function getLine();\r\n\tfinal public  function getTrace();\r\n\tfinal public  function getPrevious();\r\n\tfinal public  function getTraceAsString();\r\n\tpublic function __toString();\r\n}\r\n```\r\n\r\nFor information about exception trace-back, see [§§](#tracing-exceptions). For information\r\nabout nested exceptions, see [§§](#tracing-exceptions). \r\n\r\nThe class members are defined below:\r\n\r\nName\t| Purpose\r\n----    | -------\r\n`$code`\t| `int`; the exception code (as provided by the constructor)\r\n`$file`\t| `string`; the name of the script where the exception was generated\r\n`$line`\t| `int`; the source line number in the script where the exception was generated\r\n`$message`\t| `string`; the exception message (as provided by the constructor)\r\n`$previous`\t| The previous exception in the chain, if this is a nested exception; otherwise, `NULL`\r\n`$string`\t| Work area for `__toString`\r\n`$trace`\t| Work area for function-call tracing\r\n`__construct`\t| Takes three (optional) arguments – `string`: the exception message (defaults to \"\"), `int`: the exception code (defaults to 0), and `Exception`: the previous exception in the chain (defaults to `NULL`)\r\n`__clone`\t| Present to inhibit the cloning of exception objects\r\n`__toString`\t| `string`; retrieves a string representation of the exception in some unspecified format\r\n`getCode`\t| `mixed`; retrieves the exception code (as set by the constructor). For an exception of type Exception, the returned value has type int; for subclasses of `Exception`, it may have some other type.\r\n`getFile`\t| `string`; retrieves the name of the script where the exception was generated\r\n`getLine`\t| `int`; retrieves the source line number in the script where the exception was generated\r\n`getMessage`\t| `string`; retrieves the exception message\r\n`getPrevious`\t| `Exception`; retrieves the previous exception (as set by the constructor), if one exists; otherwise, `NULL`\r\n`getTrace`\t| `array`; retrieves the function stack trace information as an array (see [§§](#tracing-exceptions))\r\n`getTraceAsString`\t| `string`; retrieves the function stack trace information formatted as a single string in some unspecified format\r\n\r\n##Tracing Exceptions\r\n\r\nWhen an exception is caught, the `get*` functions in class `Exception`\r\nprovide useful information. If one or more nested function calls were\r\ninvolved to get to the place where the exception was generated, a record\r\nof those calls is also retained, and made available by getTrace, through\r\nwhat is referred to as the *function stack trace*, or simply, `*trace*`.\r\n\r\nLet's refer to the top level of a script as *function-level* 0.\r\nFunction-level 1 is inside any function called from function-level 0.\r\nFunction-level 2 is inside any function called from function-level 1,\r\nand so on. The library function `getTrace` returns an array. Exceptions\r\ngenerated at function-level 0 involve no function call, in which case,\r\nthe array returned by `getTrace` has zero elements.\r\n\r\nEach element of the array returned by `getTrace` provides information\r\nabout a given function level. Let us call this array *trace-array* and\r\nthe number of elements in this array *call-level*. The key for each of\r\ntrace-array's elements has type int, and ranges from 0 to\r\ncall-level - 1. For example, when a top-level script calls function `f1`,\r\nwhich calls function `f2`, which calls function `f3`, which then generates\r\nan exception, there are four function levels, 0–3, and there are three\r\nlots of trace information, one per call level. That is, trace-array\r\ncontains three elements, and they each correspond to the reverse order\r\nof the function calls. For example, trace-array[0] is for the call to\r\nfunction `f3`, trace-array[1] is for the call to function `f2`, and\r\ntrace-array[2] is for the call to function `f1`.\r\n\r\nEach element in trace-array is itself an array that contains elements\r\nwith the following key/value pairs:\r\n\r\nKey\t| Value Type\t| Value\r\n--- | ----------    | -----\r\n\"args\"\t| `array`\t| The set of arguments passed to the function\r\n\"class\"\t| `string` |\tThe name of the function's parent class\r\n\"file\"\t| `string` |\tThe name of the script where the function was called\r\n\"function\"\t| `string` |\tThe name of the function or class method\r\n\"line\"\t| `int` |\tThe line number in the source where the function was called\r\n\"object\" |\t`object` | The current object\r\n\"type\"\t| `string` |\tType of call; `->` for an instance method call, `::` for a static method call, ordinary function call, \"\" is returned.\r\n\r\nAs to whether extra elements with other keys are provided is\r\nunspecified.\r\n\r\nThe key `args` has a value that is yet another array, which we shall\r\ncall *argument-array*. That array contains a set of values that\r\ncorresponds directly to the set of values passed as arguments to the\r\ncorresponding function. Regarding element order, argument-array[0]\r\ncorresponds to the left-most argument, argument-array[1] corresponds to\r\nthe next argument to the right, and so on.\r\n\r\nConsider the case in which a function has a default argument value\r\ndefined for a parameter. If that function is called without an argument\r\nfor the parameter having the default value, no corresponding argument\r\nexists in array-argument. Only arguments present at the function-call\r\nsite have their values recorded in array-argument. \r\n\r\nSee also, library functions `debug_backtrace` (§xx) and\r\n`debug_print_backtrace` (§xx).\r\n\r\n##User-Defined Exception Classes\r\n\r\nAn exception class is defined simply by having it extend class `Exception`\r\n([§§](#class-exception)). However, as that class's `__clone` method is declared `final`\r\n([§§](#methods)), exception objects cannot be cloned.\r\n\r\nWhen an exception class is defined, typically, its constructors call the\r\nparent class' constructor as their first operation to ensure the\r\nbase-class part of the new object is initialized appropriately. They\r\noften also provide an augmented implementation of\r\n[`__toString()`](http://www.php.net/manual/en/language.oop5.magic.php)\r\n([§§](#method-__tostring)).\r\n\r\n\r\n#Namespaces\r\n\r\n##General\r\n\r\nA problem encountered when managing large projects is that of avoiding\r\nthe use of the same name in the same scope for different purposes. This\r\nis especially problematic in a language that supports modular design and\r\ncomponent libraries.\r\n\r\nA *namespace* is a container for a set of (typically related)\r\ndefinitions of classes, interfaces, traits, functions, and constants.\r\nNamespaces serve two purposes:\r\n\r\n-   They help avoid name collisions.\r\n-   They allow certain long names to be accessed via shorter, more\r\n    convenient and readable, names.\r\n\r\nA namespace may have *sub-namespaces*, where a sub-namespace name shares\r\na common prefix with another namespace. For example, the namespace\r\n`Graphics` might have sub-namespaces `Graphics\\D2` and `Graphics\\D3`, for\r\ntwo- and three-dimensional facilities, respectively. Apart from their\r\ncommon prefix, a namespace and its sub-namespaces have no special\r\nrelationship. The namespace whose prefix is part of a sub-namespace need\r\nnot actually exist for the sub-namespace to exist. That is, `NS1\\Sub` can\r\nexist without `NS1`.\r\n\r\nIn the absence of any namespace definition, the names of subsequent\r\nclasses, interfaces, traits, functions, and constants are in the\r\n*default namespace*, which has no name, per se.\r\n\r\nThe namespaces PHP, php, and sub-namespaces beginning with those\r\nprefixes are reserved for use by PHP.\r\n\r\n##Name Lookup\r\n\r\nWhen an existing name is used in source code, the Engine must determine\r\nhow that name is found with respect to namespace lookup. For this\r\npurpose, names can have one of the three following forms:\r\n\r\n-   Unqualified name: Such names are just simple names without any\r\n    prefix, as in the class name `Point` in the following expression:\r\n    `$p = new Point(3,5)`. If the current namespace is `NS1`, the name\r\n    `Point` resolves to `NS1\\Point`. If the current namespace is the\r\n    default namespace ([§§](#general-28)), the name `Point` resolves to `Point`. In the\r\n    case of an unqualified function or constant name, if that name does\r\n    not exist in the current namespace, a global function or constant by\r\n    that name is used.\r\n-   Qualified name: Such names have a prefix consisting of a namespace\r\n    name and/or one or more levels of sub-namespace names, and,\r\n    possibly, a class, interface, trait, function, or constant name.\r\n    Such names are relative. For example, `D2\\Point` could be used to\r\n    refer to the class Point in the sub-namespace `D2` of the current\r\n    namespace. One special case of this is when the first component of\r\n    the name is the keyword `namespace`. This means \"the current\r\n    namespace\".\r\n-   Fully qualified name: Such names begin with a backslash (`\\`) and are\r\n    followed optionally by a namespace name and one or more levels of\r\n    sub-namespace names, and, finally, a class, interface, trait,\r\n    function, or constant name. Such names are absolute. For example,\r\n    `\\Graphics\\D2\\Point` could be used to refer unambiguously to the\r\n    class `Point` in namespace `Graphics`, sub-namespace `D2`.\r\n   \r\nThe names of the standard types (such as `Exception`), constants (such as\r\n`PHP_INT_MAX`), and library functions (such as `is_null`) are defined outside\r\nany namespace. To refer unambiguously to such names, one can prefix them\r\nwith a backslash (`\\`), as in `\\Exception`, `\\PHP_INT_MAX`, and `\\is_null`.\r\n\r\n##Defining Namespaces\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>namespace-definition:</i>\r\n    namespace  <i>namespace-name</i>  ;\r\n    namespace  <i>namespace-name<sub>opt</sub>   compound-statement</i>\r\n</pre>\r\n\r\n*namespace-name* is defined in [§§](#names), and *compound-statement* is\r\ndefined in [§§](#compound-statements).\r\n\r\n**Constraints**\r\n\r\nExcept for white space and an optional *declare-statement* ([§§](#the-declare-statement)), the\r\nfirst occurrence of a *namespace-definition* in a script must be the\r\nfirst thing in that script.\r\n\r\nAll occurrence of a *namespace-definition* in a script must have the\r\n*compound-statement* form or must not have that form; the two forms\r\ncannot be mixed.\r\n\r\nWhen a script contains source code that is not inside a namespace, and\r\nsource code that is inside one or namespaces, the namespaced code must\r\nuse the *compound-statement* form of *namespace-definition*.\r\n\r\n*compound-statement* must not contain a *namespace-definition*.\r\n\r\n**Semantics**\r\n\r\nAlthough a namespace may contain any PHP source code, the fact that that\r\ncode is contained in a namespace affects only the declaration and name\r\nresolution of classes, interfaces, traits, functions, and constants.\r\n\r\nNamespace and sub-namespace names are case-insensitive.\r\n\r\nThe pre-defined constant `__NAMESPACE__` ([§§](#context-dependent-constants)) contains the name of\r\nthe current namespace.\r\n\r\nWhen the same namespace is defined in multiple scripts, and those\r\nscripts are combined into the same program, the namespace is considered\r\nthe merger of its individual contributions.\r\n\r\nThe scope of the non-*compound-statement* form of *namespace-definition*\r\nruns until the end of the script, or until the lexically next\r\n*namespace-definition*, whichever comes first. The scope of the\r\n*compound-statement* form is the *compound-statement*.\r\n\r\n**Examples**\r\n\r\nScript1.php:\r\n```\r\nnamespace NS1;\r\n...\t\t\t\t// __NAMESPACE__ is \"NS1\"\r\nnamespace NS3\\Sub1;\r\n...\t\t\t\t// __NAMESPACE__ is \"NS3\\Sub1\"\r\n```\r\n\r\nScript2.php:\r\n```\r\nnamespace NS1\r\n{\r\n...\t\t\t\t// __NAMESPACE__ is \"NS1\"\r\n}\r\nnamespace\r\n{\r\n...\t\t\t\t// __NAMESPACE__ is \"\"\r\n}\r\nnamespace NS3\\Sub1;\r\n{\r\n...\t\t\t\t// __NAMESPACE__ is \"NS3\\Sub1\"\r\n}\r\n```\r\n\r\n##Namespace Use Declarations**\r\n\r\n**Syntax**\r\n\r\n<pre>\r\n  <i>namespace-use-declaration:</i>\r\n    use  <i>namespace-use-clauses</i>  ;\r\n\r\n  <i>namespace-use-clauses:</i>\r\n    <i>namespace-use-clause</i>\r\n    <i>namespace-use-clauses</i>  ,  <i>namespace-use-clause</i>\r\n\r\n  <i>namespace-use-clause:</i>\r\n    <i>qualified-name   namespace-aliasing-clause<sub>opt</sub></i>\r\n\r\n  <i>namespace-aliasing-clause:</i>\r\n    as  <i>name</i>\r\n</pre>\r\n\r\n*qualified-name* and *name* are defined in [§§](#names).\r\n\r\n**Constraints**\r\n\r\nA *namespace-use-declaration* must not occur except at the pseudomain\r\nlevel or directly in the context of a *namespace-definition* (18.3).\r\n\r\nIf the same *qualified-name* is imported multiple times in the same\r\nscope, each occurrence must have a different alias.\r\n\r\n**Semantics**\r\n\r\n*qualified-name* is always interpreted as referring to a class,\r\ninterface, or trait by that name. *namespace-use-clauses* can only\r\ncreate aliases for classes, interfaces, or traits; it is not possible to\r\nuse them to create aliases to functions or constants.\r\n\r\nA *namespace-use-declaration* *imports*—that is, makes available—one or\r\nmore names into a scope, optionally giving them each an alias. Each of\r\nthose names may designate a namespace, a sub-namespace, a class, an\r\ninterface, or a trait. If a namespace-alias-clause is present, its\r\n*name* is the alias for *qualified-name*. Otherwise, the right-most name\r\nin *qualified-name* is the implied alias for *qualified-name*.\r\n\r\n**Examples**\r\n\r\n```\r\nnamespace NS1\r\n{\r\n\tconst CON1 = 100;\r\n\tfunction f() { ... }\r\n\tclass C { ... }\r\n\tinterface I { ... }\r\n\ttrait T { ... }\r\n}\r\n\r\nnamespace NS2\r\n{\r\n\tuse \\NS1\\C, \\NS1\\I, \\NS1\\T;\r\n\tclass D extends C implements I\r\n\t{\r\n\t\tuse T;\r\n\t}\r\n\t$v = \\NS1\\CON1;\t// explicit namespace still needed for constants\r\n\t\\NS1\\f();\t\t// explicit namespace still needed for functions\r\n\r\n\tuse \\NS1\\C as C2;\t// C2 is an alias for the class name \\NS1\\C\r\n\t$c2 = new C2;\r\n}\r\n```\r\n\r\n#Grammar\r\n\r\n##General\r\n\r\nThe grammar notation is described in [§§](#grammars).\r\n\r\n##Lexical Grammar\r\n\r\n###General\r\n\r\n<pre>\r\n  <i>input-file::\r\n    <i>input-element\r\n    <i>input-file   input-element\r\n  <i>input-element::</i>\r\n    <i>comment</i>\r\n    <i>white-space</i>\r\n    <i>token</i>\r\n</pre>\r\n\r\n###Comments\r\n\r\n<pre>\r\n  <i>comment::</i>\r\n    <i>single-line-comment</i>\r\n    <i>delimited-comment</i>\r\n    \r\n  <i>single-line-comment::</i>\r\n    //   <i>input-characters<sub>opt</sub></i>\r\n      #    <i>input-characters<sub>opt</sub></i>\r\n\r\n  <i>input-characters::</i>\r\n    <i>input-character</i>\r\n    <i>input-characters   input-character</i>\r\n\r\n  <i>input-character::</i>\r\n    Any source character except new-line\r\n    \r\n  <i>new-line::</i>\r\n    Carriage-return character (U+000D)\r\n    Line-feed character (U+000A)\r\n    Carriage-return character (U+000D) followed by line-feed character (U+000A)\r\n\r\n  <i>delimited-comment::</i>\r\n    /*   No characters or any source character sequence except /*   */\r\n</pre>\r\n\r\n###White Space\r\n\r\n<pre>\r\n  <i>white-space::</i>\r\n    <i>white-space-character</i>\r\n    <i>white-space   white-space-character</i>\r\n\r\n  <i>white-space-character::</i>\r\n    <i>new-line</i>\r\n    Space character (U+0020)\r\n    Horizontal-tab character (U+0009)\r\n</pre>\r\n\r\n###Tokens\r\n\r\n####General\r\n\r\n<pre>\r\n  <i>token::</i>\r\n    <i>variable-name</i>\r\n    <i>name</i>\r\n    <i>keyword</i>\r\n    <i>literal</i>\r\n    <i>operator-or-punctuator</i>\r\n</pre>\r\n\r\n####Names\r\n\r\n<pre>\r\n  <i>variable-name::</i>\r\n    $   <i>name</i>\r\n\r\n  <i>namespace-name::</i>\r\n    <i>name </i>\r\n    <i>namespace-name   \\   name</i>\r\n    \r\n  <i>namespace-name-as-a-prefix::</i>\r\n    \\\r\n    \\<sub>opt</sub>   <i>namespace-name</i>   \\\r\n    namespace   \\\r\n    namespace   \\   <i>namespace-name</i>   \\\r\n    \r\n  <i>qualified-name::</i>\r\n    <i>namespace-name-as-a-prefix<sub>opt</sub>   name</i>\r\n    \r\n  <i>name::</i>\r\n    <i>name-nondigit</i>\r\n    <i>name   name-nondigit</i>\r\n    <i>name   digit</i>\r\n\r\n  <i>name-nondigit::</i>\r\n    <i>nondigit</i>\r\n    one of the characters U+007f–U+00ff\r\n\r\n  <i>nondigit::</i> one of\r\n    _\r\n    a   b   c   d   e   f   g   h   i   j   k   l   m\r\n    n   o   p   q   r   s   t   u   v   w   x   y   z\r\n    A   B   C   D   E   F   G   H   I   J   K   L   M\r\n    N   O   P   Q   R   S   T   U   V   W   X   Y   Z\r\n</pre>\r\n\r\n###Keywords\r\n\r\n<pre>\r\n  <i>keyword::</i> one of\r\n    abstract   and   as   break   callable   case   catch   class   clone   \r\n    const   continue   declare   default   do   echo   else   elseif   \r\n    enddeclare   endfor   endforeach   endif   endswitch   endwhile\r\n    extends   final   finally   for   foreach   function   global\r\n    goto   if   implements   include   include_once   instanceof\r\n    insteadof   interface   namespace   new or   print   private\r\n    protected   public   require   require_once   return static   switch\r\n    throw   trait   try   use   var   while   xor   yield\r\n</pre>\r\n\r\n###Literals\r\n\r\n####General\r\n\r\n<pre>\r\n  <i>literal::\r\n    <i>boolean-literal</i>\r\n    <i>integer-literal</i>\r\n    <i>floating-literal</i>\r\n    <i>string-literal</i>\r\n    <i>null-literal</i>\r\n</pre>\r\n\r\n####Boolean Literals\r\n\r\n<pre>\r\n  <i>boolean-literal::</i>\r\n    TRUE (written in any case combination)\r\n    FALSE (written in any case combination)\r\n</pre>\r\n\r\n####Integer Literals\r\n\r\n<pre>\r\n  <i>integer-literal::</i>\r\n    <i>decimal-literal</i>\r\n    <i>octal-literal</i>\r\n    <i>hexadecimal-literal</i>\r\n    <i>binary-literal</i>\r\n\r\n    <i>decimal-literal::</i>\r\n      <i>nonzero-digit</i>\r\n      <i>decimal-literal   digit</i>\r\n\r\n    <i>octal-literal::</i>\r\n      0\r\n      <i>octal-literal   octal-digit</i>\r\n\r\n    <i>hexadecimal-literal::</i>\r\n      <i>hexadecimal-preﬁx   hexadecimal-digit</i>\r\n      <i>hexadecimal-literal   hexadecimal-digit</i>\r\n\r\n    <i>hexadecimal-preﬁx:: one of</i>\r\n      0x  0X\r\n\r\n    <i>binary-literal::</i>\r\n      <i>binary-preﬁx   binary-digit</i>\r\n      <i>binary-literal   binary-digit</i>\r\n\r\n    <i>binary-preﬁx:: one of</i>\r\n      0b  0B\r\n\r\n    <i>digit:: one of</i>\r\n      0  1  2  3  4  5  6  7  8  9\r\n\r\n    <i>nonzero-digit:: one of</i>\r\n      1  2  3  4  5  6  7  8  9\r\n      \r\n    <i>octal-digit:: one of</i>\r\n      0  1  2  3  4  5  6  7\r\n\r\n    <i>hexadecimal-digit:: one of</i>\r\n      0  1  2  3  4  5  6  7  8  9\r\n            a  b  c  d  e  f\r\n            A  B  C  D  E  F\r\n\r\n    <i>binary-digit:: one of</i>\r\n        0  1\r\n</pre>\r\n\r\n####Floating-Point Literals\r\n\r\n<pre>\r\n  <i>ﬂoating-literal::</i>\r\n    <i>fractional-literal   exponent-part<sub>opt</sub></i>\r\n    <i>digit-sequence   exponent-part</i>\r\n\r\n  <i>fractional-literal::</i>\r\n    <i>digit-sequence<sub>opt</sub></i> . <i>digit-sequence</i>\r\n    <i>digit-sequence</i> .\r\n\r\n  <i>exponent-part::</i>\r\n    e  <i>sign<sub>opt</sub>   digit-sequence</i>\r\n    E  <i>sign<sub>opt</sub>   digit-sequence</i>\r\n\r\n  <i>sign:: one of</i>\r\n    +  -\r\n\r\n  <i>digit-sequence::</i>\r\n    <i>digit</i>\r\n    <i>digit-sequence   digit</i>\r\n</pre>\r\n\r\n####String Literals\r\n\r\n<pre>\r\n  <i>string-literal::</i>\r\n    <i>single-quoted-string-literal</i>\r\n    <i>double-quoted-string-literal</i>\r\n    <i>heredoc-string-literal</i>\r\n    <i>nowdoc-string-literal</i>\r\n\r\n  <i>single-quoted-string-literal::</i>\r\n    b<i><sub>opt</sub></i>  ' <i>sq-char-sequence<sub>opt</sub></i>  '\r\n\r\n  <i>sq-char-sequence::</i>\r\n    <i>sq-char</i>\r\n    <i>sq-char-sequence   sq-char</i>\r\n\r\n  <i>sq-char::</i>\r\n    <i>sq-escape-sequence</i>\r\n    \\<i><sub>opt</sub></i>   any member of the source character set except single-quote (') or backslash (\\)\r\n\r\n  <i>sq-escape-sequence:: one of</i>\r\n    \\'  \\\\\r\n\r\n  <i>double-quoted-string-literal::</i>\r\n    b<i><sub>opt</sub></i>  \" <i>dq-char-sequence<sub>opt</sub></i>  \"\r\n\r\n  <i>dq-char-sequence::</i>\r\n    <i>dq-char</i>\r\n    <i>dq-char-sequence   dq-char</i>\r\n\r\n  <i>dq-char::</i>\r\n    <i>dq-escape-sequence</i>\r\n    any member of the source character set except double-quote (\") or backslash (\\)\r\n    \\  any member of the source character set except \"\\$efnrtvxX or\r\noctal-digit\r\n\r\n  <i>dq-escape-sequence::</i>\r\n    <i>dq-simple-escape-sequence</i>\r\n    <i>dq-octal-escape-sequence</i>\r\n    <i>dq-hexadecimal-escape-sequence</i>\r\n\r\n  <i>dq-simple-escape-sequence:: one of</i>\r\n    \\\"   \\\\   \\$   \\e   \\f   \\n   \\r   \\t   \\v\r\n\r\n  <i>dq-octal-escape-sequence::</i>\r\n    \\   <i>octal-digit</i>\r\n    \\   <i>octal-digit   octal-digit</i>\r\n    \\   <i>octal-digit   octal-digit   octal-digit</i>\r\n\r\n  <i>dq-hexadecimal-escape-sequence::</i>\r\n    \\x  <i>hexadecimal-digit   hexadecimal-digit<sub>opt</sub></i>\r\n    \\X  <i>hexadecimal-digit   hexadecimal-digit<sub>opt</sub></i>\r\n\r\n  <i>heredoc-string-literal::</i>\r\n    <<<  <i>hd-start-identifier   new-line   hd-char-sequence<sub>opt</sub>  new-line hd-end-identifier</i>  ;<i><sub>opt</sub>   new-line</i>\r\n\r\n  <i>hd-start-identifier::</i>\r\n    <i>name</i>\r\n\r\n  <i>hd-end-identifier::</i>\r\n    <i>name</i>\r\n\r\n  <i>hd-char-sequence::</i>\r\n    <i>hd-char</i>\r\n    <i>hd-char-sequence   hd-char</i>\r\n\r\n  <i>hd-char::</i>\r\n    <i>hd-escape-sequence</i>\r\n    any member of the source character set except backslash (\\)\r\n    \\  any member of the source character set except \\$efnrtvxX or\r\noctal-digit\r\n\r\n  <i>hd-escape-sequence::</i>\r\n    <i>hd-simple-escape-sequence</i>\r\n    <i>dq-octal-escape-sequence</i>\r\n    <i>dq-hexadecimal-escape-sequence</i>\r\n\r\n  <i>hd-simple-escape-sequence:: one of</i>\r\n    \\\\   \\$   \\e   \\f   \\n   \\r   \\t   \\v\r\n\r\n\r\n  <i>nowdoc-string-literal::</i>\r\n    <<<  '  <i>hd-start-identifier</i>  '  <i>new-line  hd-char-sequence<sub>opt</sub>   new-line hd-end-identifier</i>  ;<i><sub>opt</sub>   new-line</i>     \r\n</pre>\r\n\r\n####The Null Literal\r\n\r\n<pre>\r\n  <i>null-literal::</i>\r\n    NULL (written in any case combination)\r\n</pre>\r\n\r\n###Operators and Punctuators\r\n\r\n<pre>\r\n  <i>operator-or-punctuator:: one of</i>\r\n    [   ]    (   )   {    }   .   ->   ++   --   **   *   +   -   ~   !\r\n    $   /   % <<   >>   <   >   <=   >=   ==   ===   !=   !==   ^   |\r\n    &   &&   ||   ?   :   ; =   **=   *=   /=   %=   +=   -=   .=   <<=\r\n    >>=   &=   ^=   |=   ,\r\n</pre>\r\n\r\n##Syntactic Grammar\r\n\r\n###Program Structure\r\n\r\n<pre>\r\n<i>script:</i>\r\n<i> script-section</i>\r\n<i> script   script-section</i>\r\n\r\n<i>script-section:</i>\r\n  <i> text<sub>opt</sub></i> &lt;?php <i>statement-list<sub>opt</sub></i> ?&gt;<sub>opt</sub> <i>text<sub>opt</sub></i>\r\n\r\n<i>text:</i>\r\n  arbitrary text not containing the sequence &lt;?php\r\n</pre>\r\n\r\n###Variables\r\n\r\n<pre>\r\n  <i>function-static-declaration:</i>\r\n    static <i>name</i>   <i>function-static-initializer<sub>opt</sub></i> ;\r\n  \r\n  <i>function-static-initializer:</i>\r\n    = <i>const-expression</i>\r\n    \r\n  <i>global-declaration:</i>\r\n    global <i>variable-name-list</i> ;\r\n\r\n  <i>variable-name-list:</i>\r\n    <i>expression</i>\r\n    <i>variable-name-list  , expression</i>\r\n</pre>\r\n    \r\n###Expressions\r\n\r\n####Primary Expressions\r\n\r\n<pre>\r\n  <i>primary-expression:</i>\r\n    <i>variable-name</i>\r\n    <i>qualified-name</i>\r\n    <i>literal</i>\r\n    <i>const-expression</i>\r\n    <i>intrinsic</i>\r\n    <i>anonymous-function-creation-expression</i>\r\n    (  <i>expression</i>  )\r\n    $this\r\n\r\n  <i>intrinsic:</i>\r\n    <i>array-intrinsic</i>\r\n    <i>echo-intrinsic</i>\r\n    <i>empty-intrinsic</i>\r\n    <i>eval-intrinsic</i>\r\n    <i>exit-intrinsic</i>\r\n    <i>isset-intrinsic</i>\r\n    <i>list-intrinsic</i>\r\n    <i>print-intrinsic</i>\r\n    <i>unset-intrinsic</i>\r\n\r\n  <i>array-intrinsic:</i>\r\n    array ( <i>array-initializer<sub>opt</sub></i>  )\r\n\r\n  <i>echo-intrinsic:</i>\r\n    echo  <i>expression</i>\r\n    echo  (  <i>expression</i>  )\r\n    echo  <i>expression-list-two-or-more</i>\r\n\r\n  <i>expression-list-two-or-more:</i>\r\n    <i>expression</i>  ,  <i>expression</i>\r\n    <i>expression-list-two-or-more</i>  ,  <i>expression</i>\r\n\r\n  <i>empty-intrinsic:</i>\r\n    empty ( <i>expression</i>  )\r\n    \r\n  <i>eval-intrinsic:</i>\r\n    eval (  <i>expression</i>  )\r\n\r\n  <i>exit-intrinsic:</i>\r\n    exit  <i>expression<sub>opt</sub></i>\r\n    exit  (  <i>expression<sub>opt</sub></i>  )\r\n    die   <i>expression<sub>opt</sub></i>\r\n    die   (   <i>expression<sub>opt</sub></i> )\r\n\r\n  <i>isset-intrinsic:</i>\r\n    isset  (  <i>expression-list-one-or-more</i>  )\r\n\r\n  <i>expression-list-one-or-more</i>:\r\n    <i>expression</i>\r\n    <i>expression-list-one-or-mor</i>  ,  <i>expression</i>\r\n\r\n  <i>list-intrinsic:</i>\r\n    list  (  <i>list-expression-list<sub>opt</sub></i>  )\r\n\r\n  <i>list-expression-list:</i>\r\n  <i>list-or-variable</i>\r\n  ,\r\n  <i>list-expression-list</i>  ,  <i>list-or-variable<sub>opt</sub></i>\r\n\r\n  <i>list-or-variable:</i>\r\n    <i>list-intrinsic</i>\r\n    <i>expression</i>\r\n\r\n  <i>print-intrinsic:\r\n    print  <i>expression</i>\r\n    print  (  <i>expression</i>  )\r\n\r\n  <i>unset-intrinsic:</i>\r\n    unset  (  <i>expression-list-one-or-more</i>  )\r\n    \r\n  <i>anonymous-function-creation-expression:</i>\r\n  function  &<sub>opt</sub> (  <i>parameter-declaration-list<sub>opt<sub></i>  )  <i>anonymous-function-use-clause<sub>opt</sub></i>\r\n      <i>compound-statement</i>\r\n\r\n  <i>anonymous-function-use-clause:</i>\r\n    use  (  <i>use-variable-name-list</i>  )\r\n\r\n  <i>use-variable-name-list:</i>\r\n    &<sub>opt</sub>   <i>variable-name</i>\r\n    <i>use-variable-name-list</i>  ,  &<sub>opt</sub>  <i>variable-name</i>\r\n                \r\n</pre>\r\n\r\n####Postfix Operators\r\n\r\n<pre>\r\n  <i>postﬁx-expression:</i>\r\n    <i>primary-expression</i>\r\n    <i>clone-expression</i>\r\n    <i>object-creation-expression</i>\r\n    <i>array-creation-expression</i>\r\n    <i>subscript-expression</i>\r\n    <i>function-call-expression</i>\r\n    <i>member-selection-expression</i>\r\n    <i>postfix-increment-expression</i>\r\n    <i>postfix-decrement-expression</i>\r\n    <i>scope-resolution-expression</i>\r\n    <i>exponentiation-expression</i>\r\n\r\n\r\n  <i>clone-expression:</i>\r\n    clone  <i>expression</i>\r\n\r\n  <i>object-creation-expression:</i>\r\n    new  <i>class-type-designator</i>  (  <i>argument-expression-list<sub>opt</sub></i>  )\r\n    new  <i>class-type-designator</i>\r\n\r\n  <i>class-type-designator:</i>\r\n    static\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n\r\n  <i>array-creation-expression:</i>\r\n    array  (  <i>array-initializer<sub>opt</sub></i>  )\r\n    [ <i>array-initializer<sub>opt</sub></i> ]\r\n\r\n  <i>array-initializer:</i>\r\n    <i>array-initializer-list</i>  ,<sub>opt</sub>\r\n\r\n  <i>array-initializer-list:</i>\r\n    <i>array-element-initializer</i>\r\n    <i>array-element-initializer  ,  array-initializer-list</i>\r\n\r\n  <i>array-element-initializer:</i>\r\n    &<sub>opt</sub>   <i>element-value</i>\r\n    element-key  =>  &<sub>opt</sub>   <i>element-value</i>\r\n\r\n  <i>element-key:</i>\r\n    <i>expression</i>\r\n\r\n  <i>element-value</i>\r\n    <i>expression</i>\r\n\r\n  <i>subscript-expression:</i>\r\n    <i>postﬁx-expression</i>  [  <i>expression<sub>opt</sub></i>  ]\r\n    <i>postﬁx-expression</i>  {  <i>expression<sub>opt</sub></i>  }   <b>[Deprecated form]</b>\r\n\r\n  <i>function-call-expression:</i>\r\n    <i>postﬁx-expression</i>  (  <i>argument-expression-list<sub>opt</sub></i>  )\r\n\r\n  <i>argument-expression-list:</i>\r\n    <i>assignment-expression</i>\r\n    <i>argument-expression-list</i>  ,  <i>assignment-expression</i>\r\n\r\n  <i>member-selection-expression:</i>\r\n    <i>postﬁx-expression</i>  ->  <i>member-selection-designator</i>\r\n\r\n  <i>member-selection-designator:</i>\r\n    <i>name</i>\r\n    <i>expression</i>\r\n\r\n  <i>postfix-increment-expression:</i>\r\n    <i>unary-expression</i>  ++\r\n\r\n  <i>postfix-decrement-expression:</i>\r\n    <i>unary-expression</i>  --\r\n\r\n  <i>scope-resolution-expression:</i>\r\n    <i>scope-resolution-qualifier</i>  ::  <i>member-selection-designator</i>\r\n    <i>scope-resolution-qualifier</i>  ::  <i>class</i>\r\n\r\n  <i>scope-resolution-qualifier:</i>\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n    self\r\n    parent\r\n    static\r\n   \r\n  <i>exponentiation-expression:</i>\r\n    <i>expression  **  expression</i>                    \r\n</pre>\r\n\r\n####Unary Operators\r\n\r\n<pre>\r\n  <i>unary-expression:</i>\r\n    <i>postfix-expression</i>\r\n    <i>prefix-increment-expression</i>\r\n    <i>prefix-decrement-expression</i>\r\n    <i>unary-op-expression</i>\r\n    <i>error-control-expression</i>\r\n    <i>shell-command-expression</i>\r\n    <i>cast-expression</i>\r\n    <i>variable-name-creation-expression</i>\r\n\r\n  <i>prefix-increment-expression:</i>\r\n    ++ <i>unary-expression</i>\r\n\r\n  <i>prefix-decrement-expression:</i>\r\n    -- <i>unary-expression</i>\r\n\r\n  <i>unary-op-expression:</i>\r\n    <i>unary-operator cast-expression</i>\r\n\r\n  <i>unary-operator: one of</i>\r\n    +  -  !  \\\r\n\r\n  <i>error-control-expression:</i>\r\n    @   <i>expression</i>\r\n\r\n  <i>shell-command-expression:</i>\r\n    `  <i>dq-char-sequence<sub>opt</sub></i>  `\r\n\r\n  <i>cast-expression:</i>\r\n    <i>unary-expression</i>\r\n    (  <i>cast-type</i>  ) <i>cast-expression</i>\r\n\r\n  <i>cast-type: one of</i>\r\n    array  binary  bool  boolean  double  int  integer  float  object\r\n    real  string  unset\r\n\r\n  <i>variable-name-creation-expression:</i>\r\n    $   <i>expression</i>\r\n    $  {  <i>expression</i>  }\r\n                        \r\n</pre>\r\n\r\n####instanceof Operator\r\n\r\n<pre>\r\n  <i>instanceof-expression:</i>\r\n    <i>unary-expression</i>\r\n    <i>instanceof-subject</i>  instanceof   <i>instanceof-type-designator</i>\r\n\r\n  <i>instanceof-subject:</i>\r\n    <i>expression</i>\r\n\r\n  <i>instanceof-type-designator:</i>\r\n    <i>qualified-name</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n####Multiplicative Operators\r\n\r\n<pre>\r\n  <i>multiplicative-expression:</i>\r\n    <i>instanceof-expression</i>\r\n    <i>multiplicative-expression</i>  *  <i>multiplicative-expression</i>\r\n    <i>multiplicative-expression</i>  /  <i>multiplicative-expression</i>\r\n    <i>multiplicative-expression</i>  %  <i>multiplicative-expression</i>\r\n</pre>\r\n\r\n####Additive Operators\r\n\r\n<pre>\r\n  <i>additive-expression:</i>\r\n    <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  +  <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  -  <i>multiplicative-expression</i>\r\n    <i>additive-expression</i>  .  <i>multiplicative-expression</i>\r\n</pre>\r\n\r\n####Bitwise Shift Operators\r\n\r\n<pre>\r\n  <i>shift-expression:</i>\r\n    <i>additive-expression</i>\r\n    <i>shift-expression</i>  <<  <i>additive-expression</i>\r\n    <i>shift-expression</i>  >>  <i>additive-expression</i>\r\n</pre>\r\n\r\n####Relational Operators\r\n\r\n<pre>\r\n  <i>relational-expression:</i>\r\n    <i>shift-expression</i>\r\n    <i>relational-expression</i>  <   <i>shift-expression</i>\r\n    <i>relational-expression</i>  >   <i>shift-expression</i>\r\n    <i>relational-expression</i>  <=  <i>shift-expression</i>\r\n    <i>relational-expression</i>  >=  <i>shift-expression</i>\r\n</pre>\r\n\r\n####Equality Operators\r\n\r\n<pre>\r\n  <i>equality-expression:</i>\r\n    <i>relational-expression</i>\r\n    <i>equality-expression</i>  ==  <i>relational-expression</i>\r\n    <i>equality-expression</i>  !=  <i>relational-expression</i>\r\n    <i>equality-expression</i>  <>  <i>relational-expression</i>\r\n    <i>equality-expression</i>  ===  <i>relational-expression</i>\r\n    <i>equality-expression</i>  !==  <i>relational-expression</i>\r\n</pre>\r\n\r\n####Bitwise Logical Operators\r\n\r\n<pre>\r\n  <i>bitwise-AND-expression:</i>\r\n    <i>equality-expression</i>\r\n    <i>bit-wise-AND-expression</i>  &  <i>equality-expression</i>\r\n\r\n  <i>bitwise-exc-OR-expression:</i>\r\n    <i>bitwise-AND-expression</i>\r\n    <i>bitwise-exc-OR-expression</i>  ^   <i>bitwise-AND-expression</i>\r\n    \r\n  <i>bitwise-inc-OR-expression:</i>\r\n    <i>bitwise-exc-OR-expression</i>\r\n    <i>bitwise-inc-OR-expression</i>  |  <i>bitwise-exc-OR-expression</i>\r\n</pre>\r\n\r\n####Logical Operators (form 1)\r\n\r\n<pre>\r\n  <i>logical-AND-expression-1:</i>\r\n    <i>bitwise-incl-OR-expression</i>\r\n    <i>logical-AND-expression-1</i>  &&  <i>bitwise-inc-OR-expression</i>\r\n\r\n  <i>logical-inc-OR-expression-1:</i>\r\n    <i>logical-AND-expression-1</i>\r\n    <i>logical-inc-OR-expression-1</i>  ||  <i>logical-AND-expression-1</i>\r\n</pre>\r\n\r\n####Conditional Operator\r\n\r\n<pre>\r\n  <i>conditional-expression:</i>\r\n    <i>logical-inc-OR-expression-1</i>\r\n    <i>logical-inc-OR-expression-1</i>  ?  <i>expression<sub>opt</sub></i>  :  <i>conditional-expression</i>\r\n</pre>\r\n\r\n####Assignment Operators\r\n\r\n<pre>\r\n  <i>assignment-expression:</i>\r\n    <i>conditional-expression</i>\r\n    <i>simple-assignment-expression</i>\r\n    <i>byref-assignment-expression</i>\r\n    <i>compound-assignment-expression</i>\r\n\r\n  <i>simple-assignment-expression:</i>\r\n    <i>unary-expression</i>  =  <i>assignment-expression</i>\r\n    \r\n  <i>byref-assignment-expression:</i>\r\n    <i>unary-expression</i>  =  &  <i>assignment-expression</i>\r\n    \r\n  <i>compound-assignment-expression:</i>\r\n    <i>unary-expression   compound-assignment-operator   assignment-expression</i>\r\n\r\n  <i>compound-assignment-operator: one of</i>\r\n    **=  *=  /=  %=  +=  -=  .=  <<=  >>=  &=  ^=  |=    \r\n</pre>\r\n\r\n####Logical Operators (form 2)\r\n\r\n<pre>\r\n  <i>logical-AND-expression-2:</i>\r\n    <i>assignment-expression</i>\r\n    <i>logical-AND-expression-2</i>  and  <i>assignment-expression</i>\r\n\r\n  <i>logical-exc-OR-expression:</i>\r\n    <i>logical-AND-expression-2</i>\r\n    <i>logical-exc-OR-expression</i>  xor  <i>logical-AND-expression-2</i>\r\n\r\n  <i>logical-inc-OR-expression-2:</i>\r\n    <i>logical-exc-OR-expression</i>\r\n    <i>logical-inc-OR-expression-2</i>  or  <i>logical-exc-OR-expression</i>\r\n    \r\n</pre>\r\n\r\n\r\n####yield Operator\r\n\r\n<pre>\r\n  <i>yield-expression:</i>\r\n    <i>logical-inc-OR-expression-2</i>\r\n    yield  <i>array-element-initializer</i>\r\n</pre>\r\n\r\n####Script Inclusion Operators\r\n\r\n<pre>\r\n  <i>expression:</i>\r\n    <i>yield-expression</i>\r\n    <i>include-expression</i>\r\n    <i>include-once-expression</i>\r\n    <i>require-expression</i>\r\n    <i>require-once-expression</i>\r\n\r\n  <i>include-expression:</i>\r\n    include  (  <i>include-filename</i>  )\r\n    include  <i>include-filename</i>\r\n\r\n  <i>include-filename:</i>\r\n    <i>expression</i>\r\n    \r\n  <i>include-once-expression:</i>\r\n    include_once  (  <i>include-filename</i>  )\r\n    include_once  <i>include-filename</i>\r\n    \r\n  <i>require-expression:</i>\r\n    require  (  <i>include-filename</i>  )\r\n    require  <i>include-filename</i>\r\n    \r\n  <i>require-once-expression:</i>\r\n    require_once  (  <i>include-filename</i>  )\r\n    require_once  <i>include-filename</i>\r\n</pre>\r\n\r\n####Constant Expressions\r\n\r\n<pre>\r\n  <i>constant-expression:</i>\r\n    <i>array-creation-expression</i>\r\n    <i>const-expression</i>\r\n\r\n  <i>const-expression:</i>\r\n    <i>expression</i>\r\n</pre>\r\n  \r\n###Statements\r\n\r\n####General\r\n\r\n<pre>\r\n\r\n  <i>statement:</i>\r\n    <i>compound-statement</i>\r\n\t<i>labeled-statement</i>\r\n    <i>expression-statement</i>\r\n    <i>selection-statement</i>\r\n    <i>iteration-statement</i>\r\n    <i>jump-statement</i>\r\n    <i>declare-statement</i>\r\n    <i>const-declaration</i>\r\n    <i>function-deﬁnition</i>\r\n    <i>class-declaration</i>\r\n    <i>interface-declaration</i>\r\n    <i>trait-declaration</i>\r\n    <i>namespace-definition</i>\r\n    <i>namespace-use-declaration</i>\r\n    <i>global-declaration</i>\r\n    <i>function-static-declaration</i>\r\n</pre>\r\n\r\n####Compound Statements\r\n\r\n<pre>\r\n  <i>compound-statement:</i>\r\n    {   <i>statement-list<sub>opt</sub></i>  }\r\n\r\n  <i>statement-list:</i>\r\n    <i>statement</i>\r\n    <i>statement-list   statement</i>\r\n</pre>\r\n\r\n####Labeled Statements\r\n\r\n<pre>\r\n  <i>labeled-statement:</i>\r\n    <i>named-label</i>\r\n    <i>case-label</i>\r\n    <i>default-label</i>\r\n\r\n  <i>named-label:</i>\r\n    <i>name</i>  :  <i>statement</i>\r\n\r\n  <i>case-label:</i>\r\n    <i>case   expression   case-default-label-terminator   statement</i>\r\n\r\n  <i>default-label:</i>\r\n    <i>default  case-default-label-terminator   statement</i>\r\n\r\n  <i>case-default-label-terminator:</i>\r\n    :\r\n    ;\r\n</pre>\r\n\r\n####Expression Statements\r\n\r\n<pre>\r\n   <i>expression-statement:</i>\r\n     <i>expression<sub>opt</sub></i>  ;\r\n\r\n  <i>selection-statement:</i>\r\n    <i>if-statement</i>\r\n    <i>switch-statement</i>\r\n    \r\n  <i>if-statement:</i>\r\n    if   (   <i>expression</i>   )   <i>statement   elseif-clauses-1opt   else-clause-1opt</i>\r\n    if   (   <i>expression   )   :   <i>statement-list   elseif-clauses-2opt   else-clause-2opt</i>   endif   ;\r\n\r\n  <i>elseif-clauses-1:</i>\r\n    <i>elseif-clause-1</i>\r\n    <i>elseif-clauses-1   elseif-clause-1</i>\r\n\r\n  <i>elseif-clause-1:</i>\r\n    elseif   (   <i>expression</i>   )   <i>statement</i>\r\n \r\n  <i>else-clause-1:</i>\r\n    else   <i>statement</i>\r\n\r\n  <i>elseif-clauses-2:</i>\r\n    <i>elseif-clause-2</i>\r\n    <i>elseif-clauses-2   elseif-clause-2</i>\r\n\r\n  <i>elseif-clause-2:</i>\r\n    elseif   (   <i>expression</i>   )   :   <i>statement-list</i>\r\n  \r\n  <i>else-clause-2:</i>\r\n    else   :   <i>statement-list</i>\r\n\r\n  <i>switch-statement:</i>\r\n    switch  (  <i>expression</i>  )  <i>compound-statement</i>\r\n    switch  (  <i>expression</i>  )  :   <i>statement-list</i>  endswitch;\r\n        \r\n</pre>\r\n\r\n####Iteration Statements\r\n\r\n<pre>\r\n  <i>iteration-statement:</i>\r\n    <i>while-statement</i>\r\n    <i>do-statement</i>\r\n    <i>for-statement</i>\r\n    <i>foreach-statement</i>\r\n\r\n  <i>while-statement:</i>\r\n    while  (  <i>expression</i>  )  <i>statement</i>\r\n    while  (  <i>expression</i>  )  :   <i>statement-list</i>  endwhile ;\r\n    \r\n  <i>do-statement:</i>\r\n    do  <i>statement</i>  while  (  <i>expression</i>  )  ;\r\n\r\n\r\n  <i>for-statement:</i>\r\n    for   (   <i>for-initializeropt</i>   ;   <i>for-controlopt</i>   ;   <i>for-end-of-loopopt</i>   )   <i>statement</i>\r\n    for   (   <i>for-initializeropt</i>   ;   <i>for-controlopt</i>   ;   <i>for-end-of-loopopt</i>   )   :   <i>statement-list</i>   endfor   ;\r\n\r\n  <i>for-initializer:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-control:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-end-of-loop:</i>\r\n    <i>for-expression-group</i>\r\n\r\n  <i>for-expression-group:</i>\r\n    <i>expression</i>\r\n    <i>for-expression-group</i>   ,   <i>expression</i>\r\n\r\n  <i>foreach-statement:</i>\r\n    foreach  (  <i>foreach-collection-name</i>  as  <i>foreach-key<sub>opt</sub>  foreach-value</i>  )   statement\r\n    foreach  (  <i>foreach-collection-name</i>  as  <i>foreach-key<sub>opt</sub>   foreach-value</i>  )  :   <i>statement-list</i>  endforeach  ;\r\n\r\n  <i>foreach-collection-name</i>:\r\n    <i>expression</i>\r\n\r\n  <i>foreach-key:</i>\r\n    <i>expression</i>  =>\r\n\r\n  <i>foreach-value:<i>\r\n    &<sub>opt</sub>   <i>expression</i>\r\n    <i>list-intrinsic</i>\r\n            \r\n</pre>\r\n\r\n####Jump Statements\r\n\r\n<pre>\r\n  <i>jump-statement:</i>\r\n    <i>goto-statement</i>\r\n    <i>continue-statement</i>\r\n    <i>break-statement</i>\r\n    <i>return-statement</i>\r\n    <i>throw-statement</i>\r\n\r\n  <i>goto-statement:</i>\r\n    goto  <i>name</i>  ;\r\n    \r\n  <i>continue-statement:</i>\r\n    continue   <i>breakout-level<sub>opt</sub></i>  ;\r\n\r\n  <i>breakout-level:</i>\r\n    <i>integer-literal</i>\r\n    \r\n  <i>break-statement:</i>\r\n    break  <i>breakout-level<sub>opt</sub></i>  ;\r\n    \r\n  <i>return-statement:</i>\r\n    return  <i>expression<sub>opt</sub></i>  ;\r\n    \r\n  <i>throw-statement:</i>\r\n    throw  <i>expression</i>  ;\r\n</pre>\r\n\r\n####The try Statement\r\n\r\n<pre>\r\n  <i>try-statement:</i>\r\n    try  <i>compound-statement   catch-clauses</i>\r\n    try  <i>compound-statement   finally-clause</i>\r\n    try  <i>compound-statement   catch-clauses   finally-clause</i>\r\n\r\n  <i>catch-clauses:</i>\r\n    <i>catch-clause</i>\r\n    <i>catch-clauses   catch-clause</i>\r\n\r\n  <i>catch-clause:</i>\r\n    catch  (  <i>parameter-declaration-list</i>  )  <i>compound-statement</i>\r\n\r\n  <i>finally-clause:</i>\r\n    finally   <i>compound-statement</i>\r\n</pre>\r\n\r\n####The declare Statement\r\n\r\n<pre>\r\n  <i>declare-statement:</i>\r\n    declare  (  <i>declare-directive</i>  )  <i>statement</i>\r\n    declare  (  <i>declare-directive</i>  )  :  <i>statement-list</i>  enddeclare  ;\r\n    declare  (  <i>declare-directive</i>  )  ;\r\n\r\n  <i>declare-directive:</i>\r\n    ticks  =  <i>declare-tick-count</i>\r\n    encoding  =  <i>declare-character-encoding</i>\r\n\r\n  <i>declare-tick-count</i>\r\n    <i>expression</i>\r\n\r\n  <i>declare-character-encoding:</i>\r\n    <i>expression</i>\r\n</pre>\r\n\r\n###Functions\r\n\r\n<pre>\r\n  <i>function-deﬁnition:</i>\r\n    <i>function-deﬁnition-header   compound-statement</i>\r\n\r\n  <i>function-deﬁnition-header:</i>\r\n    function  &<sub>opt</sub>   <i>name</i>  (  <i>parameter-declaration-list<sub>opt</sub></i>  )\r\n\r\n  <i>parameter-declaration-list:</i>\r\n    <i>parameter-declaration</i>\r\n    <i>parameter-declaration-list</i>  ,  <i>parameter-declaration</i>\r\n\r\n  <i>parameter-declaration:</i>\r\n    <i>type-hint<sub>opt</sub></i>  &<sub>opt</sub>   <i>variable-name   default-argument-specifier<sub>opt</sub></i>\r\n\r\n  <i>type-hint:</i>\r\n    array\r\n    callable\r\n    <i>qualified-name</i>\r\n\r\n  <i>default-argument-specifier:</i>\r\n    =  <i>const-expression</i>\r\n</pre>\r\n\r\n###Classes\r\n\r\n<pre>\r\n  <i>class-declaration:</i>\r\n    <i>class-modifier<sub>opt</sub></i>  class  <i>name   class-base   clause<sub>opt</sub>  class-interface-clause<sub>opt</sub></i>   {   <i>trait-use-clauses<sub>opt</sub>   class-member-declarations<sub>opt</sub></i> }\r\n\r\n  <i>class-modifier:</i>\r\n    abstract\r\n    final\r\n\r\n  <i>class-base-clause:</i>\r\n    extends  <i>qualified-name</i>\r\n\r\n  <i>class-interface-clause:</i>\r\n    implements  <i>qualified-name</i>\r\n    <i>class-interface-clause</i>  ,  <i>qualified-name</i>\r\n\r\n  <i>class-member-declarations:</i>\r\n    <i>class-member-declaration</i>\r\n    <i>class-member-declarations   class-member-declaration</i>\r\n\r\n   <i>class-member-declaration:</i>\r\n     <i>const-declaration</i>\r\n     <i>property-declaration</i>\r\n     <i>method-declaration</i>\r\n     <i>constructor-declaration</i>\r\n     <i>destructor-declaration</i>\r\n     \r\n  <i>const-declaration:</i>\r\n    const  <i>name</i>  =  <i>const-expression</i>   ;\r\n    \r\n  <i>property-declaration:</i>\r\n    <i>property-modifier   name   property-initializer<sub>opt</sub></i>  ;\r\n\r\n  <i>property-modifier:</i>\r\n    var\r\n    <i>visibility-modifier   static-modifier<sub>opt</sub></i>\r\n    <i>static-modifier   visibility-modifier<sub>opt</sub></i>\r\n\r\n  <i>visibility-modifier:</i>\r\n    public\r\n    protected\r\n    private\r\n\r\n  <i>static-modifier:</i>\r\n    static\r\n\r\n  <i>property-initializer:</i>\r\n    =  <i>constant-expression</i>\r\n    \r\n  method-declaration:\r\n    <i>method-modifiers<sub>opt</sub>   function-deﬁnition</i>\r\n    <i>method-modifiers   function-deﬁnition-header</i>  ;\r\n\r\n  <i>method-modifiers:</i>\r\n    <i>method-modifier</i>\r\n    <i>method-modifiers   method-modifier</i>\r\n\r\n  <i>method-modifier:</i>\r\n    <i>visibility-modifier</i>\r\n    <i>static-modifier</i>\r\n    abstract\r\n    final\r\n\r\n  <i>constructor-deﬁnition:</i>\r\n    <i>visibility-modifier</i>  function &<sub>opt</sub>   __construct  (  <i>parameter-declaration-list<sub>opt</sub></i>  )  <i>compound-statement</i>\r\n    <i>visibility-modifier</i>  function &<sub>opt</sub>    <i>name</i>  (  <i>parameter-declaration-list<sub>opt</sub></i>  )  <i>compound-statement </i>    <b>[Deprecated form]</b>\r\n\r\n  <i>destructor-deﬁnition:</i>\r\n    <i>visibility-modifier</i>  function  &<sub>opt</sub>  __destruct  ( ) <i>compound-statement</i>\r\n    \r\n</pre>\r\n\r\n###Interfaces\r\n\r\n<pre>\r\n  <i>interface-declaration:</i>\r\n    interface   <i>name   interface-base-clause<sub>opt</sub></i> {  <i>interface-member-declarations<sub>opt</sub></i>  }\r\n\r\n  <i>interface-base-clause:</i>\r\n    extends   <i>qualified-name</i>\r\n    <i>interface-base-clause</i>  ,  <i>qualified-name</i>\r\n\r\n  <i>interface-member-declarations:</i>\r\n    <i>interface-member-declaration</i>\r\n    <i>interface-member-declarations   interface-member-declaration</i>\r\n\r\n  <i>interface-member-declaration:</i>\r\n    <i>const-declaration</i>\r\n    <i>method-declaration</i>\r\n</pre>\r\n\r\n###Traits\r\n\r\n<pre>\r\n  <i>trait-declaration:</i>\r\n    trait   <i>name</i>   {   <i>trait-use-clauses<sub>opt</sub>   trait-member-declarations<sub>opt</sub></i>   }\r\n\r\n  <i>trait-use-clauses:</i>\r\n    <i>trait-use-clause</i>\r\n    <i>trait-use-clauses   trait-use-clause</i>\r\n\r\n  <i>trait-use-clause:</i>\r\n    use   <i>trait-name-list   trait-use-terminator</i>\r\n\r\n  <i>trait-name-list:</i>\r\n    <i>qualified-name</i>\r\n    <i>trait-name-list</i>   ,   <i>qualified-name</i>\r\n\r\n  <i>trait-use-terminator:</i>\r\n    ;\r\n    {   <i>trait-select-and-alias-clauses<sub>opt</sub></i>   }\r\n\r\n  <i>trait-select-and-alias-clauses:</i>\r\n    <i>trait-select-and-alias-clause</i>\r\n    <i>trait-select-and-alias-clauses   trait-select-and-alias-clause</i>\r\n\r\n  <i>trait-select-and-alias-clause:</i>\r\n    <i>trait-select-insteadof-clause</i>\r\n    <i>trait-alias-as-clause</i>\r\n\r\n  <i>trait-select-insteadof-clause:</i>\r\n    <i>name</i>   insteadof   <i>name</i>\r\n\r\n  trait-alias-as-clause:\r\n    <i>name</i>   as   <i>visibility-modifier<sub>opt</sub>   name</i>\r\n    <i>name</i>   as   <i>visibility-modifier   name<sub>opt</sub></i>\r\n\r\n  <i>trait-member-declarations:</i>\r\n    <i>trait-member-declaration</i>\r\n    <i>trait-member-declarations   trait-member-declaration</i>\r\n\r\n  <i>trait-member-declaration:</i>\r\n    <i>property-declaration</i>\r\n    <i>method-declaration</i>\r\n    <i>constructor-declaration</i>\r\n    <i>destructor-declaration</i>\r\n    \r\n</pre>    \r\n\r\n###Namespaces\r\n\r\n<pre>\r\n  <i>namespace-definition:</i>\r\n    namespace  <i>namespace-name</i>  ;\r\n    namespace  <i>namespace-name<sub>opt</sub>   compound-statement</i>\r\n\r\n  <i>namespace-use-declaration:</i>\r\n    use  <i>namespace-use-clauses</i>  ;\r\n\r\n  <i>namespace-use-clauses:</i>\r\n    <i>namespace-use-clause</i>\r\n    <i>namespace-use-clauses</i>  ,  <i>namespace-use-clause</i>\r\n\r\n  <i>namespace-use-clause:</i>\r\n    <i>qualified-name   namespace-aliasing-clause<sub>opt</sub></i>\r\n\r\n  <i>namespace-aliasing-clause:</i>\r\n    as  <i>name</i>\r\n</pre>\r\n\r\n#Bibliography\r\n\r\nThe following documents are useful references for implementers and users\r\nof this specification:\r\n\r\nIEC 60559:1989, *Binary floating-point arithmetic for microprocessor\r\nsystems* (previously designated IEC 559:1989). (This standard is widely\r\nknown by its U.S. national designation, ANSI/IEEE Standard 754-1985,\r\nIEEE Standard for Binary Floating-Point Arithmetic.)\r\n\r\nThe Unicode Consortium. *The Unicode Standard, Version 5.0*,\r\n[www.Unicode.org](http://www.Unicode.org)).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}